//-----------------------------------------------------------------------------
//
//
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------

#define CTRL_NAME	"(self)"

#include "../ikPolishShader.fxsub"
#include "../Sources/constants.fxsub"
#include "./Sources/light.fxsub"
#include "./Sources/directional_common.fxsub"
#include "./Sources/fog.fxsub"

static float LightSize = 0.1;

#define SHADOW_FX_FILE	"./Sources/directional_shadow.fx"
#define	SHADOW_RT_DESCRIPTION	"shadowmap for spot light"

#define EnableSoftShadow	0

//-----------------------------------------------------------------------------

#include "../Sources/structs.fxsub"
#include "../Sources/colorutil.fxsub"
#include "../Sources/gbuffer.fxsub"
#include "../Sources/lighting.fxsub"

#include "./Sources/directional_light.fxsub"

//-----------------------------------------------------------------------------
//
float4 CalcTexCoef()
{
	const float Sx = 1.0 / tan(LightFOV);
	float4 TexCoef = 0;
	TexCoef.xy = Sx;
	return TexCoef;
}

// 円形にカット
float EdgeMask(float2 uv, float lod)
{
	uv = uv * 2.0 - 1;
	float mask = saturate(dot(uv, uv));
	float blurriness = lod / (MaxLod - 1.0);
	return 1.0 - pow(mask, (1.0 - blurriness) * 3.5 + 0.25);
}

float3 GetCookie(float3 wpos, float lod, float4 coef)
{
	float4 zcalc = mul(float4(wpos, 1), matLightV);
	zcalc.xy = zcalc.xy * coef.x / zcalc.z;
	float2 uv = zcalc.xy * -0.5 + 0.5;

	#if EnableLighTexture > 0
	// テクスチャ使用
	// NOTE: 距離に応じてlodを変えるべき?
	float3 col = GetTextureColor(uv, lod);
	col += GetTextureColor(uv, lod + 1);
	col += GetTextureColor(uv, lod + 2);
	col /= 3.0;
	#else
	float3 col = 1;
	#endif

	return col * EdgeMask(uv, lod);
}

float3 GetCookieSimple(float3 wpos, float lod, float4 coef)
{
	float4 zcalc = mul(float4(wpos, 1), matLightV);
	zcalc.xy = zcalc.xy * coef.x / zcalc.z;
	float2 uv = zcalc.xy * -0.5 + 0.5;

	#if EnableLighTexture > 0
	float3 col = GetTextureColor(uv, lod + 1);
	#else
	float3 col = 1;
	#endif

	return col * EdgeMask(uv, lod);
}

//-----------------------------------------------------------------------------
//
VS_OUTPUT VS_SetTexCoord( float4 Pos : POSITION, float4 Tex : TEXCOORD0)
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 

	Out.Pos = Pos;
	Out.TexCoord.xy = Tex.xy + ViewportOffset.xy;
	Out.TexCoord.z = TextureSharpness;
	Out.TexCoord.w = LightRadius + LightSize;

	Out.TexCoef = CalcTexCoef();

	// matLightVPを生成してPSに送る

	return Out;
}

PS_OUT_MRT PS_DrawLight( float4 Tex: TEXCOORD0, float4 TexCoef: TEXCOORD1, uniform bool useShadow )
{
	float4 albedo = tex2D(ColorMap, Tex.xy);
	MaterialParam material = GetMaterial(Tex.xy, albedo);
	GeometryInfo geom = GetWND(Tex.xy);
	float3 wpos = geom.wpos;
	float depth = geom.nd.depth;
	float sharpness = Tex.z;
	float range = Tex.w;

	float3 V = normalize(CameraPosition - wpos);
	float3 N = normalize(geom.nd.normal);
	float3 lv = LightPosition - wpos;
	float3 L0 = normalize(lv);
	float3 L = -LightDirection;

	float shadow = CalcLightFalloff(wpos, LightPosition, range);
	shadow *= (dot(N, L0) > 0.0) * (dot(lv, L) > 0.0);
	clip(shadow - 1e-4);
	shadow *= CalcShadow(float4(wpos,1), dot(N, L), Tex.xy);

	//-----------------------------------------------------
	// デフューズ
	float3 diffuseCol = GetCookie(wpos, sharpness, TexCoef);
	float3 diffuse = diffuseCol;
	diffuse *= saturate(dot(N, L0));
	diffuse *= LightColor * shadow;

	//-----------------------------------------------------
	// スペキュラ
	float3 R = normalize(reflect(-V, N));

	float3 specColor = diffuseCol;
	float3 specular = CalcSpecular(L0, N, V, material.roughness, material.f0);
	specular *= specColor;
	specular *= LightColor * shadow;

	PS_OUT_MRT Out;
	Out.Diffuse = float4(diffuse, 1);
	Out.Specular = float4(specular, 1);

	return Out;
}


//-----------------------------------------------------------------------------
//
#if FOG_TYPE == 2 && VOLUMETRIC_FOG > 0

VS_OUTPUT_FOG VS_DrawVolumeLight( float4 Pos : POSITION, float4 Tex : TEXCOORD0)
{
	VS_OUTPUT_FOG Out = (VS_OUTPUT_FOG)0; 

	Out.Pos = Pos;
	Out.TexCoord.xy = Tex.xy + ViewportOffset.xy;
	Out.TexCoord.z = TextureSharpness;
	Out.TexCoord.w = LightRadius + LightSize;

	Out.TexCoef = CalcTexCoef();

	Out.PhaseCoef.xyz = CalcNormalizedMieCoef();
	Out.PhaseCoef.w = mFogIntensity;

	return Out;
}


float4 PS_DrawVolumeLight( float4 Tex: TEXCOORD0, float4 TexCoef: TEXCOORD1, float4 PhaseCoef: TEXCOORD2 ) : COLOR
{
	float3 fogTexCoord = CalcFogInterleavedTexCoord(Tex.xy);
	float2 uv = fogTexCoord.xy;
	float zorder = fogTexCoord.z;
	float3 V = GetViewDirection(uv);
	float maxDepth = MAX_FOG_DISTANCE;
	float startDepth = zorder * maxDepth;
	float slotLength = maxDepth / (FOG_SLICE_NUM + 1.0);

	float lod = Tex.z;
	float range = Tex.w;

	// 明らかに離れている場合は即座に終了する
	float3 lv = LightPosition - CameraPosition;
	float nearest = clamp(dot(V, lv), startDepth, startDepth + slotLength);
	float3 PosC = CameraPosition + V * nearest;
	float lightMax = CalcLightFalloff(PosC, LightPosition, range);
	clip(lightMax - 1e-4);

	float3 PosB = CameraPosition + V * startDepth;
	float3 PosE = PosB + V * slotLength;
	// 裏面なら即座に抜ける?

	float3 sum = 0;
	for(int i = 0; i < MAX_FOG_STEP; i++)
	{
		float t = i * 1.0 / MAX_FOG_STEP;
		float3 wpos = lerp(PosB, PosE, t);
		float3 L = normalize(LightPosition - wpos);

		float light = CalcShadowSimple(float4(wpos,1));
		light *= CalcLightFalloff(wpos, LightPosition, range);
		light *= GetFogPhase(V, L, PhaseCoef.xyz);
		light *= (dot(L, -LightDirection) > 0.0); // 反対向きのクリップ
		sum += GetCookieSimple(wpos, lod, TexCoef) * light;
	}

	sum.rgb *= PhaseCoef.w / MAX_FOG_STEP;
	float3 col = sum.rgb * LightColor;

	return float4(col, 0.0);
}
#endif


//-----------------------------------------------------------------------------
// 

#if EnableShadowMap > 0
#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass; \
		string Script =  \
			FOG_SCRIPT \
			"RenderColorTarget1=PPPSpecularMapRT;" \
			"RenderColorTarget0=; Pass=DrawLight;" \
			"RenderColorTarget1=;"; \
	> { \
		FOG_PASS \
		pass DrawLight < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			SrcBlend = ONE; DestBlend = ONE; \
			VertexShader = compile vs_3_0 VS_SetTexCoord(); \
			PixelShader  = compile ps_3_0 PS_DrawLight(true); \
		} \
	}
#else
#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass; \
		string Script =  \
			FOG_SCRIPT \
			"RenderColorTarget1=PPPSpecularMapRT;" \
			"RenderColorTarget0=; Pass=DrawLight;" \
			"RenderColorTarget1=;"; \
	> { \
		FOG_PASS \
		pass DrawLight < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			SrcBlend = ONE; DestBlend = ONE; \
			VertexShader = compile vs_3_0 VS_SetTexCoord(); \
			PixelShader  = compile ps_3_0 PS_DrawLight(false); \
		} \
	}
#endif


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

//-----------------------------------------------------------------------------


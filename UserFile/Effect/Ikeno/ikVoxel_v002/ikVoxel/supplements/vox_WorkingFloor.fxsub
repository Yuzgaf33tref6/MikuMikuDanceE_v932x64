////////////////////////////////////////////////////////////////////////////////////////////////
//
//  WorkingFloorX.fx用ボクセル描画
//
////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////
// パラメータ宣言 (ikVoxel.fx本体に合わせる必要がある)

// ブロックのサイズ。0.1〜1.0程度。
float VoxelGridSize = 0.5;

// テクスチャの解像度を下げる。8〜32程度。
// 8でテクスチャを8分割する。小さいほど粗くなる。
float VoxelTextureGridSize = 16;

// 無視する透明度の閾値
float VoxelAlphaThreshold = 0.05;

// ブロックを描画するとき半透明を考慮する?
// 0:不透明で描画、1:半透明度を利用する。
#define VOXEL_ENBALE_ALPHA_BLOCK	1

// ブロックのフチを丸めるか? 0.0〜0.1程度 大きいほどエッジ部分が強調される
// ※ 0にしても計算誤差でエッジが見える場合があります。
float VoxelBevelOffset = 0.05;

// チェック回数。4〜16程度。多いほど遠くまで検索するが、重くなる。
#define VOXEL_ITERATION_NUMBER	6

// 外部からブロックサイズをコントロールするアクセサリ名
#define VOXEL_CONTROLLER_NAME	"ikiVoxelSize.x"

//色の計算が必要か?
//#define	VOXEL_ENABLE_OUPUT_COLOR

// ブロック表面にテクスチャを追加する場合のテクスチャ名。
// コメントアウト(行頭に"//"をつける)すると無効になる。
#define VOXEL_TEXTURE	"../grid.png"

// 付き抜けチェックをする? 0:しない、1:チェックする。
// 1にすることで床が抜けるのを回避できる。代わりに見た目がおかしくなる。
#define VOXEL_ENABLE_FALLOFF		0

////////////////////////////////////////////////////////////////////////////////////////////////


float3 MirrorPos = float3( 0.0, 0.0, 0.0 );    // ローカル座標系における鏡面上の任意の座標(アクセ頂点座標の一点)
float3 MirrorNormal = float3( 0.0, 1.0, 0.0 ); // ローカル座標系における鏡面の法線ベクトル

// 鏡面座標変換パラメータ
float4x4 MirrorWorldMatrix: CONTROLOBJECT < string Name = "(OffscreenOwner)"; >; // 鏡面アクセのワールド変換行列


////////////////////////////////////////////////////////////////////////////////////////////////

// 座法変換行列
float4x4 matVP			: VIEWPROJECTION;
float4x4 matW			: WORLD;
float4x4 matV			: VIEW;
float4x4 matP			: PROJECTION;

float4x4 matLightVP		: VIEWPROJECTION < string Object = "Light"; >;
float3   LightDirection	: DIRECTION < string Object = "Light"; >;

float3   CameraPosition	: POSITION  < string Object = "Camera"; >;
float3   CameraDirection : DIRECTION  < string Object = "Camera"; >;

// マテリアル色
float4	MaterialDiffuse		: DIFFUSE  < string Object = "Geometry"; >;
float3	MaterialAmbient		: AMBIENT  < string Object = "Geometry"; >;
float3	MaterialEmissive	: EMISSIVE < string Object = "Geometry"; >;
float3	MaterialSpecular	: SPECULAR < string Object = "Geometry"; >;
float	SpecularPower		: SPECULARPOWER < string Object = "Geometry"; >;
float3	MaterialToon		: TOONCOLOR;
float4	GroundShadowColor	: GROUNDSHADOWCOLOR;

// ライト色
float3   LightDiffuse      : DIFFUSE   < string Object = "Light"; >;
float3   LightAmbient      : AMBIENT   < string Object = "Light"; >;
float3   LightSpecular     : SPECULAR  < string Object = "Light"; >;

// 材質モーフ対応
float4	TextureAddValue   : ADDINGTEXTURE;
float4	TextureMulValue   : MULTIPLYINGTEXTURE;
float4	SphereAddValue    : ADDINGSPHERETEXTURE;
float4	SphereMulValue    : MULTIPLYINGSPHERETEXTURE;

static float4 DiffuseColor  = MaterialDiffuse * float4(LightDiffuse, 1.0f);
static float3 AmbientColor  = MaterialAmbient * LightAmbient + MaterialEmissive;
static float3 SpecularColor = MaterialSpecular * LightSpecular;

float2 ViewportSize : VIEWPORTPIXELSIZE;


// ワールド座標系における鏡像位置への変換
static float3 WldMirrorPos = mul( float4(MirrorPos, 1.0f), MirrorWorldMatrix ).xyz;
static float3 WldMirrorNormal = normalize( mul( MirrorNormal, (float3x3)MirrorWorldMatrix ) );

// 座標の鏡像変換
inline float4 TransMirrorPos( float4 Pos )
{
    Pos.xyz -= WldMirrorNormal * 2.0f * dot(WldMirrorNormal, Pos.xyz - WldMirrorPos);
    return Pos;
}

// 鏡面表裏判定(座標とカメラが両方鏡面の表側にある時だけ＋)
float IsFace( float4 Pos )
{
    return min( dot(Pos.xyz-WldMirrorPos, WldMirrorNormal),
                dot(CameraPosition-WldMirrorPos, WldMirrorNormal) );
}


bool	use_texture;
bool	use_spheremap;
bool	use_toon;
bool	parthf;		// パースペクティブフラグ
bool	spadd;		// スフィアマップ加算合成フラグ
#define SKII1	1500
#define SKII2	8000
#define Toon	 3

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
	texture = <ObjectTexture>;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

// スフィアマップのテクスチャ
texture ObjectSphereMap: MATERIALSPHEREMAP;
sampler ObjSphareSampler = sampler_state {
	texture = <ObjectSphereMap>;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

// MMD本来のsamplerを上書きしないための記述です。削除不可。
sampler MMDSamp0 : register(s0);
sampler MMDSamp1 : register(s1);
sampler MMDSamp2 : register(s2);


////////////////////////////////////////////////////////////////////////////////////////////////
// カラーの出力を行うか?
#define VOXEL_ENABLE_OUPUT_COLOR

// ブロック単位で色を統一するために、色情報と深度情報を出力する
texture2D VoxelInfoTex : RenderColorTarget
<
	float2 ViewPortRatio = {0.5,0.5};
	bool AntiAlias = false;
	int Miplevels = 1;
#if defined(VOXEL_ENABLE_OUPUT_COLOR)
	string Format = "A16B16G16R16F" ;
#else
	string Format = "R16F" ;
#endif

>;
sampler VoxelInfoSampler = sampler_state {
	texture = <VoxelInfoTex>;
	FILTER = NONE;
	AddressU  = CLAMP; AddressV = CLAMP;
};

texture2D VoxelDepthBuffer : RENDERDEPTHSTENCILTARGET <
	string Format = "D24S8";
>;

#if defined(VOXEL_TEXTURE) && defined(VOXEL_ENABLE_OUPUT_COLOR)
texture2D VoxelPatternTex <
	string ResourceName = VOXEL_TEXTURE;
>;
sampler VoxelPatternSmp = sampler_state{
	texture = <VoxelPatternTex>;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = NONE;
	AddressU  = WRAP;
	AddressV = WRAP;
};
#endif


float4 VoxelClearColor = {0,0,0,0};
float VoxelClearDepth  = 1.0;

bool isExistVoxelController : CONTROLOBJECT < string name = VOXEL_CONTROLLER_NAME; >;
float VoxelAcsSi : CONTROLOBJECT < string name = VOXEL_CONTROLLER_NAME; string item = "Si"; >;
static float VoxelScaledGridSize = max(VoxelGridSize * (isExistVoxelController ? VoxelAcsSi * 0.1 : 1.0), 0.01);


////////////////////////////////////////////////////////////////////////////////////////////////

// ベクタの補正。
// vに0が入って、1/vで無限大になるのを防ぐ
inline float3 AdjustVector(float3 i)
{
	return (step(0.0, i) * 2.0 - 1.0) * max(abs(i), 1e-4);
}

// 座標の正規化
inline float3 AlignPosition(float3 pos)
{
	// floorで0付近がおかしくならないように原点をズラしてからfloorする。
	return (floor(pos.xyz * (1.0/VoxelScaledGridSize) + 1000 + 0.5) - 1000) * VoxelScaledGridSize;
}

// テクスチャの解像度を落とす
inline float2 AlignTexture(float2 uv)
{
	return (floor(uv * VoxelTextureGridSize + 1000 + 0.5) - 1000) * (1.0/VoxelTextureGridSize);
}

// ヒット判定
float4 Raytrace(float4 pos, float3 v, out float3 hitblock)
{
	float4 albedo = 0;

	pos.xyz += v * (VoxelScaledGridSize * -2.0);

	// 交差判定用の係数
	float3 invV = 1.0 / v;
	float3 offset1 = (sign(v) * VoxelScaledGridSize * 0.5) * invV;
	// float3 offset2 = (sign(v) * VoxelScaledGridSize * 1.5) * invV;
	// 次の次のブロックまでの距離を計算するための概算値
	float3 tnext0 = abs(VoxelScaledGridSize * invV);
	float t2 = min(tnext0.x, min(tnext0.y, tnext0.z));

	for(int i = 0; i < VOXEL_ITERATION_NUMBER; i++)
	{
		hitblock = AlignPosition(pos.xyz);
		float4 ppos = mul(float4(hitblock, 1), matVP);
		float4 vpos = mul(float4(hitblock, 1), matV);
		// ポリゴンが裏返らないように左右反転にして描画
		float2 uv = (ppos.xy / ppos.w * float2(-0.5, -0.5) + 0.5);

		#if defined(VOXEL_ENABLE_OUPUT_COLOR)
			float4 albedo0 = tex2Dlod(VoxelInfoSampler, float4(uv,0,0));
			float depth = albedo0.w;
		#else
			float depth = tex2Dlod(VoxelInfoSampler, float4(uv,0,0)).x;
		#endif

		if (0.0 < depth && depth < vpos.z * 1.01 + VoxelScaledGridSize)
		{
			#if defined(VOXEL_ENABLE_OUPUT_COLOR)
				albedo = albedo0;
			#else
				albedo = 1;
			#endif
			break;
		}

		float3 dif = (hitblock - pos.xyz) * invV;
		float3 tnear = offset1 + dif;		// 次のブロックまでの距離
		// float3 tnext = offset2 + dif;	// 次の次のブロックまでの距離
		float3 t0 = (tnear.x < tnear.y) ? tnear.xyz : tnear.yxz;
		t0 = (t0.y < t0.z) ? t0.xyz : ((t0.x < t0.z) ? t0.xzy : t0.zxy);
		pos.xyz += v * ((t0.x + min(t0.y, t0.x + t2)) * 0.5);
	}

	#if defined(VOXEL_ENABLE_FALLOFF) && VOXEL_ENABLE_FALLOFF > 0
	if (albedo.w <= 0.0)
	{
		hitblock = AlignPosition(pos.xyz);
		float4 ppos = mul(float4(hitblock, 1), matVP);
		float2 uv = (ppos.xy / ppos.w * float2(0.5, -0.5) + 0.5);
		#if defined(VOXEL_ENABLE_OUPUT_COLOR)
		albedo = tex2Dlod(VoxelInfoSampler, float4(uv,0,0));
		#else
		albedo = tex2Dlod(VoxelInfoSampler, float4(uv,0,0)).xxxx;
		#endif
	}
	#endif

	return albedo;
}


#if defined(VOXEL_TEXTURE) && defined(VOXEL_ENABLE_OUPUT_COLOR)
// 法線から参照するuv値を求める。
float2 CalcUV(float3 N, float3 Pos)
{
	float2 Tex;
	if (abs(N.x) > max(abs(N.y), abs(N.z)))
	{
		Tex = (N.x >= 0) ? float2( Pos.z, -Pos.y) : float2(1.0-Pos.z, -Pos.y);
	}
	else if (abs(N.y) > abs(N.z))
	{
		Tex = (N.y >= 0) ? float2( Pos.x, -Pos.z) : float2(-Pos.x, -Pos.z);
	}
	else
	{
		Tex = (N.z >= 0) ? float2(1.0 - Pos.x, -Pos.y) : float2( Pos.x, -Pos.y);
	}

	return (Tex.xy + 0.5);
}
#endif


////////////////////////////////////////////////////////////////////////////////////////////////
//

// ディフューズの計算
inline float CalcDiffuse(float3 L, float3 N)
{
	return saturate(dot(N,L));
}

// スペキュラの計算
inline float CalcSpecular(float3 L, float3 N, float3 V)
{
	float3 H = normalize(L + V);
	return pow( max(0,dot( H, N )), SpecularPower );
}

////////////////////////////////////////////////////////////////////////////////////////////////
// 輪郭描画

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウON）

// シャドウバッファのサンプラ。"register(s0)"なのはMMDがs0を使っているから
sampler DefSampler : register(s0);

struct BufferShadow_OUTPUT
{
	float4 Pos		: POSITION;	 // 射影変換座標
	float4 ZCalcTex : TEXCOORD0;	// Z値
	float2 Tex		: TEXCOORD1;	// テクスチャ
	float3 Normal   : TEXCOORD2;	// 法線
	float4 Distance	: TEXCOORD3;
	float4 WPos		: TEXCOORD4;	// Z値
};

///////////////////////////////////////////////////////////////////////////////////////////////
// ブロック単位で色を塗るための情報を出力する
BufferShadow_OUTPUT DrawInfo_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0)
{
	BufferShadow_OUTPUT Out = (BufferShadow_OUTPUT)0;

	Pos = mul( Pos, matW );
	Out.WPos = Pos;

    // 鏡像位置への座標変換
    Pos = TransMirrorPos( Pos ); // 鏡像変換
	Out.Pos = mul( Pos, matVP );
    Out.Pos.x = -Out.Pos.x; // ポリゴンが裏返らないように左右反転にして描画

	// 距離の扱いが正しくないかも?
	Out.Distance = mul( Pos, matV );

	Out.Tex = Tex;
	return Out;
}

float4 DrawInfo_PS(BufferShadow_OUTPUT IN) : COLOR
{
    // 鏡面の裏側にある部位は鏡像表示しない
    clip( IsFace( IN.WPos ) );

	float4 Color = float4(1,1,1, DiffuseColor.a);
	if ( use_texture ) {
		// テクスチャ適用
		float4 TexColor = tex2D( ObjTexSampler, AlignTexture(IN.Tex) );
		if (use_toon)
		{	// 材質モーフ対応
			float4 MorphColor = TexColor * TextureMulValue + TextureAddValue;
			float MorphRate = TextureMulValue.a + TextureAddValue.a;
			TexColor.rgb = lerp(1, MorphColor.rgb, MorphRate);
		}

		Color *= TexColor;
	}

	clip(Color.w - VoxelAlphaThreshold);
	Color.a = IN.Distance.z;

	return Color;
}


///////////////////////////////////////////////////////////////////////////////////////////////
// ブロックにヒットするか調べながら描画する

BufferShadow_OUTPUT DrawObject_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0,
	uniform bool bExpand)
{
	BufferShadow_OUTPUT Out = (BufferShadow_OUTPUT)0;

	Pos = mul( Pos, matW );
	Out.Normal = normalize( mul( Normal, (float3x3)matW ) );
	if (bExpand)
	{
		// 法線方向に拡大
		float3 vNormal = normalize(Out.Normal - dot(Out.Normal, CameraDirection));
		Pos.xyz += vNormal * VoxelScaledGridSize;
	}

	Out.WPos = Pos;

    // 鏡像位置への座標変換
    Pos = TransMirrorPos( Pos ); // 鏡像変換
	Out.Pos = mul( Pos, matVP );
    Out.Pos.x = -Out.Pos.x; // ポリゴンが裏返らないように左右反転にして描画

	// 距離の扱いが正しくないかも?
	Out.Distance = mul( Pos, matV );
	Out.Distance.x = mul(Out.WPos, matV).z;
	Out.Distance.yz = mul(float4(0,VoxelScaledGridSize,Out.Distance.x,1), matP).yw;
	Out.Distance.y *= ViewportSize.y * 0.5 / 2.0;

	Out.ZCalcTex = mul( Out.WPos, matLightVP );

	Out.Tex = Tex;

	return Out;
}


// ピクセルシェーダ
float4 DrawObject_PS(BufferShadow_OUTPUT IN, uniform bool useSelfShadow) : COLOR
{
    // 鏡面の裏側にある部位は鏡像表示しない
    clip( IsFace( IN.WPos ) );

	#if defined(VOXEL_ENBALE_ALPHA_BLOCK) && VOXEL_ENBALE_ALPHA_BLOCK > 0
	// 透明なら破棄
	float alpha = DiffuseColor.a;
	if ( use_texture ) alpha *= tex2D( ObjTexSampler, AlignTexture(IN.Tex)).a;
	clip(alpha - VoxelAlphaThreshold);
	#endif

	float4 wpos = TransMirrorPos(IN.WPos);
	float3 V = AdjustVector(normalize(CameraPosition - wpos.xyz));
		// MEMO: 鏡像化したVと通常のVを分ける?

	//-----------------------------------------------------------
	// どのブロックにヒットするか探す
	float3 hitblock = 0;
	float4 albedo = Raytrace(wpos, -V, hitblock);
	clip(albedo.w - 1e-3); // ヒットしなかった

	// 法線の計算
	float3 tNear = (CameraPosition - (hitblock.xyz + (VoxelScaledGridSize * 0.5))) * (1.0/V);
	float3 tFar  = (CameraPosition - (hitblock.xyz - (VoxelScaledGridSize * 0.5))) * (1.0/V);
	tNear = min(tNear, tFar);
	float3 hitpos = CameraPosition - V * max(tNear.x, max(tNear.y, tNear.z));
	float3 N = normalize(abs(hitpos - hitblock));
	N = normalize(step(max(N.x, max(N.y, N.z)).xxx - VoxelBevelOffset, N) * sign(V));
	// 距離に応じて法線を弱める
	// ベベルがモアレになるのを軽減する。
	float depthRate = 1.0 - saturate(IN.Distance.z / IN.Distance.y);
	N = normalize(lerp(IN.Normal, N, depthRate));
		// MEMO: 法線を逆鏡像化する必要がある?

	#if defined(VOXEL_TEXTURE)
	float2 griduv = CalcUV(N, hitpos * (1.0 / VoxelScaledGridSize));
	float3 gridPattern = tex2D( VoxelPatternSmp, griduv).rgb;
	albedo.rgb *= gridPattern;
	#endif

	//-----------------------------------------------------------
	// 光源計算
	float3 L = -LightDirection;
	float diffuse = CalcDiffuse(L, N);
	if (use_toon) diffuse = saturate(diffuse * Toon);
	float3 specular = CalcSpecular(L, N, V) * SpecularColor;

	float4 Color = float4(AmbientColor.rgb, 1);
	if ( !use_toon ) Color.rgb += DiffuseColor.rgb;
	float3 ShadowColor = saturate(AmbientColor);
	Color.rgb = Color.rgb * albedo.rgb + specular;
	ShadowColor = ShadowColor * albedo.rgb + specular;

	// シャドウマップ
	float comp = 1;
	if (useSelfShadow)
	{
		IN.ZCalcTex /= IN.ZCalcTex.w;
		float2 TransTexCoord;
		TransTexCoord.x = (1.0f + IN.ZCalcTex.x)*0.5f;
		TransTexCoord.y = (1.0f - IN.ZCalcTex.y)*0.5f;
		if( any( saturate(TransTexCoord) != TransTexCoord ) ) {
			// シャドウバッファ外
			;
		} else {
			float a = (parthf) ? SKII2*TransTexCoord.y : SKII1;
			float d = IN.ZCalcTex.z;
			comp = 1 - saturate(max(d - tex2D(DefSampler,TransTexCoord).r , 0.0f)*a-0.3f);
		}
	}

	comp = min(diffuse, comp);

	if ( use_spheremap ) {
		// スフィアマップ適用
		// Nそのままだと同一方向の面全てが同じ色になるので適当に補正
		// スフィアマップテクスチャ座標(外縁が見えやすくなるので少し補正)
		float2 NormalWV = normalize(mul( reflect(N,V), (float3x3)matV)).xy;
		float2 SpTex = NormalWV * (float2(0.5,-0.5) * 0.99) + 0.5;

		float3 TexColor = tex2D(ObjSphareSampler,SpTex).rgb;
		if (useSelfShadow && use_toon)
		{	// 材質モーフ対応
			float3 MorphColor = TexColor * SphereMulValue.rgb + SphereAddValue.rgb;
			float MorphRate = saturate(SphereMulValue.a + SphereAddValue.a);
			TexColor.rgb = lerp(spadd?0:1, MorphColor, MorphRate);
		}

		if(spadd) {
			Color.rgb += TexColor;
			ShadowColor.rgb += TexColor;
		} else {
			Color.rgb *= TexColor;
			ShadowColor.rgb *= TexColor;
		}
	}

	if ( use_toon ) ShadowColor.rgb *= MaterialToon;
	Color.rgb = lerp(ShadowColor, Color.rgb, comp);

	#if defined(VOXEL_ENBALE_ALPHA_BLOCK) && VOXEL_ENBALE_ALPHA_BLOCK > 0
	Color.a = alpha;
	#else
	Color.a = 1;
	#endif

	return Color;
}

#define OBJECT_TEC(name, mmdpass, selfshadow) \
	technique name < string MMDPass = mmdpass; bool UseSelfShadow = selfshadow;\
	string Script = \
		"RenderColorTarget0=VoxelInfoTex; RenderDepthStencilTarget=VoxelDepthBuffer;" \
		"ClearSetColor=VoxelClearColor; ClearSetDepth=VoxelClearDepth; Clear=Color; Clear=Depth;" \
		"Pass=DrawInfo;" \
		"RenderColorTarget0=; RenderDepthStencilTarget=;" \
		"Pass=DrawFalloff; Pass=DrawObject;" \
; \
	> { \
		pass DrawInfo { \
			AlphaBlendEnable = false; AlphaTestEnable = false; \
			VertexShader = compile vs_3_0 DrawInfo_VS(); \
			PixelShader  = compile ps_3_0 DrawInfo_PS(); \
		} \
		pass DrawFalloff { /* 拡大すると穴が開くことがあるので念のために */ \
			VertexShader = compile vs_3_0 DrawObject_VS(false); \
			PixelShader  = compile ps_3_0 DrawObject_PS(selfshadow); \
		} \
		pass DrawObject { \
			CullMode = none; \
			VertexShader = compile vs_3_0 DrawObject_VS(true); \
			PixelShader  = compile ps_3_0 DrawObject_PS(selfshadow); \
		} \
	}

OBJECT_TEC(MainTec0, "object", false)
OBJECT_TEC(MainTecBS0, "object_ss", true)

////////////////////////////////////////////////////////////////////////////////////////////////


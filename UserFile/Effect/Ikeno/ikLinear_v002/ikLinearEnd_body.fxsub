//=============================================================================
//
//=============================================================================

//=============================================================================

float2 ViewportSize : VIEWPORTPIXELSIZE;
static float2 ViewportOffset = (float2(0.5,0.5)/ViewportSize.xy);

float time1 : TIME;
float time2 : TIME < bool SyncInEditMode = true; >;
static float time = TimeSync ? time2 : time1;
float elapsed_time1 : ELAPSEDTIME;
float elapsed_time2 : ELAPSEDTIME < bool SyncInEditMode = true; >;
static float Dt = clamp(TimeSync ? elapsed_time2 : elapsed_time1, 0.0f, 0.1f);

float4 ClearColor = {0,0,0,0};
float ClearDepth  = 1.0;

float Script : STANDARDSGLOBAL <
	string ScriptOutput = "color";
	string ScriptClass = "scene";
	string ScriptOrder = "postprocess";
> = 0.8;

texture2D ScnMap : RENDERCOLORTARGET <
	float2 ViewPortRatio = {1.0,1.0};
	int MipLevels = 1;
	string Format = "A16B16G16R16F";
>;
sampler2D ScnSamp = sampler_state {
	texture = <ScnMap>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU  = CLAMP; AddressV = CLAMP;
};
texture2D DepthBuffer : RENDERDEPTHSTENCILTARGET <
	float2 ViewPortRatio = {1.0,1.0};
	string Format = "D24S8";
>;

#if AUTO_EXPOSURE > 0
texture LuminanceTex: RENDERCOLORTARGET <
	int2 Dimensions = int2(LUMINANCE_TEX_SIZE, LUMINANCE_TEX_SIZE);
	int Miplevels = 0;
	string Format = "A16B16G16R16F";
>;
sampler LuminanceSamp = sampler_state {
	texture = <LuminanceTex>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
	AddressU  = CLAMP;	AddressV = CLAMP;
};
texture2D LuminanceDepthBuffer : RENDERDEPTHSTENCILTARGET <
	int2 Dimensions = int2(LUMINANCE_TEX_SIZE, LUMINANCE_TEX_SIZE);
	string Format = "D24S8";
>;

texture AverageTex: RENDERCOLORTARGET <
	int2 Dimensions = int2(1,1);
	int Miplevels = 1;
	string Format = "G16R16F";
>;
sampler AverageSamp = sampler_state {
	texture = <AverageTex>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};
texture AverageWorkTex: RENDERCOLORTARGET <
	int2 Dimensions = int2(1,1);
	int Miplevels = 1;
	string Format = "G16R16F";
>;
sampler AverageWorkSamp = sampler_state {
	texture = <AverageWorkTex>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};
#endif

float AcsTr  : CONTROLOBJECT < string name = "(self)"; string item = "Tr"; >;
float AcsSi  : CONTROLOBJECT < string name = "(self)"; string item = "Si"; >;
float3 AcsPosition : CONTROLOBJECT < string name = "(self)"; >;

bool mExistPolish : CONTROLOBJECT < string name = CONTROLLER_NAME; >;
float mExposureP : CONTROLOBJECT < string name = CONTROLLER_NAME; string item = "露出+"; >;
float mExposureM : CONTROLOBJECT < string name = CONTROLLER_NAME; string item = "露出-"; >;
float mExposureSnap : CONTROLOBJECT < string name = CONTROLLER_NAME; string item = "露出スナップ"; >;
float mBloomP : CONTROLOBJECT < string name = CONTROLLER_NAME; string item = "ブルーム+"; >;
float mBloomM : CONTROLOBJECT < string name = CONTROLLER_NAME; string item = "ブルーム-"; >;

static float AcsExposureOffset = (AcsPosition.x + (mExposureP - mExposureM) * 4.0);
static float AcsBloomIntensity = (AcsPosition.y + 1.0 + (mBloomP * 3.0 - mBloomM));



const float gamma = 2.2;
const float epsilon = 1.0e-6;
float3 Degamma(float3 col) { return pow(max(col,epsilon), gamma); }
float3 Gamma(float3 col) { return pow(max(col,epsilon), 1.0/gamma); }
float4 Degamma4(float4 col) { return float4(Degamma(col.rgb), col.a); }
float4 Gamma4(float4 col) { return float4(Gamma(col.rgb), col.a); }

float Luminance(float3 rgb)
{
//	return dot(float3(0.2126, 0.7152, 0.0722), max(rgb,0));
	return dot(float3(0.299, 0.587, 0.114), max(rgb,0));
}

float Brightness(float3 rgb)
{
	return max(max(rgb.r, rgb.g), rgb.b);
}


#if ENABLE_DITHER > 0

#define	NOISE_TEXTURE_SIZE	(256.0)
texture2D NoiseTex <
	string ResourceName = "bluenoise.png";
	int MipLevels = 1;
>;
sampler NoiseSamp = sampler_state {
	texture = <NoiseTex>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = WRAP;	AddressV  = WRAP;
};

float GetJitterOffset(int2 iuv)
{
	return tex2D(NoiseSamp, iuv / NOISE_TEXTURE_SIZE).x;
}
#endif


#define DECL_TEXTURE( _map, _samp, _size) \
	texture2D _map : RENDERCOLORTARGET < \
		int MipLevels = 1; \
		float2 ViewportRatio = {1.0/(_size), 1.0/(_size)}; \
		string Format = "A16B16G16R16F"; \
	>; \
	sampler2D _samp = sampler_state { \
		texture = <_map>; \
		MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE; \
		AddressU  = CLAMP; AddressV = CLAMP; \
	};

#if ENABLE_BLOOM > 0
DECL_TEXTURE( BrightMap, BrightSamp, 1)

DECL_TEXTURE( BlurMap1X, BlurSamp1X, 2)
DECL_TEXTURE( BlurMap2X, BlurSamp2X, 4)
DECL_TEXTURE( BlurMap3X, BlurSamp3X, 8)
DECL_TEXTURE( BlurMap4X, BlurSamp4X, 16)
DECL_TEXTURE( BlurMap5X, BlurSamp5X, 32)

DECL_TEXTURE( BlurMap1Y, BlurSamp1Y, 2)
DECL_TEXTURE( BlurMap2Y, BlurSamp2Y, 4)
DECL_TEXTURE( BlurMap3Y, BlurSamp3Y, 8)
DECL_TEXTURE( BlurMap4Y, BlurSamp4Y, 16)
DECL_TEXTURE( BlurMap5Y, BlurSamp5Y, 32)

// ぼかし処理の重み係数：
float4 BlurWeightArray[] = {
	float4(0.0920246, 0.0902024, 0.0849494, 0.0768654),
	float4(0.0668236, 0.0558158, 0.0447932, 0.0345379)
};
static float BlurWeight[8] = (float[8])BlurWeightArray;

#endif


//-----------------------------------------------------------------------------
// トーンマッピング

// https://www.shadertoy.com/view/ldcSRN
float3 FilmicReinhard(float3 x)
{
	// T = 0: no toe, classic Reinhard
	const float T = 0.01;
	float3 q = (T + 1.0) * x*x;
	return q / (q + x + T);
}

// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
float3 ACESFilm( float3 x )
{
	float a = 2.51;
	float b = 0.03;
	float c = 2.43;
	float d = 0.59;
	float e = 0.14;
	return saturate((x*(a*x+b))/(x*(c*x+d)+e));
}

// http://filmicworlds.com/blog/filmic-tonemapping-operators/
float3 Uncharted2Tonemap(float3 x)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;

	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

float3 Tonecurve(float3 col)
{
	#if TONEMAP_MODE == 0
		// 何もしない
	#elif TONEMAP_MODE == 1
		col.rgb = FilmicReinhard(col.rgb);

	#elif TONEMAP_MODE == 2
		col.rgb = ACESFilm(col.rgb);

	#elif TONEMAP_MODE == 3
		col.rgb = Uncharted2Tonemap(col.rgb);
	#endif

	return col.rgb;
}

#if TONEMAP_MODE == 3
// Uncharted2
float ExposureBias = 2.0;
#else
float ExposureBias = 1.0;
#endif

float3 Tonemap(float3 col, float inverseWhitepoint)
{
	float ExposureBias = 2.0f;

	#if TONEMAP_MODE == 0
		// 何もしない
	#elif LUMABASE_TONEMAP == 0
		col.rgb = Tonecurve(col.rgb * ExposureBias) * inverseWhitepoint;
	#else
		// 輝度ベース
		float l0 = Luminance(col.rgb);
//		float l0 = Brightness(col.rgb);
		float l1 = Tonecurve(l0 * ExposureBias).x * inverseWhitepoint;
		col.rgb *= (l1 / max(l0, 1e-4));
	#endif

	return saturate(col.rgb);
}



//-----------------------------------------------------------------------------
// 正規化されたログ輝度
float LuminanceToNormalizedLog(float x)
{
	return saturate((log2(max(x, 1.0/1024.0)) - LOWER_LOG) / (-LOWER_LOG + UPPER_LOG));
}
float NormalizedLogToLuminance(float x)
{
	return exp2(x * (-LOWER_LOG + UPPER_LOG) + LOWER_LOG);
}


//-----------------------------------------------------------------------------
//

// トーンマップの値を即座に反映させる?
bool DoSnap(float4 oldValue)
{
	// モーフなどからの強制リセット
	float isForceSnap = (AcsTr < 0.1);
	isForceSnap += (mExposureSnap > 0.5);

	// 0になるかどうかはグラボ・ドライバ次第?
	float isInvalidTextureValue = (dot(oldValue, 1) == 0.0);

	// 0フレーム目
	float isZeroFrame = (time < 0.5 / 60.0);

	return isForceSnap + isInvalidTextureValue + isZeroFrame;
}

// 露出補正の値。EV値
float GetExposureBias()
{
	return exp2(AcsExposureOffset);
}

// 外部から設定された強制値がある?
float GetExternalExposureValue(float value)
{
/*
	return 1.0 / GetExposureBias();
*/
	return value;
}

#if AUTO_EXPOSURE > 0
float4 EyeAdaptation(float targetValue)
{
	float4 oldValue = tex2D(AverageSamp, float2(0.5,0.5));

	float d = targetValue - oldValue.x;
	float s = (d >= 0.0) ? SPEED_UP : SPEED_DOWN;
	s = 1 - exp2(-Dt * s);
	float newValue = d * s + oldValue.x;

	float4 result = float4(newValue, targetValue, 0, 1);
	result.xy = (DoSnap(oldValue)) ? targetValue.xx : result.xy;
	// result.x = GetExternalExposureValue(result.x);

	return result;
}
#endif


//=============================================================================

struct VS_OUTPUT {
	float4 Pos : POSITION;
	float4 Tex : TEXCOORD0;
	float4 ToneParam : TEXCOORD1;
};


VS_OUTPUT VS_Common(float4 Pos: POSITION, float2 Tex: TEXCOORD)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;
	Out.Pos = Pos;
	Out.Tex.xy = Tex + 0.5 / LUMINANCE_TEX_SIZE;
	return Out;
}

#if AUTO_EXPOSURE > 0
float4 PS_DrawHistogram( float2 Tex : TEXCOORD0 ) : COLOR0
{
	float2 uv = floor(Tex * LUMINANCE_TEX_SIZE);
	float2 fuv = fmod(uv, LUMINANCE_TEX_SIZE / 4);
	float2 iuv = floor(uv / (LUMINANCE_TEX_SIZE / 4));
	//float2 suv = (fuv * 4 + iuv + 0.5) / LUMINANCE_TEX_SIZE;
	float2 suv = (fuv * 4 + 0.5) / LUMINANCE_TEX_SIZE;

	float x = LuminanceToNormalizedLog(Luminance(tex2D(ScnSamp, suv).rgb));
	x = floor(x * 64.0 - ((iuv.x + iuv.y * 4) * 4.0));

	float ch0 = (x == 0.0);
	float ch1 = (x == 1.0);
	float ch2 = (x == 2.0);
	float ch3 = (x == 3.0);

	// 画面周辺の影響度を下げる
	float2 d = suv - 0.5;
	float w = saturate(1.0 - dot(d,d));
	// w *= w;

	return float4(ch0, ch1, ch2, ch3) * w;
}


float4 PS_CalcAverage( float2 Tex : TEXCOORD0 ) : COLOR0
{
	#define GET_BIN(x,y)	\
		tex2Dlod(LuminanceSamp, float4((float2(x, y) + 0.5) / 4.0, 0, MAX_MIP_LEVEL - 2))

	float4 ch00 = GET_BIN(0,0);
	float4 ch01 = GET_BIN(1,0);
	float4 ch02 = GET_BIN(2,0);
	float4 ch03 = GET_BIN(3,0);

	float4 ch10 = GET_BIN(0,1);
	float4 ch11 = GET_BIN(1,1);
	float4 ch12 = GET_BIN(2,1);
	float4 ch13 = GET_BIN(3,1);

	float4 ch20 = GET_BIN(0,2);
	float4 ch21 = GET_BIN(1,2);
	float4 ch22 = GET_BIN(2,2);
	float4 ch23 = GET_BIN(3,2);

	float4 ch30 = GET_BIN(0,3);
	float4 ch31 = GET_BIN(1,3);
	float4 ch32 = GET_BIN(2,3);
	float4 ch33 = GET_BIN(3,3);

	// binの合計値
	float4 sum =
			  ch00 + ch01 + ch02 + ch03
			+ ch10 + ch11 + ch12 + ch13
			+ ch20 + ch21 + ch22 + ch23
			+ ch30 + ch31 + ch32 + ch33;
	float total = dot(sum, 1);

	float2 level = 0;
	float2 target = float2(LOW_PERCENT, HIGH_PERCENT) * 0.01 * total;
	float acc = 0;
	float ra, rb, r;
	float2 lum = 0;

/*
	#define CALC(reg, lv)	\
		ra = saturate(target.x - acc);	acc += reg; \
		rb = saturate(acc - target.y);	\
		r = saturate(reg - ra - rb);	\
		lum += float2(NormalizedLogToLuminance(lv / 64.0), 1.0) * r;
*/
	acc = -target.y;
	target.x = target.x - target.y;
	#define CALC(reg, lv)	\
		ra = saturate(target.x - acc);	acc += reg; \
		r = saturate(reg - ra - saturate(acc));	\
		lum += float2(NormalizedLogToLuminance((lv + 0.5) / 64.0), 1.0) * r;

	CALC(ch00.x, 0);	CALC(ch00.y, 1);	CALC(ch00.z, 2);	CALC(ch00.w, 3);
	CALC(ch01.x, 4);	CALC(ch01.y, 5);	CALC(ch01.z, 6);	CALC(ch01.w, 7);
	CALC(ch02.x, 8);	CALC(ch02.y, 9);	CALC(ch02.z, 10);	CALC(ch02.w, 11);
	CALC(ch03.x, 12);	CALC(ch03.y, 13);	CALC(ch03.z, 14);	CALC(ch03.w, 15);

	CALC(ch10.x, 16);	CALC(ch10.y, 17);	CALC(ch10.z, 18);	CALC(ch10.w, 19);
	CALC(ch11.x, 20);	CALC(ch11.y, 21);	CALC(ch11.z, 22);	CALC(ch11.w, 23);
	CALC(ch12.x, 24);	CALC(ch12.y, 25);	CALC(ch12.z, 26);	CALC(ch12.w, 27);
	CALC(ch13.x, 28);	CALC(ch13.y, 29);	CALC(ch13.z, 30);	CALC(ch13.w, 31);

	CALC(ch20.x, 32);	CALC(ch20.y, 33);	CALC(ch20.z, 34);	CALC(ch20.w, 35);
	CALC(ch21.x, 36);	CALC(ch21.y, 37);	CALC(ch21.z, 38);	CALC(ch21.w, 39);
	CALC(ch22.x, 40);	CALC(ch22.y, 41);	CALC(ch22.z, 42);	CALC(ch22.w, 43);
	CALC(ch23.x, 44);	CALC(ch23.y, 45);	CALC(ch23.z, 46);	CALC(ch23.w, 47);

	CALC(ch30.x, 48);	CALC(ch30.y, 49);	CALC(ch30.z, 50);	CALC(ch30.w, 51);
	CALC(ch31.x, 52);	CALC(ch31.y, 53);	CALC(ch31.z, 54);	CALC(ch31.w, 55);
	CALC(ch32.x, 56);	CALC(ch32.y, 57);	CALC(ch32.z, 58);	CALC(ch32.w, 59);
	CALC(ch33.x, 60);	CALC(ch33.y, 61);	CALC(ch33.z, 62);	CALC(ch33.w, 63);

	lum.y *= GetExposureBias(); // => avgLum / GetExposureBias()
	float avgLum = lum.x / max(lum.y, 1e-4);

	float4 result = EyeAdaptation(avgLum);
	result.xyz = clamp(result.xyz, LOWER_LIMIT, UPPER_LIMIT);

	return result;
}

float4 PS_Copy( float2 Tex : TEXCOORD0) : COLOR0
{
	return tex2D(AverageWorkSamp, float2(0.5,0.5));
}
#endif

//-----------------------------------------------------------------------------
//
VS_OUTPUT VS_DrawBuffer(float4 Pos: POSITION, float2 Tex: TEXCOORD)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;
	Out.Pos = Pos;
	Out.Tex.xy = Tex + ViewportOffset;

	#if AUTO_EXPOSURE > 0
	float4 param = tex2Dlod(AverageSamp, float4(0.5,0.5, 0,0));
	Out.ToneParam = param;
	Out.ToneParam.z = KeyValue / max(param.x, 1e-4);
	#else
	Out.ToneParam.z = GetExposureBias();
	#endif

	Out.ToneParam.w = 1.0 / Tonecurve(WHITE_POINT).x;

	return Out;
}

#if ENBALE_DEBUG_VIEW > 0
float3 DisplayDebugInfo(float2 uv, float4 ToneParam, float hscale)
{
	#if AUTO_EXPOSURE > 0
	float idx = floor(uv.x * 16);
	float2 histuv = (float2(fmod(idx, 4), floor(idx / 4)) + 0.5) / 4.0;
	float4 hist = tex2Dlod(LuminanceSamp, float4(histuv, 0, MAX_MIP_LEVEL - 2));

	float ch = floor(fmod(floor(uv.x * 64), 4));
	float n = hist.w;
	if (ch < 0.9)
		n = hist.x;
	else if (ch < 1.9)
		n = hist.y;
	else if (ch < 2.9)
		n = hist.z;

	float3 vis = (uv.y > 1.0 - n * 15.0) * 0.5;

	// 上限と下限
	float ll = LuminanceToNormalizedLog(LOWER_LIMIT);
	float ul = LuminanceToNormalizedLog(UPPER_LIMIT);
	if (ll < uv.x && uv.x < ul)  vis = vis * float3(0,0.5,0) + float3(0,0.1,0);

	float mean = LuminanceToNormalizedLog(ToneParam.x);
	float rawmean = LuminanceToNormalizedLog(ToneParam.y);
	if (abs(uv.x - rawmean) * ViewportSize.x < 4) vis = vis * float3(0.5,0.5,1) + float3(0,0,0.1);
	if (abs(uv.x - mean) * ViewportSize.x < 4) vis = vis + 0.5;

	#else
	float3 vis = 0;
	#endif

	// カーブ
	float lum = NormalizedLogToLuminance(uv.x) * ToneParam.z;
	float scurve = 1.0 - Tonemap(lum, ToneParam.w).x;
	float bold = saturate(1.0 - abs(uv.y - scurve) * ViewportSize.y / hscale);
	vis = lerp(vis, 1, bold);

	return saturate(vis);
}
#endif


float4 PS_DrawBuffer( float2 Tex : TEXCOORD0, float4 ToneParam : TEXCOORD1) : COLOR0
{
	float4 col = tex2D(ScnSamp, Tex.xy);

	col.rgb *= ToneParam.z;

	#if ENABLE_BLOOM > 0
	col.rgb += tex2D(BlurSamp1X, Tex.xy).rgb;
	#endif

	col.rgb = Tonemap(col.rgb, ToneParam.w);

	#if ENBALE_DEBUG_VIEW > 0
	// ヒストグラム
	if (Tex.y > 0.9 && Tex.x < 0.5)
	{
		float2 uv = Tex.xy;
		float hscale = 10;
		uv = uv * float2(2.0, hscale) - float2(0, 1.0 * hscale - 1);
		float3 vis = DisplayDebugInfo(uv, ToneParam, hscale);
		col.rgb = lerp(col.rgb, vis, 0.9);
	}
	#endif

	col = Gamma4(col);

	#if ENABLE_DITHER > 0
	int2 iuv = floor(Tex.xy * ViewportSize);
	col.rgb += (GetJitterOffset(iuv) / 255.0);
	#endif

	return col;
}


#if ENABLE_BLOOM > 0
//-----------------------------------------------------------------------------
// Bloom

float4 PS_DrawBright( float2 Tex: TEXCOORD0, float4 ToneParam : TEXCOORD1) : COLOR
{
	float4 col = tex2D(ScnSamp, Tex.xy);
	col.rgb *= ToneParam.z;

	float k1 = 3.0; // toe slope
	float k2 = 0.5; // amount scale

	col.rgb = (col.rgb - BloomThreshold);
#if 1
	float3 toe = saturate(col.rgb * k1 + 1.0);
	col.rgb = lerp(toe * toe, col.rgb + 1.0, toe);
#endif

	// 色のブーストを行う?

	return float4(saturate(col.rgb * k2), 1);
}


VS_OUTPUT VS_Blur(float4 Pos: POSITION, float2 Tex: TEXCOORD, uniform float level)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;
	Out.Pos = Pos;
	Out.Tex.xy = Tex + 0.5 * level / ViewportSize;
	Out.Tex.zw = level / ViewportSize;

	Out.ToneParam.x = (1.0 / 5.0) * max(BloomIntensity * AcsBloomIntensity, 0);

	return Out;
}

float4 PS_Blur( float4 Tex: TEXCOORD0,
	uniform bool isXblur, 
	uniform sampler2D smp) : COLOR
{
	float2 uv = Tex.xy;
	float2 offset = isXblur ? float2(Tex.z, 0) : float2(0, Tex.w);

	float4 sum = tex2D( smp, uv) * BlurWeight[0];
	sum.a = 1;
	[unroll] for(int i = 1; i < 8; i ++) {
		float t = i;
		float w = BlurWeight[i];
		sum.rgb += tex2D(smp, uv + offset * t).rgb * w;
		sum.rgb += tex2D(smp, uv - offset * t).rgb * w;
	}

	return sum;
}

float4 PS_BlurMix( float4 Tex: TEXCOORD0, float4 ToneParam : TEXCOORD1) : COLOR
{
	float2 uv = Tex.xy;

	float3 sum1 = tex2D(BlurSamp1Y, uv) * BLOOM_TINT1;
	float3 sum2 = tex2D(BlurSamp2Y, uv) * BLOOM_TINT2;
	float3 sum3 = tex2D(BlurSamp3Y, uv) * BLOOM_TINT3;
	float3 sum4 = tex2D(BlurSamp4Y, uv) * BLOOM_TINT4;
	float3 sum5 = tex2D(BlurSamp5Y, uv) * BLOOM_TINT5;

	float3 sum = sum1 + sum2 + sum3 + sum4 + sum5;
	sum *= ToneParam.x;

	return float4(sum, 1);
}

#endif


//=============================================================================

technique LinearEnd <
	string Script = 
		"ClearSetColor=ClearColor;"
		"ClearSetDepth=ClearDepth;"

		"RenderColorTarget0=ScnMap;"
		"RenderDepthStencilTarget=DepthBuffer;"
		"Clear=Color; Clear=Depth;"
		"ScriptExternal=Color;"

		#if AUTO_EXPOSURE > 0
		"RenderDepthStencilTarget=LuminanceDepthBuffer;"
		"RenderColorTarget0=LuminanceTex;	Pass=DrawHistogram;"
		"RenderColorTarget0=AverageWorkTex;	Pass=CalcAverage;"
		"RenderColorTarget0=AverageTex;		Pass=CopyPass;"
		#endif

		#if ENABLE_BLOOM > 0
		"RenderDepthStencilTarget=DepthBuffer;"
		"RenderColorTarget0=BrightMap;		Pass=DrawBrightPass;"
		"RenderColorTarget0=BlurMap1X;		Pass=BlurX0Pass;"
		"RenderColorTarget0=BlurMap1Y;		Pass=BlurY0Pass;"
		"RenderColorTarget0=BlurMap2X;		Pass=BlurX1Pass;"
		"RenderColorTarget0=BlurMap2Y;		Pass=BlurY1Pass;"
		"RenderColorTarget0=BlurMap3X;		Pass=BlurX2Pass;"
		"RenderColorTarget0=BlurMap3Y;		Pass=BlurY2Pass;"
		"RenderColorTarget0=BlurMap4X;		Pass=BlurX3Pass;"
		"RenderColorTarget0=BlurMap4Y;		Pass=BlurY3Pass;"
		"RenderColorTarget0=BlurMap5X;		Pass=BlurX4Pass;"
		"RenderColorTarget0=BlurMap5Y;		Pass=BlurY4Pass;"
		"RenderColorTarget0=BlurMap1X;		Pass=BlurMixPass;"
		#endif

		"RenderColorTarget0=;"
		"RenderDepthStencilTarget=;"
		"Pass=DrawBuffer;";
>{
	#if AUTO_EXPOSURE > 0
	pass DrawHistogram < string Script= "Draw=Buffer;"; > {
		AlphaBlendEnable = FALSE;	AlphaTestEnable = FALSE;
		VertexShader = compile vs_3_0 VS_Common();
		PixelShader  = compile ps_3_0 PS_DrawHistogram();
	}
	pass CalcAverage < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Common();
		PixelShader  = compile ps_3_0 PS_CalcAverage();
	}
	pass CopyPass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Common();
		PixelShader  = compile ps_3_0 PS_Copy();
	}
	#endif

	#if ENABLE_BLOOM > 0
	pass DrawBrightPass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_DrawBuffer();
		PixelShader  = compile ps_3_0 PS_DrawBright();
	}

	pass BlurX0Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(2);
		PixelShader  = compile ps_3_0 PS_Blur(true, BrightSamp);
	}
	pass BlurY0Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(2);
		PixelShader  = compile ps_3_0 PS_Blur(false, BlurSamp1X);
	}
	pass BlurX1Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(4);
		PixelShader  = compile ps_3_0 PS_Blur(true, BlurSamp1Y);
	}
	pass BlurY1Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(4);
		PixelShader  = compile ps_3_0 PS_Blur(false, BlurSamp2X);
	}
	pass BlurX2Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(8);
		PixelShader  = compile ps_3_0 PS_Blur(true, BlurSamp2Y);
	}
	pass BlurY2Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(8);
		PixelShader  = compile ps_3_0 PS_Blur(false, BlurSamp3X);
	}
	pass BlurX3Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(16);
		PixelShader  = compile ps_3_0 PS_Blur(true, BlurSamp3Y);
	}
	pass BlurY3Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(16);
		PixelShader  = compile ps_3_0 PS_Blur(false, BlurSamp4X);
	}
	pass BlurX4Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(32);
		PixelShader  = compile ps_3_0 PS_Blur(true, BlurSamp4Y);
	}
	pass BlurY4Pass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(32);
		PixelShader  = compile ps_3_0 PS_Blur(false, BlurSamp5X);
	}

	pass BlurMixPass < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_Blur(2);
		PixelShader  = compile ps_3_0 PS_BlurMix();
	}
	#endif

	pass DrawBuffer < string Script= "Draw=Buffer;"; > {
		VertexShader = compile vs_3_0 VS_DrawBuffer();
		PixelShader  = compile ps_3_0 PS_DrawBuffer();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
// 材質指定ファイルの共通部分


#if !defined(AlphaThreshold)
#define AlphaThreshold		0.1
#endif

// 座法変換行列
float4x4 matW			: WORLD;
float4x4 matWV		: WORLDVIEW;
float4x4 matWVP		: WORLDVIEWPROJECTION;

// マテリアル色
float4	MaterialDiffuse		: DIFFUSE  < string Object = "Geometry"; >;
float3	MaterialAmbient		: AMBIENT  < string Object = "Geometry"; >;
float3	MaterialEmissive	: EMISSIVE < string Object = "Geometry"; >;
float3	MaterialSpecular	: SPECULAR < string Object = "Geometry"; >;
float	SpecularPower		: SPECULARPOWER < string Object = "Geometry"; >;

float3	CameraPosition	: POSITION  < string Object = "Camera"; >;

static float4 DiffuseColor  = MaterialDiffuse;

static float CustomMetalness = saturate(Metalness);

bool	opadd;


#if defined(ENABLE_AUTO_SMOOTHNESS)
// 謎の係数スペキュラーパワーを適当にスムースネスに置き換える。(0:マット。1:ツルツル)
float CalcSmoothness(float power)
{
	// 1に近過ぎると、ピーキーになりすぎてハイライトがでないので、0.2〜0.98の間に抑える
	return saturate((log(power) / log(2) - 1) / 8.0) * 0.96 + 0.02;
}
static float CustomSmoothness = CalcSmoothness(SpecularPower);
#else
static float CustomSmoothness = saturate(Smoothness) * 0.96 + 0.02;
#endif
static float CustomIntensity = saturate(Intensity);

bool	use_texture;		//	テクスチャフラグ

// MMD本来のsamplerを上書きしないための記述です。削除不可。
sampler MMDSamp0 : register(s0);
sampler MMDSamp1 : register(s1);
sampler MMDSamp2 : register(s2);

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
	texture = <ObjectTexture>;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
};

/*
// スフィアマップのテクスチャ
texture ObjectSphereMap: MATERIALSPHEREMAP;
sampler ObjSphareSampler = sampler_state {
	texture = <ObjectSphereMap>;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
	ADDRESSU  = WRAP;
	ADDRESSV  = WRAP;
};
*/

#if defined(USE_MATERIALMAP) && USE_MATERIALMAP > 0
#if defined(METALNESSMAP_FILENAME)
texture2D MetalnessMap <
    string ResourceName = METALNESSMAP_FILENAME;
>;
sampler MetalnessMapSamp = sampler_state {
	texture = <MetalnessMap>;
	MinFilter = Linear;
	MagFilter = Linear;
	AddressU  = WRAP;
	AddressV = WRAP;
};
#endif
#if defined(SMOOTHNESSMAP_FILENAME)
texture2D SmoothnessMap <
    string ResourceName = SMOOTHNESSMAP_FILENAME;
>;
sampler SmoothnessMapSamp = sampler_state {
	texture = <SmoothnessMap>;
	MinFilter = Linear;
	MagFilter = Linear;
	AddressU  = WRAP;
	AddressV = WRAP;
};
#endif
#if defined(INTENSITYMAP_FILENAME)
texture2D IntensityMap <
    string ResourceName = INTENSITYMAP_FILENAME;
>;
sampler IntensityMapSamp = sampler_state {
	texture = <IntensityMap>;
	MinFilter = Linear;
	MagFilter = Linear;
	AddressU  = WRAP;
	AddressV = WRAP;
};
#endif
#if defined(SSSMAP_FILENAME)
texture2D SSSMap <
    string ResourceName = SSSMAP_FILENAME;
>;
sampler SSSMapSamp = sampler_state {
	texture = <SSSMap>;
	MinFilter = Linear;
	MagFilter = Linear;
	AddressU  = WRAP;
	AddressV = WRAP;
};
#endif
#endif


#ifdef USE_NORMALMAP
//メイン法線マップ
#define ANISO_NUM 16

texture2D NormalMap <
    string ResourceName = NORMALMAP_MAIN_FILENAME;
>;
sampler NormalMapSamp = sampler_state {
    texture = <NormalMap>;
	MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	MAXANISOTROPY = ANISO_NUM;
	AddressU  = WRAP;
	AddressV = WRAP;
};

//サブ法線マップ
texture2D NormalMapSub <
    string ResourceName = NORMALMAP_SUB_FILENAME;
>;
sampler NormalMapSampSub = sampler_state {
    texture = <NormalMapSub>;
	MINFILTER = ANISOTROPIC;
	MAGFILTER = ANISOTROPIC;
	MIPFILTER = ANISOTROPIC;
	
	MAXANISOTROPY = ANISO_NUM;
	AddressU  = WRAP;
	AddressV = WRAP;
};
#endif


shared texture VxNormalDepthMap: RENDERCOLORTARGET;


///////////////////////////////////////////////////////////////////////////////////////////////
// 
float3x3 compute_tangent_frame(float3 Normal, float3 View, float2 UV)
{
  float3 dp1 = ddx(View);
  float3 dp2 = ddy(View);
  float2 duv1 = ddx(UV);
  float2 duv2 = ddy(UV);

  float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
  float2x3 inverseM = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
  float3 Tangent = mul(float2(duv1.x, duv2.x), inverseM);
  float3 Binormal = mul(float2(duv1.y, duv2.y), inverseM);

  return float3x3(normalize(Tangent), normalize(Binormal), Normal);
}

float4 CalcNormal(float2 Tex,float3 Eye,float3 Normal)
{
#if !defined(USE_NORMALMAP)
	return float4(Normal,1);
#else
	float4 Norm = 1;

	float2 tex = Tex* NormalMapMainLoopNum;//メイン
	float4 NormalColor = tex2D( NormalMapSamp, tex) * 2 - 1;
	NormalColor.rg *= NormalMapMainHeightScale;
	NormalColor.rgb = normalize(NormalColor.rgb);

	float2 texSub = Tex * NormalMapSubLoopNum;//サブ
	float4 NormalColorSub = tex2D( NormalMapSampSub, texSub)*2-1;	//-1〜1の値にする
	NormalColorSub.rg *= NormalMapSubHeightScale;
	NormalColorSub.rgb = normalize(NormalColorSub.rgb);//正規化
	NormalColor.rg += NormalColorSub.rg;
	NormalColor.rgb = normalize(NormalColor.rgb);
	NormalColor.a = 1;

	float3x3 tangentFrame = compute_tangent_frame(Normal, Eye, Tex);
	Norm.rgb = normalize(mul(NormalColor.rgb, tangentFrame));

	return Norm;
#endif
}

///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画

struct VS_OUTPUT
{
	float4 Pos	: POSITION;
	float3 Normal	: TEXCOORD0;
	float2 Tex	: TEXCOORD1;
	float3 WPos	: TEXCOORD2;
	float Distance	: TEXCOORD3;
	float2 SpTex	: TEXCOORD4;
};

struct PS_OUT_MRT
{
	float4 Material		: COLOR0;
	float4 Normal		: COLOR1;
};

VS_OUTPUT Basic_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex: TEXCOORD0, uniform bool useTexture)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;

	Out.Pos = mul( Pos, matWVP );
	Out.Pos.w *= (opadd ? 0 : 1);

	Out.Normal = normalize(mul(Normal,(float3x3)matW));
	Out.Tex = Tex;

	Out.WPos = mul( Pos, matW ).xyz;
	Out.Distance = mul(Pos, matWV).z;

	return Out;
}


PS_OUT_MRT Basic_PS( VS_OUTPUT IN, uniform bool useTexture) : COLOR
{
	float4 Color = DiffuseColor;
	if ( useTexture ) {
		float4 TexColor = tex2D( ObjTexSampler, IN.Tex );
		Color *= TexColor;
	}

	clip(Color.a - AlphaThreshold);

	const float3 V = normalize(CameraPosition - IN.WPos);
	const float3 N = CalcNormal(IN.Tex, V, normalize(IN.Normal)).xyz;

	float4 params = 1;
	params = float4(CustomMetalness, CustomSmoothness, CustomIntensity, SSSValue);
	#if defined(USE_MATERIALMAP) && USE_MATERIALMAP > 0
		#if defined(METALNESSMAP_FILENAME)
			params.x = tex2D( MetalnessMapSamp, IN.Tex * MetalnessMapLoopNum).r;
		#endif
		#if defined(SMOOTHNESSMAP_FILENAME)
			params.y = tex2D( SmoothnessMapSamp, IN.Tex * SmoothnessMapLoopNum).r;
		#endif
		#if defined(INTENSITYMAP_FILENAME)
			params.z = tex2D( IntensityMapSamp, IN.Tex * IntensityMapLoopNum).r;
		#endif
		#if defined(SSSMAP_FILENAME)
			params.w = tex2D( SSSMapSamp, IN.Tex * SSSMapLoopNum).r;
		#endif
	#endif

	PS_OUT_MRT Out;
	Out.Material = params;
	Out.Normal = float4(N, IN.Distance);

	return Out;
}

#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass; \
	string Script = \
		"RenderColorTarget0=;" \
		"RenderColorTarget1=VxNormalDepthMap;" \
		"RenderDepthStencilTarget=;" \
		"Pass=DrawObject;" \
		"RenderColorTarget1=;" \
	; \
	> { \
		pass DrawObject { \
			AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE; \
			VertexShader = compile vs_3_0 Basic_VS(use_texture); \
			PixelShader  = compile ps_3_0 Basic_PS(use_texture); \
		} \
	}


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}


///////////////////////////////////////////////////////////////////////////////////////////////

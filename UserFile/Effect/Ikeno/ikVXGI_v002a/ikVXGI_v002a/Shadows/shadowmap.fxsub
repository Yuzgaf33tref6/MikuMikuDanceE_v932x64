// シャドウマップ用の処理


#define LIGHTSPACE_FX_OBJECT  "Shadows/LightDepth.fx"
#include "Shadows/shadow_common.fxsub"


#if defined(ENABLE_HARD_SHADOW) && ENABLE_HARD_SHADOW > 0
#define NUM_SHADOW_BLUR		4
#define SHADOW_WEIGHT		2
#else
#define NUM_SHADOW_BLUR		8
#define SHADOW_WEIGHT		1
#endif

#define BORDER_RANGE	2		// 1/4画面の境界

// ライト座標系での奥行きを出力
shared texture LightMapRT : OFFSCREENRENDERTARGET <
	string Description = "Lightspace Depth for ikVXGI";
	int Width = SHADOW_TEX_SIZE;
	int Height = SHADOW_TEX_SIZE;
	string Format = "R32F";
	float4 ClearColor = { 1, 1, 0, 0 };
	float ClearDepth = 1.0;
	int MipLevels = 1;
	string DefaultEffect = 
		"self = hide;"
		"PPointLight?.x = hide;"
		"*.pmd = " LIGHTSPACE_FX_OBJECT ";"
		"*.pmx = " LIGHTSPACE_FX_OBJECT ";"
		"*.x =   " LIGHTSPACE_FX_OBJECT ";"
		"* = hide;" ;
>;
sampler LightSamp = sampler_state {
	texture = <LightMapRT>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
//	MinFilter = NONE;	MagFilter = NONE;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};


texture2D ShadowMap: RENDERCOLORTARGET <
	string Format = "A16B16G16R16F";
	int MipLevels = 1;
>;
sampler ShadowSamp = sampler_state {
	texture = <ShadowMap>;
	MinFilter = NONE;	MagFilter = NONE;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};

static float4x4 matLightVPs = mul(matLightVs, matLightPs);



// 各ピクセルの重みを計算
inline float CalcShadowBlurWeight(float d0, float d1, float depthRate)
{
	// 距離の差が近いほどボカす。カメラから遠いほどボカす。
	float dd = (d0 - d1) * depthRate;
	return exp(-dd*dd);
}


// テクスチャ座標がどれだけエッジに近いか?
// テクスチャ座標の範囲は[-1,1]
inline float CalcEdgeFalloff(float2 texCoord)
{
	const float m = (SHADOW_TEX_SIZE * 0.5 / WARP_RANGE);
	const float a = (BORDER_RANGE * 1.0 / WARP_RANGE);
	float2 falloff = abs(texCoord) * (-m * 4.0) + (m - a);
	return saturate(min(falloff.x, falloff.y));
}

inline float4 CalcCascadePPos(float2 uv, float2 offset, float index)
{
	// u, v, カスケードのインデックス, 重み を格納。
	return float4(uv + ((0.5 + offset) * 0.5 + (0.5 / SHADOW_TEX_SIZE)), index, CalcEdgeFalloff(uv));
}


#define TEX2D(samp, uv)		tex2Dlod(samp, float4(uv, 0,0))
//#define TEX2D(samp, uv)		tex2D(samp, uv)

//#define CalcLight(casterDepth, receiverDepth, rate)	(casterDepth >= receiverDepth)
//#define CalcLight(casterDepth, receiverDepth, rate)	saturate((casterDepth - receiverDepth) * (LightZMax * 10.0) + 1.0)

#define CalcLight(casterDepth, receiverDepth, rate)	(1.0 - saturate(max(receiverDepth - casterDepth, 0) * rate))


float4 PS_Shadowmap( VS_OUTPUT IN) : COLOR
{
	float2 texCoord = IN.Tex.xy;
	float4 nd = tex2D(NormalDepthSampPoint, texCoord);
	float3 wpos = ReconstructWPos(texCoord, nd.w).xyz;
	float4 Pos = float4(wpos,1);
	int2 iuv = texCoord * ViewportSize;
	float jitter = GetJitterOffset(iuv);

	float4 PPos = mul(Pos, matLightVPs);
	PPos /= PPos.w;

	float4 LightPPos01;
	float4 LightPPos23;

	const float2 scale = float2(0.25, -0.25);
	LightPPos01.xy = (PPos.xy * lightParam[0].xy + lightParam[0].zw);
	LightPPos01.zw = (PPos.xy * lightParam[1].xy + lightParam[1].zw);
	LightPPos23.xy = (PPos.xy * lightParam[2].xy + lightParam[2].zw);
	LightPPos23.zw = (PPos.xy * lightParam[3].xy + lightParam[3].zw);
	LightPPos01 *= scale.xyxy;
	LightPPos23 *= scale.xyxy;

	float distanceFromCamera = mul(Pos, matV).z;	// カメラからの距離
	float receiverDepth = PPos.z;					// ライトからの距離

	float3 N = normalize(nd.xyz);
	float dotNL = dot(N, -LightDirection);

	float4 lightPPos0 = CalcCascadePPos(LightPPos01.xy, float2( 0, 0), 1.0 / SHADOW_TEX_SIZE);
	float4 lightPPos1 = CalcCascadePPos(LightPPos01.zw, float2( 1, 0), 0.75/ SHADOW_TEX_SIZE);
	float4 lightPPos2 = CalcCascadePPos(LightPPos23.xy, float2( 0, 1), 0.5 / SHADOW_TEX_SIZE);
	float4 lightPPos3 = CalcCascadePPos(LightPPos23.zw, float2( 1, 1), 0.25/ SHADOW_TEX_SIZE);
		// 最後はPCFのステップサイズ。本来は1/1,1/2,1/4,1/8になる?

	float4 texCoord0 = lightPPos3;
	float4 texCoord1 = 0;
	if (lightPPos2.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos2; }
	if (lightPPos1.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos1; }
	if (lightPPos0.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos0; }

	texCoord0 = (texCoord0.w > jitter * 0.9) ? texCoord0 : texCoord1;
	float casterDepth0 = TEX2D(LightSamp, texCoord0.xy).x;
	float casterDepth = lerp(1, casterDepth0, texCoord0.w);

	// 深度バイアス：適当
	float bias = distanceFromCamera * (1.0 / LightZMax);
	float depthSlope = min(abs( ddx( receiverDepth ) ) + abs( ddy( receiverDepth ) ), 0.1);
	float lightSlpoe = min(1.0 / (abs(dotNL) + 1.0e-4), 8.0) * (1.0 / LightZMax);
	bias = (bias + depthSlope + lightSlpoe) * BIAS_SCALE;
	receiverDepth -= bias;

	float sdrate = 30000.0 / 4.0 - 0.05;
	float light = CalcLight(casterDepth.x, receiverDepth, sdrate);
	float dist = receiverDepth - casterDepth.x;
	// float blurStep = clamp(dist * (LightZMax / 50.0), 0.125, 1.0);
	float thick = max(dist * LightZMax, 0);

	// PCF
	float light_sub = 0;
	const float s = texCoord0.z; // 1.0 / SHADOW_TEX_SIZE;
	texCoord0.xy += (jitter * 2.0 - 1.0) * 0.5 * s;

	#if SHADOW_QUALITY >= 2
	const float PCFScale = 1.0 / (1+4+4*0.75);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( s, s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2(-s, s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( s,-s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2(-s,-s)).x, receiverDepth, sdrate);
	light_sub *= 0.75;
	#else
	const float PCFScale = 1.0 / (1+4);
	#endif
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( s, 0)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2(-s, 0)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( 0, s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( 0,-s)).x, receiverDepth, sdrate);

	// エリア外だと、PCFの結果が当てにならない
	float lightPCF = (light + light_sub) * PCFScale;
	light = lerp(light, lightPCF, texCoord0.w);
	light = light * light;

	// light = min(light, dotNL);
	// light = min(light, dotNL * 0.5 + 0.5);
	light = min(light, (dotNL > 0.0));

	float ao = GetSSAO(texCoord);
	return float4(light, thick, ao, distanceFromCamera);
}


// シャドウマップをボカしてノイズを減少させる
float4 PS_BlurShadow( float4 Tex : TEXCOORD0, uniform sampler2D smp, uniform bool isXBlur) : COLOR
{
	float2 texCoord = Tex.xy;
	float2 offset = (isXBlur) ? float2(SampleStep.x, 0) : float2(0, SampleStep.y);

	float4 center = tex2D(smp, texCoord);
	float centerDepth = center.w;
	float depthRate = 100.0 / centerDepth;

	float4 sum = float4(center.xyz, 1) * BlurWeight[0];

	[unroll] for(int i = 1; i < NUM_SHADOW_BLUR; i++)
	{
		float4 shadowDepthP = tex2D(smp, texCoord + offset * i);
		float4 shadowDepthN = tex2D(smp, texCoord - offset * i);
		float wp = CalcShadowBlurWeight(shadowDepthP.w, centerDepth, depthRate);
		float wn = CalcShadowBlurWeight(shadowDepthN.w, centerDepth, depthRate);
		float w = BlurWeight[i * SHADOW_WEIGHT];
		sum += float4(shadowDepthP.xyz * wp + shadowDepthN.xyz * wn, wp + wn) * w;
	}

	return float4(sum.xyz / sum.w, centerDepth);
}


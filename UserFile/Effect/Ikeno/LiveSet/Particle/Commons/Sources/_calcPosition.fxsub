
#define PRTCL_TEX_WIDTH     UNIT_COUNT  // 座標情報テクスチャピクセル幅
#define PRTCL_TEX_HEIGHT    1024        // 配置･乱数情報テクスチャピクセル高さ

float3	PRTCL_CameraPosition	: POSITION  < string Object = "Camera"; >;
float3	PRTCL_CameraDirection	: DIRECTION  < string Object = "Camera"; >;
float PRTCL_AcsTr  : CONTROLOBJECT < string name = "(self)"; string item = "Tr"; >;

int RepeatCount = UNIT_COUNT;  // シェーダ内描画反復回数
int RepeatIndex;               // 複製モデルカウンタ

#if USE_BILLBOARD == 1
float4x4 PRTCL_matVInv	: VIEWINVERSE;
static float3x3 BillboardMatrix = {
	normalize(PRTCL_matVInv[0].xyz),
	normalize(PRTCL_matVInv[1].xyz),
	normalize(PRTCL_matVInv[2].xyz),
};
#endif

texture2D ParticleTex <
	string ResourceName = TEX_FileName;
	int MipLevels = 1;
>;
sampler ParticleTexSamp = sampler_state {
	texture = <ParticleTex>;
	MinFilter = LINEAR; MagFilter = LINEAR; MipFilter = NONE;
	AddressU  = CLAMP; AddressV  = CLAMP;
};

#if defined(PALLET_FileName) && USE_PALLET > 0
texture2D ColorPallet <
	string ResourceName = PALLET_FileName;
>;
sampler ColorPalletSmp = sampler_state{
	texture = <ColorPallet>;
	MinFilter = POINT; MagFilter = POINT; MipFilter = NONE;
	AddressU  = WRAP; AddressV = WRAP;
};
#endif

// 粒子座標記録用
shared texture COORD_TEX_NAME : RENDERCOLORTARGET;
sampler CoordSmp = sampler_state
{
	Texture = <COORD_TEX_NAME>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP; AddressV = CLAMP;
};

struct POSITION_INFO
{
	float4 WPos;
	float3 Normal;
	float4 Tex;
	float4 Color;
};

// 粒子の回転行列
float3x3 RoundMatrix(int index, float etime)
{
   float rotX = ParticleRotSpeed * (1.0f + 0.3f*sin(247*index)) * etime + (float)index * 147.0f;
   float rotY = ParticleRotSpeed * (1.0f + 0.3f*sin(368*index)) * etime + (float)index * 258.0f;
   float rotZ = ParticleRotSpeed * (1.0f + 0.3f*sin(122*index)) * etime + (float)index * 369.0f;

   float sinx, cosx;
   float siny, cosy;
   float sinz, cosz;
   sincos(rotX, sinx, cosx);
   sincos(rotY, siny, cosy);
   sincos(rotZ, sinz, cosz);

   float3x3 rMat = { cosz*cosy+sinx*siny*sinz, cosx*sinz, -siny*cosz+sinx*cosy*sinz,
                    -cosy*sinz+sinx*siny*cosz, cosx*cosz,  siny*sinz+sinx*cosy*cosz,
                     cosx*siny,               -sinx,       cosx*cosy,               };

   return rMat;
}

// できるだけ正面を向く回転行列
float3x3 FacingRoundMatrix(int index, float etime, float4 Pos0)
{
	float3 v = normalize(PRTCL_CameraPosition - Pos0.xyz);
	float3x3 rMat = RoundMatrix(index, etime);

	float3 z = normalize(v * 0.5 + rMat[2]);
	float3 x = normalize(cross(rMat[1], z));
	float3 y = normalize(cross(z, x));

	float3x3 rMat2 = {x,y,z};
	return rMat2;
}

float3x3 RoundMatrixZ(int index, float etime)
{
   float rotZ = ParticleRotSpeed * (1.0f + 0.3f*sin(122*index)) * etime + (float)index * 369.0f;

   float sinz, cosz;
   sincos(rotZ, sinz, cosz);

   float3x3 rMat = { cosz*1+0*0*sinz, 1*sinz, -0*cosz+0*1*sinz,
                    -1*sinz+0*0*cosz, 1*cosz,  0*sinz+0*1*cosz,
                     1*0,               -0,       1*1,               };

   return rMat;
}


POSITION_INFO CalcPosition(float4 Pos, float2 Tex)
{
	POSITION_INFO Out = (POSITION_INFO)0;

	int i = RepeatIndex;
	int j = round( Pos.z * 100.0f );
	int Index0 = i * PRTCL_TEX_HEIGHT + j;
	float2 texCoord = float2((i+0.5f)/PRTCL_TEX_WIDTH, (j+0.5f)/PRTCL_TEX_HEIGHT);
	Pos.z = 0.0f;
	Out.Tex.w = float(j);

	// 粒子の座標
	float4 Pos0 = tex2Dlod(CoordSmp, float4(texCoord, 0, 0));

	// 経過時間
	float etime = Pos0.w - 1.0f;

	// 粒子の大きさ
	Pos.xy *= ParticleSize * 10.0f;

	#if USE_BILLBOARD == 0
	float3x3 matWTmp = FacingRoundMatrix(Index0, etime, Pos0);
	#else
	float3x3 matWTmp = RoundMatrixZ(Index0, etime);
	#endif

	// 粒子の回転
	Pos.xyz = mul( Pos.xyz, matWTmp );
	Out.Normal = normalize(matWTmp[2]);

	#if USE_BILLBOARD != 0
	Pos.xyz = mul(Pos.xyz, BillboardMatrix);
	#endif

	// 粒子のワールド座標
	Pos.xyz += Pos0.xyz;
	Pos.xyz *= step(0.001f, etime);
	Pos.w = 1.0f;
	Out.WPos = Pos;

	// 粒子の乗算色
	float alpha = step(0.001f, etime) * smoothstep(-ParticleLife, -ParticleLife*ParticleDecrement, -etime) * PRTCL_AcsTr;
	#if !defined(ENABLE_BOUNCE) || ENABLE_BOUNCE == 0
	alpha *= smoothstep(FloorFadeMin, FloorFadeMax, Pos0.y);
	#endif
	Out.Color = float4(1,1,1, alpha );

	// テクスチャ座標
	int texIndex = Index0 % (TEX_PARTICLE_XNUM * TEX_PARTICLE_YNUM);
	int tex_i = texIndex % TEX_PARTICLE_XNUM;
	int tex_j = texIndex / TEX_PARTICLE_XNUM;
	Out.Tex.xy = float2((Tex.x + tex_i)/TEX_PARTICLE_XNUM, (Tex.y + tex_j)/TEX_PARTICLE_YNUM);

	return Out;
}

float4 CalcColor(float4 baseColor, float4 uv)
{
    // 粒子の色
	float4 Color = baseColor * tex2D( ParticleTexSamp, uv.xy);
	float texIndex = uv.w;

	#if defined(PALLET_FileName) && USE_PALLET > 0
	float4 randColor = tex2D(ColorPalletSmp, float2((texIndex+0.5f) / PALLET_TEX_SIZE, 0.5));
	Color.rgb *= randColor.rgb;
	#endif

	return Color;
}


#define PARTICLE_LOOPSCRIPT(n)	\
	"LoopByCount=RepeatCount; LoopGetIndex=RepeatIndex;" n "LoopEnd=;"

#define PARTICLE_LOOPSCRIPT_OBJECT	PARTICLE_LOOPSCRIPT( "Pass=DrawObject;" )


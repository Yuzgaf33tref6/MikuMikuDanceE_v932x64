//=============================================================================
// パーティクル用の共通処理
//=============================================================================


// 最大何個までボーンを登録するか
#define MaxWindNum		8

// テクスチャの幅
// MaxWindNum <= WIND_TEX_HEIGHT である必要がある。
#define WIND_TEX_HEIGHT	8

#define	DECL_WIND(_suffix, _name)	\
	float3 WindPosition##_suffix : CONTROLOBJECT < string name = _name; >;	\
	float WindScale##_suffix : CONTROLOBJECT < string name = _name; string item = "Si"; >;	\
	float WindPower##_suffix : CONTROLOBJECT < string name = _name; string item = "Tr"; >;	

DECL_WIND( _01, "ikWindMaker01.x")
DECL_WIND( _02, "ikWindMaker02.x")
DECL_WIND( _03, "ikWindMaker03.x")
DECL_WIND( _04, "ikWindMaker04.x")
DECL_WIND( _05, "ikWindMaker05.x")
DECL_WIND( _06, "ikWindMaker06.x")
DECL_WIND( _07, "ikWindMaker07.x")
DECL_WIND( _08, "ikWindMaker08.x")

inline float4 GetWindPos(float3 pos, float scale)
{
	return float4(pos, 0.23 * 10.0 / max(scale, 1e-4));
}

static float4 WindPositionArray[] = {
	GetWindPos(WindPosition_01, WindScale_01),
	GetWindPos(WindPosition_02, WindScale_02),
	GetWindPos(WindPosition_03, WindScale_03),
	GetWindPos(WindPosition_04, WindScale_04),
	GetWindPos(WindPosition_05, WindScale_05),
	GetWindPos(WindPosition_06, WindScale_06),
	GetWindPos(WindPosition_07, WindScale_07),
	GetWindPos(WindPosition_08, WindScale_08),
};

static float WindPowerArray[] = {
	WindPower_01,
	WindPower_02,
	WindPower_03,
	WindPower_04,
	WindPower_05,
	WindPower_06,
	WindPower_07,
	WindPower_08,
};


//=============================================================================
// パラメータ宣言
const float AlphaThroughThreshold = 0.5;

#define PRTCL_TEX_WIDTH	UNIT_COUNT  // 座標情報テクスチャピクセル幅
#define PRTCL_TEX_HEIGHT	1024		// 配置･乱数情報テクスチャピクセル高さ

#define PRTCL_PAI 3.14159265f	// π

#define STRGEN(x)	#x
#define	COORD_TEX_NAME_STRING		STRGEN(COORD_TEX_NAME)

float PRTCL_AcsTr  : CONTROLOBJECT < string name = "(self)"; string item = "Tr"; >;
float PRTCL_AcsSi  : CONTROLOBJECT < string name = "(self)"; string item = "Si"; >;

int RepeatCount = UNIT_COUNT;  // シェーダ内描画反復回数
int RepeatIndex;				// 複製モデルカウンタ

static float diffD = radians( clamp(90.0f - DiffusionAngle, -90.0f, 90.0f) );

// 時間設定
float PRTCL_time1 : TIME;
float PRTCL_time2 : TIME < bool SyncInEditMode = true; >;
static float PRTCL_time = TimeSync ? PRTCL_time1 : PRTCL_time2;
float PRTCL_elapsed_time1 : ELAPSEDTIME;
float PRTCL_elapsed_time2 : ELAPSEDTIME < bool SyncInEditMode = true; >;
static float PRTCL_Dt = clamp(TimeSync ? PRTCL_elapsed_time1 : PRTCL_elapsed_time2, 0.0f, 0.1f);
float3	PRTCL_CameraPosition	: POSITION  < string Object = "Camera"; >;

// 1フレーム当たりの粒子発生数
static float P_Count = ParticleOccur * (PRTCL_Dt / ParticleLife) * PRTCL_AcsSi*100;


// 座標変換行列
float4x4 PRTCL_matW	: WORLD;
float4x4 PRTCL_matV	: VIEW;
float4x4 PRTCL_matVP	: VIEWPROJECTION;

#if USE_BILLBOARD == 1
float4x4 PRTCL_matVInv	: VIEWINVERSE;
static float3x3 PRTCL_BillboardMatrix = {
	normalize(PRTCL_matVInv[0].xyz),
	normalize(PRTCL_matVInv[1].xyz),
	normalize(PRTCL_matVInv[2].xyz),
};
#endif

texture2D ParticleTex <
	string ResourceName = TEX_FileName;
	int MipLevels = 1;
>;
sampler ParticleTexSamp = sampler_state {
	texture = <ParticleTex>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV  = CLAMP;
};

#if(USE_SPHERE == 1)
texture2D ParticleSphere <
	string ResourceName = SPHERE_FileName;
>;
sampler ParticleSphereSamp = sampler_state {
	texture = <ParticleSphere>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV  = CLAMP;
};
#endif

// 粒子座標記録用
texture CoordWorkTex : RENDERCOLORTARGET
<
	int Width=PRTCL_TEX_WIDTH;
	int Height=PRTCL_TEX_HEIGHT;
	string Format="A32B32G32R32F";
>;
sampler CoordWorkSmp = sampler_state
{
	Texture = <CoordWorkTex>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};

// 粒子座標記録用
shared texture COORD_TEX_NAME : RENDERCOLORTARGET
<
	int Width=PRTCL_TEX_WIDTH;
	int Height=PRTCL_TEX_HEIGHT;
	string Format="A32B32G32R32F";
>;
sampler CoordSmp = sampler_state
{
	Texture = <COORD_TEX_NAME>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};

texture CoordDepthBuffer : RenderDepthStencilTarget <
	int Width=PRTCL_TEX_WIDTH;
	int Height=PRTCL_TEX_HEIGHT;
	string Format = "D24S8";
>;

// 粒子速度記録用
texture VelocityTex : RENDERCOLORTARGET
<
	int Width=PRTCL_TEX_WIDTH;
	int Height=PRTCL_TEX_HEIGHT;
	string Format="A32B32G32R32F";
>;
sampler VelocitySmp = sampler_state
{
	Texture = <VelocityTex>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};

texture VelocityTexCopy : RENDERCOLORTARGET
<
	int Width=PRTCL_TEX_WIDTH;
	int Height=PRTCL_TEX_HEIGHT;
	string Format="A32B32G32R32F";
>;
sampler VelocitySmpCopy = sampler_state
{
	Texture = <VelocityTexCopy>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};


// 乱数生成用
texture2D RandomTex <
	string ResourceName = "../Commons/rand128.png";
>;
sampler RandomSmp = sampler_state{
	texture = <RandomTex>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = WRAP;	AddressV = WRAP;
};

#define RND_PRTCL_TEX_SIZE 128

#if defined(PALLET_FileName) && USE_PALLET > 0
texture2D ColorPallet <
	string ResourceName = PALLET_FileName;
>;
sampler ColorPalletSmp = sampler_state{
	texture = <ColorPallet>;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = NONE;
	AddressU  = WRAP;
	AddressV = WRAP;
};
#endif


//=============================================================================
// 当たり判定
#if defined(ENABLE_BOUNCE) && ENABLE_BOUNCE > 0

#define AntiAliasMode		false
#define MipMapLevel			1
// 法線マップ
#if !defined(DRAW_NORMAL_MAP) || DRAW_NORMAL_MAP > 0
shared texture LPNormalMapRT: OFFSCREENRENDERTARGET <
	string Description = "render Normal and depth for ikParticle";
	float2 ViewPortRatio = {1, 1};
	string Format = "D3DFMT_A32B32G32R32F";		// RGBに法線。Aには深度情報
	int Miplevels = MipMapLevel;
	bool AntiAlias = AntiAliasMode;
	float4 ClearColor = { 0.0, 0.0, 0.0, 0.0};
	float ClearDepth = 1.0;
	string DefaultEffect = 
		"self = hide;"
		"ikParticle*.x = hide;"		// 自分以外の同類も排除
		"*.pmd = normalMap.fx;"
		"*.pmx = normalMap.fx;"
		"*.x = normalMap.fx;"
		"* = hide;";
>;
#else
shared texture LPNormalMapRT: OFFSCREENRENDERTARGET;
#endif

sampler PRTCL_NormalMap = sampler_state {
	texture = <LPNormalMapRT>;
	AddressU  = CLAMP;
	AddressV = CLAMP;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = LINEAR;
};

inline void GetND(float2 Tex, out float3 N, out float Depth)
{
	float4 ND = tex2D( PRTCL_NormalMap, Tex );
	N = normalize(ND.xyz);
	Depth = ND.w;
}
#endif


//=============================================================================
#define WIND_TEX_WIDTH	1
#define WIND_TEX_FMT	"A32B32G32R32F"

texture WindPositionRT: RENDERCOLORTARGET
<
	int Width = WIND_TEX_WIDTH;
	int Height = WIND_TEX_HEIGHT;
	string Format = WIND_TEX_FMT;
>;

sampler WindPositionMap = sampler_state {
	texture = <WindPositionRT>;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = POINT;
	AddressU  = CLAMP;
	AddressV = CLAMP;
};

texture WindVelocityRT: RENDERCOLORTARGET
<
	int Width = WIND_TEX_WIDTH;
	int Height = WIND_TEX_HEIGHT;
	string Format = WIND_TEX_FMT;
>;

sampler WindVelocityMap = sampler_state {
	texture = <WindVelocityRT>;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = POINT;
	AddressU  = CLAMP;
	AddressV = CLAMP;
};

//=============================================================================

// 風発生ポイントの位置
inline float4 GetWindPosition(int index)
{
	return (index < MaxWindNum) ? WindPositionArray[index] : float4(0,0,0,0);
}

// 風速の取得
inline float3 GetWindVelocity(float3 pos)
{
	float3 result = 0;

	for(int i = 0; i < MaxWindNum; i++) {
		float2 coord = float2(0.5 / WIND_TEX_WIDTH, (i + 0.5f) / WIND_TEX_HEIGHT);
		float4 wpos = WindPositionArray[i];
		float3 wvel = tex2D(WindVelocityMap, coord).xyz;
		result += exp(-length(pos - wpos.xyz) * wpos.w - 1e-4) * wvel;
	}

	return result * (50.0 * WindFactor);
}

inline bool IsTimeToReset()
{
	return (PRTCL_time < 0.001f);
}

//=============================================================================
// 配置･乱数情報テクスチャからデータを取り出す
float3 GetRand(float index)
{
	float u = floor(index + PRTCL_time);
	float v = fmod(u, RND_PRTCL_TEX_SIZE);
	u = floor(u / RND_PRTCL_TEX_SIZE);
	return tex2D(RandomSmp, float2(u,v) / RND_PRTCL_TEX_SIZE).xyz * 2.0 - 1.0;
}

float hash(float3 x)
{
	return cos(dot(x, float3(2.31,53.21,16.17))*124.123); 
}

float noise(float3 p)
{
	float3 pm = frac(p);
	float3 pd = p-pm;

	return lerp(hash(pd), hash(pd + 1.0), pm).x;
}

float3 PositionNoise(float3 pos)
{
	float scalex = (PRTCL_time * TurbulenceTimeScale + 0.136514);
	float scaley = (PRTCL_time * TurbulenceTimeScale + 1.216881);
	float scalez = (PRTCL_time * TurbulenceTimeScale + 2.556412);

	float x = noise(pos.xyz * float3(TurbulenceScale.xx, scalex));
	float y = noise(pos.yzx * float3(TurbulenceScale.xx, scaley));
	float z = noise(pos.zxy * float3(TurbulenceScale.xx, scalez));

	return float3(x,y,z);
}

//=============================================================================
// 粒子の回転行列
float3x3 RoundMatrix(int index, float etime)
{
	float rotX = ParticleRotSpeed * (1.0f + 0.3f*sin(247*index)) * etime + (float)index * 147.0f;
	float rotY = ParticleRotSpeed * (1.0f + 0.3f*sin(368*index)) * etime + (float)index * 258.0f;
	float rotZ = ParticleRotSpeed * (1.0f + 0.3f*sin(122*index)) * etime + (float)index * 369.0f;

	float sinx, cosx;
	float siny, cosy;
	float sinz, cosz;
	sincos(rotX, sinx, cosx);
	sincos(rotY, siny, cosy);
	sincos(rotZ, sinz, cosz);

	float3x3 rMat = { cosz*cosy+sinx*siny*sinz, cosx*sinz, -siny*cosz+sinx*cosy*sinz,
					-cosy*sinz+sinx*siny*cosz, cosx*cosz,  siny*sinz+sinx*cosy*cosz,
					 cosx*siny,				-sinx,		cosx*cosy,				};
	return rMat;
}

// できるだけ正面を向く回転行列
float3x3 FacingRoundMatrix(int index, float etime, float4 Pos0)
{
	float3 v = normalize(PRTCL_CameraPosition - Pos0.xyz);
	float3x3 rMat = RoundMatrix(index, etime);

	float3 z = normalize(v * 0.5 + rMat[2]);
	float3 x = normalize(cross(rMat[1], z));
	float3 y = normalize(cross(z, x));

	float3x3 rMat2 = {x,y,z};
	return rMat2;
}

float3x3 RoundMatrixZ(int index, float etime)
{
	float rotZ = ParticleRotSpeed * (1.0f + 0.3f*sin(122*index)) * etime + (float)index * 369.0f;

	float sinz, cosz;
	sincos(rotZ, sinz, cosz);

	float3x3 rMat = { cosz*1+0*0*sinz, 1*sinz, -0*cosz+0*1*sinz,
					-1*sinz+0*0*cosz, 1*cosz,  0*sinz+0*1*cosz,
					 1*0,				-0,		1*1,				};

	return rMat;
}

//=============================================================================
struct VS_OUTPUT {
	float4 Pos : POSITION;
	float2 Tex : TEXCOORD0;
};

// 共通の頂点シェーダ
VS_OUTPUT Common_VS(float4 Pos: POSITION, float2 Tex: TEXCOORD)
{
	VS_OUTPUT Out;
	Out.Pos = Pos;
	Out.Tex = Tex + float2(0.5f/PRTCL_TEX_WIDTH, 0.5f/PRTCL_TEX_HEIGHT);
	return Out;
}

//=============================================================================
struct PS_OUT_MRT
{
	float4 Pos		: COLOR0;
	float4 Vel		: COLOR1;
};

PS_OUT_MRT CopyPos_PS(float2 Tex: TEXCOORD0) : COLOR
{
	PS_OUT_MRT Out;
	Out.Pos = tex2D(CoordSmp, Tex);
	Out.Vel = tex2D(VelocitySmp, Tex);
	return Out;
}

// 粒子の発生・座標更新計算(xyz:座標,w:経過時間+1sec,wは更新時に1に初期化されるため+1sからスタート)
PS_OUT_MRT UpdatePos_PS(float2 Tex: TEXCOORD0) : COLOR
{
	// 粒子の座標
	float4 Pos = tex2D(CoordSmp, Tex);

	// 粒子の速度
	float4 Vel = tex2D(VelocitySmp, Tex);

	int i = floor( Tex.x*PRTCL_TEX_WIDTH );
	int j = floor( Tex.y*PRTCL_TEX_HEIGHT );
	int p_index = j + i * PRTCL_TEX_HEIGHT;

	if(Pos.w < 1.001f){

		// 新たに粒子を発生させるかどうかの判定
		if(p_index < Vel.w) p_index += float(PRTCL_TEX_WIDTH*PRTCL_TEX_HEIGHT);
		if(p_index < Vel.w+P_Count){
		 Pos.w = 1.0011f;  // Pos.w>1.001で粒子発生

	// 未発生粒子の中から新たに粒子を発生させる
		float3 WPos = GetRand(p_index);
		float3 WPos0 = PRTCL_matW._41_42_43;
//		WPos *= ParticleInitPos * 0.1f;
		WPos *= float3(10,0,5) * ParticleInitPos * 0.1f;
		WPos = mul( float4(WPos,1), PRTCL_matW ).xyz;
		Pos.xyz = (WPos - WPos0) / PRTCL_AcsSi * 10.0f + WPos0;  // 発生初期座標

	// 発生したての粒子に初速度与える
		float3 rand = GetRand(p_index * 17 + RND_PRTCL_TEX_SIZE);
		float time1 = PRTCL_time + 100.0f;
		float ss, cs;
		sincos( lerp(diffD, PRTCL_PAI*0.5f, frac(rand.x*time1)), ss, cs );
		float st, ct;
		sincos( lerp(-PRTCL_PAI, PRTCL_PAI, frac(rand.y*time1)), st, ct );
		float3 vec  = float3( cs*ct, ss, cs*st );
		Vel.xyz = normalize( mul( vec, (float3x3)PRTCL_matW ) )
				* lerp(ParticleSpeedMin, ParticleSpeedMax, frac(rand.z*time1));

		}
	}else{
	// 発生粒子は疑似物理計算で座標を更新
		// 粒子の法線ベクトル
		float3 normal = mul( float3(0.0f,0.0f,1.0f), RoundMatrix(p_index, Pos.w) );

		// 抵抗係数の設定
		float v = length( Vel.xyz );
		float cosa = dot( normalize(Vel.xyz), normal );
		float coefResist = lerp(ResistFactor, 0.0f, smoothstep(-0.3f*ParticleSpeedMax, -10.0f, -v));
		float coefRotResist = lerp(0.2f, RotResistFactor, smoothstep(-0.3f*ParticleSpeedMax, -10.0f, -v));
		// 加速度計算(速度抵抗力+回転抵抗力+重力)
		float3 Accel = -Vel.xyz * coefResist - normal * v * cosa * coefRotResist + GravFactor;

		// 新しい座標に更新
		Pos.xyz += PRTCL_Dt * (Vel.xyz + PRTCL_Dt * Accel);

		// すでに発生している粒子は経過時間を進める
		Pos.w += PRTCL_Dt;
		Pos.w *= step(Pos.w-1.0f, ParticleLife); // 指定時間を超えると0

		Vel.xyz -= (Vel.xyz * (0.1 * PRTCL_Dt));
		Vel.xyz += GetWindVelocity(Pos.xyz) * (WindPowerScale * PRTCL_Dt);
		Vel.xyz += PositionNoise(Pos.xyz) * (PRTCL_Dt * TurbulenceFactor);
		Vel.xyz += GravFactor * PRTCL_Dt;

		#if defined(ENABLE_BOUNCE) && ENABLE_BOUNCE > 0
		// 簡単な交差判定
		float4 ppos = mul(float4(Pos.xyz,1), PRTCL_matVP );
		float dist = length(Pos.xyz - PRTCL_CameraPosition);
		float2 Tex2 = (1.0 + ppos.xy * float2(1, -1) / ppos.w) * 0.5;
		float3 N;
		float Depth;
		GetND(Tex2, N, Depth);
		float dotVN = dot(Vel.xyz, N);
		if (dotVN < 0.0 && Depth < dist && dist < Depth + IgnoreDpethOffset)
		{
			Vel.xyz = (Vel.xyz - N * (dotVN * (1 + BounceFactor))) * FrictionFactor;
		}

		// すこしだけ避ける
		const float reduce = 0.75;
		Tex2 = Tex2 * reduce + (-0.5 * reduce + 0.5); // 中央を見る
		GetND(Tex2, N, Depth);
		dotVN = dot(Vel.xyz, N);
		if (dotVN < 0.0)
		{
			float d = saturate(1.0 - abs(dist - Depth) * (1.0 / AvoidDistance));
			Vel.xyz -= N * (dotVN * d * d * AvoidFactor);
		}
		#endif
	}

	Vel.w += P_Count;
	if(Vel.w >= float(PRTCL_TEX_WIDTH*PRTCL_TEX_HEIGHT)) Vel.w -= float(PRTCL_TEX_WIDTH*PRTCL_TEX_HEIGHT);

	// 0フレーム再生で粒子初期化
	if(IsTimeToReset())
	{
		Pos = float4(PRTCL_matW._41_42_43, 0.0f);
		Vel = 0.0f;
	}

	PS_OUT_MRT Out;
	Out.Pos = Pos;
	Out.Vel = Vel;
	return Out;
}

//=============================================================================
// 共通の頂点シェーダ
VS_OUTPUT CommonWind_VS(float4 Pos: POSITION, float2 Tex: TEXCOORD)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;
	Out.Pos = Pos;
	Out.Tex = Tex + float2(0.5f/WIND_TEX_WIDTH, 0.5f/WIND_TEX_HEIGHT);
	return Out;
}

// 現在の位置と、1フレ前の位置から速度を求める
float4 UpdateWindVelocity_PS(float2 Tex: TEXCOORD0) : COLOR
{
	float4 pos = GetWindPosition(floor(Tex.y * WIND_TEX_HEIGHT));

	float3 oldPos = tex2D(WindPositionMap, Tex).xyz;

	// 一定速度以下は無視する
	float3 v = (pos.xyz - oldPos) / PRTCL_Dt;
	float len = length(v);
	if (!IsTimeToReset() && len > MinWindSpeed)
	{
		int i = (int)floor(Tex.y * WIND_TEX_HEIGHT);
		v = v * (min(len - MinWindSpeed, MaxWindSpeed) / len) * WindPowerArray[i];
	} else {
		v = 0;
	}

	return float4(v, 1);
}

// 現在の位置を保存
float4 UpdateWindPosition_PS(float2 Tex: TEXCOORD0) : COLOR
{
	float3 pos = GetWindPosition(floor(Tex.y * WIND_TEX_HEIGHT)).xyz;
	return float4(pos, 1);
}


//=============================================================================

struct POSITION_INFO
{
	float4 WPos;
	float3 Normal;
	float4 Tex;
	float2 SpTex;
	float4 Color;
};

POSITION_INFO CalcPosition(float4 Pos, float2 Tex)
{
	POSITION_INFO Out = (POSITION_INFO)0;

	int i = RepeatIndex;
	int j = round( Pos.z * 100.0f );
	int Index0 = i * PRTCL_TEX_HEIGHT + j;
	float2 texCoord = float2((i+0.5f)/PRTCL_TEX_WIDTH, (j+0.5f)/PRTCL_TEX_HEIGHT);
	Pos.z = 0.0f;
	Out.Tex.w = float(j);

	// 粒子の座標
	float4 Pos0 = tex2Dlod(CoordWorkSmp, float4(texCoord, 0, 0));

	// 経過時間
	float etime = Pos0.w - 1.0f;

	// 粒子の大きさ
	Pos.xy *= ParticleSize * 10.0f;

	#if USE_BILLBOARD == 0
	float3x3 matWTmp = FacingRoundMatrix(Index0, etime, Pos0);
	#else
	float3x3 matWTmp = RoundMatrixZ(Index0, etime);
	#endif

	// 粒子の回転
	Pos.xyz = mul( Pos.xyz, matWTmp );
	float3 Normal = normalize(matWTmp[2]);

	#if USE_BILLBOARD != 0
	Pos.xyz = mul(Pos.xyz, PRTCL_BillboardMatrix);
	#endif

	// 粒子のワールド座標
	Pos.xyz += Pos0.xyz;
	Pos.xyz *= step(0.001f, etime);
	Pos.w = 1.0f;

	Out.WPos = Pos;

	// 粒子の乗算色
	float alpha = step(0.001f, etime) * smoothstep(-ParticleLife, -ParticleLife*ParticleDecrement, -etime) * PRTCL_AcsTr;
	// 床付近で消さない
	#if !defined(ENABLE_BOUNCE) || ENABLE_BOUNCE == 0
	alpha *= smoothstep(FloorFadeMin, FloorFadeMax, Pos0.y);
	#endif
	Out.Color = float4(1,1,1, alpha );

	// テクスチャ座標
	int texIndex = Index0 % (TEX_PARTICLE_XNUM * TEX_PARTICLE_YNUM);
	int PRTCL_TEX_i = texIndex % TEX_PARTICLE_XNUM;
	int PRTCL_TEX_j = texIndex / TEX_PARTICLE_XNUM;
	Out.Tex.xy = float2((Tex.x + PRTCL_TEX_i)/TEX_PARTICLE_XNUM, (Tex.y + PRTCL_TEX_j)/TEX_PARTICLE_YNUM);

	#if( USE_SPHERE==1 )
		// スフィアマップテクスチャ座標
		Normal = mul( Normal, matWTmp );
		float2 NormalWV = mul( Normal, (float3x3)PRTCL_matV ).xy;
		Out.SpTex.x = NormalWV.x * 0.5f + 0.5f;
		Out.SpTex.y = NormalWV.y * -0.5f + 0.5f;
	#endif

	return Out;
}

// base colorのみ
float4 CalcColor(float4 baseColor, float4 uv)
{
    // 粒子の色
	float4 Color = baseColor * tex2D( ParticleTexSamp, uv.xy);
	float texIndex = uv.w;

	#if defined(PALLET_FileName) && USE_PALLET > 0
	// ランダム色設定
	float4 randColor = tex2D(ColorPalletSmp, float2((texIndex+0.5f) / PALLET_TEX_SIZE, 0.5));
	Color.rgb *= randColor.rgb;
	#endif

	return Color;
}

//=============================================================================

#define PARTICLE_LOOPSCRIPT(n)	\
	"LoopByCount=RepeatCount; LoopGetIndex=RepeatIndex;" n "LoopEnd=;"

#define PARTICLE_LOOPSCRIPT_OBJECT	PARTICLE_LOOPSCRIPT( "Pass=DrawObject;" )


#define PARTICLE_UPDATE_POSITION	\
		"RenderColorTarget0=WindVelocityRT;" \
		"RenderDepthStencilTarget=CoordDepthBuffer;" \
		"Pass=UpdateWindVelocity;" \
		"RenderColorTarget0=WindPositionRT;" \
		"Pass=UpdateWindPosition;" \
		"RenderColorTarget0=CoordWorkTex;" \
		"RenderColorTarget1=VelocityTexCopy;" \
		"Pass=CopyPos;" \
		"RenderColorTarget0=" COORD_TEX_NAME_STRING ";" \
		"RenderColorTarget1=VelocityTex;" \
		"Pass=UpdatePos;" \
		"RenderColorTarget1=;" \
		"RenderColorTarget0=; RenderDepthStencilTarget=;"

#define PARTICLE_UPDATE_POSITION_PASS	\

stateblock UpdateWindVelocityState = stateblock_state
{
	ALPHABLENDENABLE = FALSE; ALPHATESTENABLE = FALSE;
	VertexShader = compile vs_3_0 CommonWind_VS();
	PixelShader  = compile ps_3_0 UpdateWindVelocity_PS();
};

stateblock UpdateWindPositionState = stateblock_state
{
	ALPHABLENDENABLE = FALSE; ALPHATESTENABLE = FALSE;
	VertexShader = compile vs_3_0 CommonWind_VS();
	PixelShader  = compile ps_3_0 UpdateWindPosition_PS();
};

stateblock CopyPosState = stateblock_state
{
	ALPHABLENDENABLE = FALSE; ALPHATESTENABLE = FALSE;
	VertexShader = compile vs_3_0 Common_VS();
	PixelShader  = compile ps_3_0 CopyPos_PS();
};

stateblock UpdatePosState = stateblock_state
{
	ALPHABLENDENABLE = FALSE; ALPHATESTENABLE = FALSE;
	VertexShader = compile vs_3_0 Common_VS();
	PixelShader  = compile ps_3_0 UpdatePos_PS();
};

#define UPDATE_PASS_STATES	\
	pass UpdateWindVelocity < string Script= "Draw=Buffer;"; > { StateBlock = (UpdateWindVelocityState); } \
	pass UpdateWindPosition < string Script= "Draw=Buffer;"; > { StateBlock = (UpdateWindPositionState); } \
	pass CopyPos < string Script= "Draw=Buffer;"; > { StateBlock = (CopyPosState); } \
	pass UpdatePos < string Script= "Draw=Buffer;"; > { StateBlock = (UpdatePosState); }


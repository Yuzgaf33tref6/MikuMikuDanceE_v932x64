////////////////////////////////////////////////////////////////////////////////////////////////
//
//  ベロシティマップ 出力エフェクト
//  製作：そぼろ
//  MME 0.27が必要です
//  改造・流用とも自由です
//
////////////////////////////////////////////////////////////////////////////////////////////////

// 設定ファイル
#include "ikParticleSettings.fxsub"

// 背景まで透過させる閾値を設定します
float TransparentThreshold = 0.5;

// 透過判定にテクスチャの透過度を使用します。1で有効、0で無効
#define TRANS_TEXTURE  1

////////////////////////////////////////////////////////////////////////////////////////////////

#define TEX_WIDTH	 UNIT_COUNT  // 座標情報テクスチャピクセル幅
#define TEX_HEIGHT	1024		// 配置･乱数情報テクスチャピクセル高さ


inline float4 ClonePos(float4 Pos) { return Pos; }

// 粒子座標記録用
shared texture COORD_TEX_NAME : RENDERCOLORTARGET;
sampler CoordSmp : register(s3) = sampler_state
{
	Texture = <COORD_TEX_NAME>;
	AddressU  = CLAMP;
	AddressV = CLAMP;
	MinFilter = NONE;
	MagFilter = NONE;
	MipFilter = NONE;
};


////////////////////////////////////////////////////////////////////////////////////////////////


// 座法変換行列
float4x4 WorldViewProjMatrix	  : WORLDVIEWPROJECTION;
float4x4 WorldMatrix			  : WORLD;
float4x4 WorldViewMatrix		  : WORLDVIEW;
float4x4 ProjectionMatrix		 : PROJECTION;
float4x4 ViewProjMatrix			: VIEWPROJECTION;

float3   CameraPosition    : POSITION  < string Object = "Camera"; >;

bool use_texture;  //テクスチャの有無

// マテリアル色
//float4 MaterialDiffuse	: DIFFUSE  < string Object = "Geometry"; >;
float4 MaterialDiffuse = 1;

// スクリーンサイズ
float2 ViewportSize : VIEWPORTPIXELSIZE;
static float ViewportAspect = ViewportSize.x / ViewportSize.y;


#if TRANS_TEXTURE!=0
	// オブジェクトのテクスチャ
	texture2D ParticleTex <
		string ResourceName = TEX_FileName;
		int MipLevels = 1;
	>;
	sampler ParticleTexSamp = sampler_state {
		texture = <ParticleTex>;
		MinFilter = LINEAR;
		MagFilter = LINEAR;
		MipFilter = NONE;
		AddressU  = CLAMP;
		AddressV  = CLAMP;
	};
#endif



// 1.6万頂点まで対応
#define VPBUF_WIDTH  128
#define VPBUF_HEIGHT 128

//頂点座標バッファサイズ
static float2 VPBufSize = float2(VPBUF_WIDTH, VPBUF_HEIGHT);

static float2 VPBufOffset = float2(0.5 / VPBUF_WIDTH, 0.5 / VPBUF_HEIGHT);


//頂点ごとのワールド座標を記録
texture DepthBuffer : RenderDepthStencilTarget <
	int Width=VPBUF_WIDTH;
	int Height=VPBUF_HEIGHT;
	string Format = "D24S8";
>;
texture VertexPosBufTex : RenderColorTarget
<
	int Width=VPBUF_WIDTH;
	int Height=VPBUF_HEIGHT;
	bool AntiAlias = false;
	int Miplevels = 1;
	string Format="A32B32G32R32F";
>;
sampler VertexPosBuf = sampler_state
{
	Texture = (VertexPosBufTex);
	ADDRESSU = CLAMP;
	ADDRESSV = CLAMP;
	MAGFILTER = NONE;
	MINFILTER = NONE;
	MIPFILTER = NONE;
};
texture VertexPosBufTex2 : RenderColorTarget
<
	int Width=VPBUF_WIDTH;
	int Height=VPBUF_HEIGHT;
	bool AntiAlias = false;
	int Miplevels = 1;
	string Format="A32B32G32R32F";
>;
sampler VertexPosBuf2 = sampler_state
{
	Texture = (VertexPosBufTex2);
	ADDRESSU = CLAMP;
	ADDRESSV = CLAMP;
	MAGFILTER = NONE;
	MINFILTER = NONE;
	MIPFILTER = NONE;
};


//ワールドビュー射影行列などの記録

#define INFOBUFSIZE 16

texture DepthBufferMB : RenderDepthStencilTarget <
	int Width=INFOBUFSIZE;
	int Height=1;
	string Format = "D24S8";
>;
texture MatrixBufTex : RenderColorTarget
<
	int Width=INFOBUFSIZE;
	int Height=1;
	bool AntiAlias = false;
	int Miplevels = 1;
	string Format="A32B32G32R32F";
>;

float4 MatrixBufArray[INFOBUFSIZE] : TEXTUREVALUE <
	string TextureName = "MatrixBufTex";
>;

//前フレームのワールド行列
static float4x4 lastWorldMatrix = float4x4(MatrixBufArray[0], MatrixBufArray[1], MatrixBufArray[2], MatrixBufArray[3]);

//前フレームのビュー射影行列
static float4x4 lastViewMatrix = float4x4(MatrixBufArray[4], MatrixBufArray[5], MatrixBufArray[6], MatrixBufArray[7]);



//フレームの記録をブロックするかどうか
bool MotionBlockerEnable  : CONTROLOBJECT < string name = "LockMotion.x"; >;
bool CameraBlockerEnable  : CONTROLOBJECT < string name = "LockCamera.x"; >;


#ifdef MIKUMIKUMOVING
	static float4x4 lastMatrix = mul(WorldMatrix, lastViewMatrix);
#else
	static float4x4 lastMatrix = lastViewMatrix; // mul(lastWorldMatrix, lastViewMatrix);
#endif

//時間
float ftime : TIME<bool SyncInEditMode=true;>;
float stime : TIME<bool SyncInEditMode=false;>;

//出現フレームかどうか
//前回呼び出しから0.5s以上経過していたら非表示だったと判断
static float last_ftime = MatrixBufArray[8].y;
static float last_stime = MatrixBufArray[8].x;
static bool Appear = (abs(last_stime - stime) > 0.5);


float AcsTr  : CONTROLOBJECT < string name = "(self)"; string item = "Tr"; >;

int RepeatCount = UNIT_COUNT;  // シェーダ内描画反復回数
int RepeatIndex;				// 複製モデルカウンタ


#if USE_BILLBOARD == 1
float4x4 ViewInverseMatrix	: VIEWINVERSE;
static float3x3 BillboardMatrix = {
	normalize(ViewInverseMatrix[0].xyz),
	normalize(ViewInverseMatrix[1].xyz),
	normalize(ViewInverseMatrix[2].xyz),
};
#endif

////////////////////////////////////////////////////////////////////////////////////////////////
// 粒子の回転行列
float3x3 RoundMatrix(int index, float etime)
{
	float rotX = ParticleRotSpeed * (1.0f + 0.3f*sin(247*index)) * etime + (float)index * 147.0f;
	float rotY = ParticleRotSpeed * (1.0f + 0.3f*sin(368*index)) * etime + (float)index * 258.0f;
	float rotZ = ParticleRotSpeed * (1.0f + 0.3f*sin(122*index)) * etime + (float)index * 369.0f;

	float sinx, cosx;
	float siny, cosy;
	float sinz, cosz;
	sincos(rotX, sinx, cosx);
	sincos(rotY, siny, cosy);
	sincos(rotZ, sinz, cosz);

	float3x3 rMat = { cosz*cosy+sinx*siny*sinz, cosx*sinz, -siny*cosz+sinx*cosy*sinz,
					-cosy*sinz+sinx*siny*cosz, cosx*cosz,  siny*sinz+sinx*cosy*cosz,
					 cosx*siny,				-sinx,		cosx*cosy,				};

	return rMat;
}

// できるだけ正面を向く回転行列
float3x3 FacingRoundMatrix(int index, float etime, float4 Pos0)
{
	float3 v = normalize(CameraPosition - Pos0);
	float3x3 rMat = RoundMatrix(index, etime);

	float3 z = normalize(v * 0.5 + rMat[2]);
	float3 x = normalize(cross(rMat[1], z));
	float3 y = normalize(cross(z, x));

	float3x3 rMat2 = {x,y,z};
	return rMat2;
}

float3x3 RoundMatrixZ(int index, float etime)
{
	float rotZ = ParticleRotSpeed * (1.0f + 0.3f*sin(122*index)) * etime + (float)index * 369.0f;

	float sinz, cosz;
	sincos(rotZ, sinz, cosz);

	float3x3 rMat = { cosz*1+0*0*sinz, 1*sinz, -0*cosz+0*1*sinz,
					-1*sinz+0*0*cosz, 1*cosz,  0*sinz+0*1*cosz,
					 1*0,				-0,		1*1,				};

	return rMat;
}



////////////////////////////////////////////////////////////////////////////////////////////////
//MMM対応

#ifdef MIKUMIKUMOVING
	
	#define GETPOS MMM_SkinnedPosition(IN.Pos, IN.BlendWeight, IN.BlendIndices, IN.SdefC, IN.SdefR0, IN.SdefR1)
	
	int voffset : VERTEXINDEXOFFSET;
	
#else
	
	struct MMM_SKINNING_INPUT{
		float4 Pos : POSITION;
		float2 Tex : TEXCOORD0;
		float4 AddUV1 : TEXCOORD1;
		float4 AddUV2 : TEXCOORD2;
		float4 AddUV3 : TEXCOORD3;
		int Index	 : _INDEX;
	};
	
	#define GETPOS (IN.Pos)
	
	const int voffset = 0;
	
#endif

////////////////////////////////////////////////////////////////////////////////////////////////
//汎用関数

//W付きスクリーン座標を単純スクリーン座標に
float2 ScreenPosRasterize(float4 ScreenPos){
	return ScreenPos.xy / ScreenPos.w;
	
}

//頂点座標バッファ取得
float4 getVertexPosBuf(float index)
{
	float4 Color;
	float2 tpos = float2(index % VPBUF_WIDTH, trunc(index / VPBUF_WIDTH));
	tpos += float2(0.5, 0.5);
	tpos /= float2(VPBUF_WIDTH, VPBUF_HEIGHT);
	Color = tex2Dlod(VertexPosBuf2, float4(tpos,0,0));
	return Color;
}

////////////////////////////////////////////////////////////////////////////////////////////////

struct VS_OUTPUT
{
	float4 Pos		: POSITION;	// 射影変換座標
	float2 Tex		: TEXCOORD0;	// UV
	float4 LastPos	: TEXCOORD1;
	float4 CurrentPos : TEXCOORD2;
	float4 Color		: COLOR0;
};

VS_OUTPUT Velocity_VS(MMM_SKINNING_INPUT IN , uniform bool useToon)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;

	float4 pos = GETPOS;
	pos = ClonePos(pos);

	int i = RepeatIndex;
	int j = round( pos.z * 100.0f );
	int Index0 = i * TEX_HEIGHT + j;
	float2 texCoord = float2((i+0.5f)/TEX_WIDTH, (j+0.5f)/TEX_HEIGHT);
	pos.z = 0.0f;

	// 粒子の座標
	float4 Pos0 = tex2Dlod(CoordSmp, float4(texCoord, 0, 0));

	// 経過時間
	float etime = Pos0.w - 1.0f;

	// 粒子の大きさ
	pos.xy *= ParticleSize * 10.0f;

	// 粒子の回転
#if USE_BILLBOARD == 0
//	pos.xyz = mul(pos.xyz, RoundMatrix(Index0, etime) );
	pos.xyz = mul(pos.xyz, FacingRoundMatrix(Index0, etime, Pos0) );
#else
	pos.xyz = mul(pos.xyz, RoundMatrixZ(Index0, etime) );
	pos.xyz = mul(pos.xyz, BillboardMatrix);
#endif

	pos.xyz += Pos0.xyz;
	pos.xyz *= step(0.001f, etime);
	pos.w = 1.0f;

	Out.Pos = mul( pos, ViewProjMatrix );
	Out.CurrentPos = Out.Pos;

	Out.LastPos = ClonePos(getVertexPosBuf((float)(IN.Index + voffset + RepeatIndex * TEX_HEIGHT * 4)));
	Out.LastPos = mul(Out.LastPos, lastMatrix);

	// 粒子の乗算色
	float alpha = step(0.001f, etime) * smoothstep(-ParticleLife, -ParticleLife*ParticleDecrement, -etime) * AcsTr;
	#if !defined(ENABLE_BOUNCE) || ENABLE_BOUNCE == 0
	alpha *= smoothstep(FloorFadeMin, FloorFadeMax, Pos0.y);
	#endif
	Out.Color = float4(1,1,1, alpha );

	#if TRANS_TEXTURE!=0
	int texIndex = Index0 % (TEX_PARTICLE_XNUM * TEX_PARTICLE_YNUM);
	int tex_i = texIndex % TEX_PARTICLE_XNUM;
	int tex_j = texIndex / TEX_PARTICLE_XNUM;
	Out.Tex = float2((IN.Tex.x + tex_i)/TEX_PARTICLE_XNUM, (IN.Tex.y + tex_j)/TEX_PARTICLE_YNUM);
	#endif
	
	return Out;
}


float4 Velocity_PS( VS_OUTPUT IN , uniform bool useToon , uniform bool isEdge) : COLOR0
{
	float4 lastPos, ViewPos;
	lastPos = IN.LastPos;
	ViewPos = IN.CurrentPos;

	float alpha = IN.Color.a;
	
	//深度
	float mb_depth = ViewPos.z;
	//float mb_depth = ViewPos.z / ViewPos.w;

	#if TRANS_TEXTURE!=0
			alpha *= tex2D(ParticleTexSamp,IN.Tex).a;
	#endif
	
	//速度算出
	float2 Velocity = ScreenPosRasterize(ViewPos) - ScreenPosRasterize(lastPos);
	Velocity.x *= ViewportAspect;
	
	//出現時、速度キャンセル
	Velocity *= !Appear || MotionBlockerEnable || CameraBlockerEnable;
	
	//速度を色として出力
	Velocity = Velocity * 0.25 + 0.5;
	
	alpha = (alpha >= TransparentThreshold);

	float4 Color = float4(Velocity, mb_depth, alpha);

	return Color;
	
}


/////////////////////////////////////////////////////////////////////////////////////
//情報バッファの作成

struct VS_OUTPUT2 {
	float4 Pos: POSITION;
	float2 texCoord: TEXCOORD0;
};


VS_OUTPUT2 DrawMatrixBuf_VS(float4 Pos: POSITION, float2 Tex: TEXCOORD) {
	VS_OUTPUT2 Out;
	
	Out.Pos = Pos;
	Out.texCoord = Tex;
	return Out;
}

float4 DrawMatrixBuf_PS(float2 texCoord: TEXCOORD0) : COLOR {
	
	int dindex = (int)((texCoord.x * INFOBUFSIZE) + 0.2); //テクセル番号
	float4 Color;
	
	if(dindex < 4){
		Color = MotionBlockerEnable ? lastWorldMatrix[(int)dindex] : WorldMatrix[(int)dindex]; //行列を記録
		
	}else if(dindex < 8){
		Color = CameraBlockerEnable ? lastViewMatrix[(int)dindex - 4] : ViewProjMatrix[(int)dindex - 4];
		
	}else{
		Color = float4(stime, ftime, 0.5, 1);
	}
	
	return Color;
}


/////////////////////////////////////////////////////////////////////////////////////
//頂点座標バッファの作成

struct VS_OUTPUT3 {
	float4 Pos: POSITION;
	float4 BasePos: TEXCOORD0;
};

VS_OUTPUT3 DrawVertexBuf_VS(MMM_SKINNING_INPUT IN)
{
	VS_OUTPUT3 Out;

	int i = RepeatIndex;

	float findex = (float)(IN.Index + voffset + RepeatIndex * TEX_HEIGHT * 4);
	float2 tpos = 0;
	tpos.x = modf(findex / VPBUF_WIDTH, tpos.y);
	tpos.y /= VPBUF_HEIGHT;
	
	//バッファ出力
	Out.Pos.xy = (tpos * 2 - 1) * float2(1,-1); //テクスチャ座標→頂点座標変換
	Out.Pos.zw = float2(0, 1);
	
	Out.Pos.x += MotionBlockerEnable * -100; //記録の可否
	
	//ラスタライズなしでピクセルシェーダに渡す
	float4 pos = GETPOS;

	// パーティクル位置の計算
	int j = round( pos.z * 100.0f );
	int Index0 = i * TEX_HEIGHT + j;
	float2 texCoord = float2((i+0.5f)/TEX_WIDTH, (j+0.5f)/TEX_HEIGHT);
	pos.z = 0.0f;
	float4 Pos0 = tex2Dlod(CoordSmp, float4(texCoord, 0, 0));
	float etime = Pos0.w - 1.0f;
	pos.xy *= ParticleSize * 10.0f;
#if USE_BILLBOARD == 0
//	pos.xyz = mul(pos.xyz, RoundMatrix(Index0, etime) );
	pos.xyz = mul(pos.xyz, FacingRoundMatrix(Index0, etime, Pos0) );
#else
	pos.xyz = mul(pos.xyz, RoundMatrixZ(Index0, etime) );
	pos.xyz = mul(pos.xyz, BillboardMatrix);
#endif
	pos.xyz += Pos0.xyz;
	pos.xyz *= step(0.001f, etime);
	pos.w = 1.0f;

	Out.BasePos = pos;

	return Out;
}

float4 DrawVertexBuf_PS( VS_OUTPUT3 IN ) : COLOR0
{
	//座標を色として出力
	return IN.BasePos;
}

/////////////////////////////////////////////////////////////////////////////////////
//頂点座標バッファのコピー

VS_OUTPUT2 CopyVertexBuf_VS(float4 Pos: POSITION, float2 Tex: TEXCOORD) {
	VS_OUTPUT2 Out;
  
	Out.Pos = Pos;
	Out.texCoord = Tex + VPBufOffset;
	return Out;
}

float4 CopyVertexBuf_PS(float2 texCoord: TEXCOORD0) : COLOR {
	return tex2D(VertexPosBuf, texCoord);
}

/////////////////////////////////////////////////////////////////////////////////////


float4 ClearColor = {0,0,0,1};
float ClearDepth  = 1.0;


// オブジェクト描画用テクニック

stateblock PMD_State = stateblock_state
{
	DestBlend = InvSrcAlpha; SrcBlend = SrcAlpha; //加算合成のキャンセル
	AlphaBlendEnable = false;
	AlphaTestEnable = true;
	ZWRITEENABLE = FALSE;
	CullMode = NONE;
	VertexShader = compile vs_3_0 Velocity_VS(true);
	PixelShader  = compile ps_3_0 Velocity_PS(true, false);
};

stateblock Edge_State = stateblock_state
{
	
	DestBlend = InvSrcAlpha; SrcBlend = SrcAlpha; //加算合成のキャンセル
	AlphaBlendEnable = false;
	AlphaTestEnable = true;
	
	VertexShader = compile vs_3_0 Velocity_VS(true);
	PixelShader  = compile ps_3_0 Velocity_PS(true, true);
};


stateblock Accessory_State = stateblock_state
{
	
	DestBlend = InvSrcAlpha; SrcBlend = SrcAlpha; //加算合成のキャンセル
	AlphaBlendEnable = false;
	AlphaTestEnable = true;
	
	VertexShader = compile vs_3_0 Velocity_VS(false);
	PixelShader  = compile ps_3_0 Velocity_PS(false, false);
};

stateblock makeMatrixBufState = stateblock_state
{
	AlphaBlendEnable = false;
	AlphaTestEnable = false;
	VertexShader = compile vs_3_0 DrawMatrixBuf_VS();
	PixelShader  = compile ps_3_0 DrawMatrixBuf_PS();
};


stateblock makeVertexBufState = stateblock_state
{
	DestBlend = InvSrcAlpha; SrcBlend = SrcAlpha; //加算合成のキャンセル
	FillMode = POINT;
	CullMode = NONE;
	ZEnable = false;
	AlphaBlendEnable = false;
	AlphaTestEnable = false;
	
	VertexShader = compile vs_3_0 DrawVertexBuf_VS();
	PixelShader  = compile ps_3_0 DrawVertexBuf_PS();
};

stateblock copyVertexBufState = stateblock_state
{
	AlphaBlendEnable = false;
	AlphaTestEnable = false;
	VertexShader = compile vs_3_0 CopyVertexBuf_VS();
	PixelShader  = compile ps_3_0 CopyVertexBuf_PS();
};

////////////////////////////////////////////////////////////////////////////////////////////////

technique MainTec0_0 < 
	string MMDPass = "object"; 
	bool UseToon = false;
	string Script =
		
		"RenderColorTarget=MatrixBufTex;"
		"RenderDepthStencilTarget=DepthBufferMB;"
		"Pass=DrawMatrixBuf;"
		
		"RenderColorTarget=VertexPosBufTex2;"
		"RenderDepthStencilTarget=DepthBuffer;"
		"Pass=CopyVertexBuf;"
		
		"RenderColorTarget=;"
		"RenderDepthStencilTarget=;"
			"LoopByCount=RepeatCount;"
			"LoopGetIndex=RepeatIndex;"
			"Pass=DrawObject;"
		"LoopEnd=;"
		
		"RenderColorTarget=VertexPosBufTex;"
		"RenderDepthStencilTarget=DepthBuffer;"
			"LoopByCount=RepeatCount;"
			"LoopGetIndex=RepeatIndex;"
				"Pass=DrawVertexBuf;"
			"LoopEnd=;"
		
	;
> {
	pass DrawMatrixBuf < string Script = "Draw=Buffer;";>	{ StateBlock = (makeMatrixBufState); }
	pass CopyVertexBuf < string Script = "Draw=Buffer;";>	{ StateBlock = (copyVertexBufState); }
	pass DrawObject	< string Script = "Draw=Geometry;";> { StateBlock = (PMD_State);  }
	pass DrawVertexBuf < string Script = "Draw=Geometry;";> { StateBlock = (makeVertexBufState); }
}



////////////////////////////////////////////////////////////////////////////////////////////////

technique MainTec0_0SS < 
	string MMDPass = "object_ss"; 
	bool UseToon = false;
	string Script =
		
		"RenderColorTarget=MatrixBufTex;"
		"RenderDepthStencilTarget=DepthBufferMB;"
		"Pass=DrawMatrixBuf;"
		
		"RenderColorTarget=VertexPosBufTex2;"
		"RenderDepthStencilTarget=DepthBuffer;"
		"Pass=CopyVertexBuf;"
		
		"RenderColorTarget=;"
		"RenderDepthStencilTarget=;"
			"LoopByCount=RepeatCount;"
			"LoopGetIndex=RepeatIndex;"
			"Pass=DrawObject;"
		"LoopEnd=;"

		"RenderColorTarget=VertexPosBufTex;"
		"RenderDepthStencilTarget=DepthBuffer;"
			"LoopByCount=RepeatCount;"
			"LoopGetIndex=RepeatIndex;"
				"Pass=DrawVertexBuf;"
			"LoopEnd=;"
		
	;
> {
	pass DrawMatrixBuf < string Script = "Draw=Buffer;";>	{ StateBlock = (makeMatrixBufState); }
	pass CopyVertexBuf < string Script = "Draw=Buffer;";>	{ StateBlock = (copyVertexBufState); }
	pass DrawObject	< string Script = "Draw=Geometry;";> { StateBlock = (PMD_State);  }
	pass DrawVertexBuf < string Script = "Draw=Geometry;";> { StateBlock = (makeVertexBufState); }
}


technique EdgeTec < string MMDPass = "edge";> {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}

///////////////////////////////////////////////////////////////////////////////////////////////




// 多光源
#define	DECL_LIGHT(_ctrlName, _name)	\
	bool _name##_exist		: CONTROLOBJECT < string name = _ctrlName;>; \
	float4x4 _name##_matW	: CONTROLOBJECT < string name = _ctrlName;>; \
	float _name##_r : CONTROLOBJECT < string name = _ctrlName; string item = "Rx"; >; \
	float _name##_g : CONTROLOBJECT < string name = _ctrlName; string item = "Ry"; >; \
	float _name##_b : CONTROLOBJECT < string name = _ctrlName; string item = "Rz"; >; \
	float _name##_si : CONTROLOBJECT < string name = _ctrlName; string item = "Si"; >; \
	float _name##_tr : CONTROLOBJECT < string name = _ctrlName; string item = "Tr"; >; \
	static float _name##_range = 10.0 / _name##_si; \
	static float3 _name##_color = float3(_name##_r, _name##_g, _name##_b) * _name##_exist * _name##_tr * 16.0;

DECL_LIGHT("PPointLight1.x", PointLight1)
DECL_LIGHT("PPointLight2.x", PointLight2)
DECL_LIGHT("PPointLight3.x", PointLight3)


inline float3 CalcFresnel(float NV, float3 F0)
{
	float fc = pow(max(1 - NV, 1e-5), 5);
	return (1.0 - F0) * fc + F0;
}

inline float CalcLightFalloff(float distance, float invRadius)
{
	// 適当なフォールオフ
	float d = distance * invRadius;
	float n = max(1.0 - pow(d, 4), 0);
	return n / (d * d + 1.0);
}

inline float CalcPointLight(float3 pos, float3 N, float4x4 mat, float range)
{
	float3 l = mat._41_42_43 - pos;
	float falloff = CalcLightFalloff(length(l), range);
	return max(dot(N, normalize(l)), 0) * falloff;
}

inline float3 CalcMultiLight(float3 pos, float3 N)
{
	float d1 = CalcPointLight(pos, N, PointLight1_matW, PointLight1_range);
	float d2 = CalcPointLight(pos, N, PointLight2_matW, PointLight2_range);
	float d3 = CalcPointLight(pos, N, PointLight3_matW, PointLight3_range);
	return PointLight1_color * d1 + PointLight2_color * d2 + PointLight3_color * d3;
}


float3 CalcPointLightSpecular(float3 pos, float4x4 mat, float range, float3 N, float3 V, float a, float3 f0)
{
	float3 l = mat._41_42_43 - pos;
	float falloff = CalcLightFalloff(length(l), range);

	// TODO: 距離に応じて、smoothnessを弄る

	float3 L = normalize(l);
	float3 H = normalize(L + V);

	float NH = saturate(dot(N, H));
	float NL = saturate(dot(N, L));
	float LH = saturate(dot(L, H));

	float CosSq = (NH * NH) * (a - 1) + 1;
	float D = a / (CosSq * CosSq); // MEMO: 正規化項の1.0/PIを削っている。

	float3 F = CalcFresnel(LH, f0);

	float k2 = a * a * 0.25;	// = (a * 0.5)^2
	float vis = (1.0/4.0) / (LH * LH * (1 - k2) + k2);
	return saturate(NL * D * F * vis) * falloff;
}

inline float3 CalcMultiLightSpecular(float3 pos, float3 N, float3 V, float smoothness, float3 f0)
{
	float a = max(1 - smoothness, 1e-3);
	a *= a;

	float3 d1 = CalcPointLightSpecular(pos, PointLight1_matW, PointLight1_range, N, V, a, f0);
	float3 d2 = CalcPointLightSpecular(pos, PointLight2_matW, PointLight2_range, N, V, a, f0);
	float3 d3 = CalcPointLightSpecular(pos, PointLight3_matW, PointLight3_range, N, V, a, f0);
	return PointLight1_color * d1 + PointLight2_color * d2 + PointLight3_color * d3;
}



// 反射度を計算する
inline float3 CalcReflectance(float3 mat, float3 N, float3 V, float3 f0)
{
	float metalness = mat.x;
	float smoothness = mat.y;
	float intensity = mat.z;

	float NV = abs(dot(N,V));
	float3 f = CalcFresnel(NV, f0);
	float roughness = max(1.0 - smoothness, 1.0e-4);
	float g = 1.0 / pow(2, roughness * 4.0); // ラフなほど暗くなる
	return saturate(f) * g * intensity;
}

inline float CalcRimLight(float3 L, float3 N, float3 V, float sss, float thick)
{
	const float LTDistortion = 0.2;	// 光源の向きを法線側に曲げる率
	const float LTPower = 5.0;
	float3 LTView = -V + N * LTDistortion;	// リムライト
	float rimLight = exp2(saturate(dot(V, -LTView)) * LTPower - LTPower) * 0.1;

	// 逆光状態での光の透過
	float inl = max(-dot(N,L),0);
	rimLight += min(exp(-thick * (2.0 - sss) * ThicknessScale - 1e-4), inl) * inl * max(-dot(L,V), 0);

	return rimLight * sss;
}

inline float CalcDiffuse(float3 L, float3 N, float3 V, float smoothness)
{
	float roughness = (1 - smoothness);
	float sigma2 = roughness * roughness;

	// A tiny improvement of Oren-Nayar reflectance model
	float NL = saturate(dot(N ,L));
	float NV = abs(dot(N, V)+1e-5);
	float s = max(dot(L,V),0) - NL * NV;
	float st = (s <= 0.0) ? s : (s / (max(NL,NV)+1e-6));
//	float A = 1.0 / ((PI * 0.5 - 2.0/3.0) * sigma2 + PI);
	float A = 1 / ((0.5 - 2.0/3.0/PI) * sigma2 + 1);  // MEMO: 正規化分を戻す。
	float B = sigma2 * A;
	float result = NL * (A + B * st);

	return saturate(result);
}


// SSAOと環境マップを合成
float4 PS_SSAOEnv( float4 Tex: TEXCOORD0 ) : COLOR
{
	float2 texCoord = Tex.zw;

	float4 mat = tex2D( MaterialMap, texCoord );
	float metalness = mat.x;
	float smoothness = mat.y;
	float sss = saturate(mat.w * (1 - metalness));

	float3 WPos;
	float3 N;
	float Depth;
	GetWND(texCoord, WPos, N, Depth);
	float3 V = normalize(CameraPosition - WPos);
	float3 L = -LightDirection;

	float2 shadow = tex2D(ShadowmapSamp, texCoord).xy;

	// 環境マップから環境光を取得
	float4 ambientOccu = GetSSAOFull(texCoord);
	ambientOccu *= lerp(AmbientScale, ReflectionScale, metalness);
	// 鏡面反射
	float3 R = normalize(reflect(-V, N));

	float3 refcol = GetEnvColor(R, smoothness);
	#if defined(SPECULAR_AWARE_AMBIENT) && SPECULAR_AWARE_AMBIENT > 0
	refcol *= tex2D( ColorMap, texCoord).rgb;
	#endif
	float rl = max(dot(R,L),0);
	refcol *= lerp(1, shadow.x, rl * rl * 0.5);
		// 光の方向と一致しているならシャドウマップの影響を受ける
	// 拡散反射
	float3 ambient = GetEnvColor(N, 0.1);
	#if defined(RSMCount) && RSMCount > 0
	float4 rsmCol = GetRSMColor(texCoord);
	ambient *= (1.0 - rsmCol.w);	// 反射する≒環境光が遮蔽される。
	ambient += rsmCol.rgb * LightColor;
	#endif
	ambient = lerp(ambient, refcol, metalness) * ambientOccu.w + ambientOccu.rgb;

	// 直接光 + シャドウマップ
	float diffuse = CalcDiffuse(L, N, V, smoothness);
	// diffuse = min(diffuse, shadow.x);
	diffuse = diffuse * shadow.x;
	// SSS用リムライト
	diffuse += CalcRimLight(L, N, V, sss, shadow.y);

	float3 diffuse3 = diffuse * LightColor + CalcMultiLight(WPos, N);
	float3 light = saturate(diffuse3 * (1.0 - metalness) + ambient);

	#if SSSBlurCount > 0
	// SSS用の重み：距離と画面サイズの影響を受ける
	float weight = sss * saturate(ViewportSize.y * 0.05 / Depth);
	return float4(light, saturate(weight * SSSScale));
	#else
	return float4(light, shadow.x);
	#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////
// Blur

#if SSSBlurCount > 0
// SSS用のボカし

#define SssKernelSize	0.2 // ブラー径 0.2MMD ≒ 2cm
static float SssKernelSizeScale = abs(SssKernelSize * matP._11 * 0.5) / matP._34
	 / ((SSSBlurCount + 1.0) * (SSSBlurCount + 1.0)) * ViewportAspect;

static float2 SSSJitter[] = {
	float2(1,0), float2(1,1)/1.41421356,
	float2(1,-1)/1.41421356, float2(0,1)
};

float4 PS_BlurSSS1( float4 Tex: TEXCOORD0, uniform sampler smp) : COLOR
{
	float2 texCoord = Tex.zw;
	float4 BaseColor = tex2D( smp, texCoord);
	float sss = BaseColor.w;

	float4 nd0 = GetNormalDepthRaw(texCoord);
	float depth = nd0.w;
	float depthRate = 1.0 / max(depth, 1.0);

	int2 iuv = floor(texCoord * ViewportSize);
	float angleMul = 7.0 / SSSBlurCount * (PI * 2.0);
	float angleAdd = GetJitterOffset(iuv) * (PI * 2.0);
	float2 radiusMul = SssKernelSizeScale / max(depth, 1.0) * sss;
	float2 radiusAdd = SampStep;

	float4 Color = float4(BaseColor.rgb, 1);
	for(int i = 0; i < SSSBlurCount; i++)
	{
		float t = (i + 0.5) * (i + 0.5);

		float2 sc;
		sincos(i * angleMul + angleAdd, sc.x, sc.y);
		float2 uv = sc * (t * radiusMul + SampStep.x) + texCoord;
		float4 nd1 = GetNormalDepthRawLod(uv.xy);
		float4 col1 = tex2D(smp, uv);

		float t2 = t * (-0.5 / ((SSSBlurCount + 1) * (SSSBlurCount + 1)));
		float w = CalcBlurWeight(nd0, nd1, t2, depthRate);
		Color += float4(col1.rgb, 1) * w;
	}

	Color.rgb = lerp(BaseColor.rgb, Color.rgb / Color.w, sss);
	Color.w = sss;

	return Color;
}

float4 PS_BlurSSS2( float4 Tex: TEXCOORD0, uniform sampler smp) : COLOR
{
	float2 texCoord = Tex.zw;
	float4 Color = tex2D(smp, texCoord );

#if !defined(TEST_DISABLE_BLUR)
	float4 Color0 = Color;
	float sss = Color.w;

	float4 nd0 = GetNormalDepthRaw(texCoord);
	float depth = nd0.w;
	float depthRate = 1.0 / max(depth, 1.0);

	Color = float4(Color.rgb, 1);

	float4 c;
	float4 nd1;
	#define SSS_BLUR_SUB(ofsx, ofsy, weight)	\
		c = tex2D(smp, SampStep * float2(ofsx, ofsy) + texCoord);	\
		nd1 = GetNormalDepthRaw(SampStep * float2(ofsx, ofsy) + texCoord);	\
		Color += float4(c.rgb, 1) * CalcBlurWeight(nd0, nd1, 0, depthRate) * weight;

	SSS_BLUR_SUB(-1,-1, 0.25);
	SSS_BLUR_SUB( 0,-1, 0.5);
	SSS_BLUR_SUB( 1,-1, 0.25);
	SSS_BLUR_SUB(-1, 0, 0.5);
	SSS_BLUR_SUB( 1, 0, 0.5);
	SSS_BLUR_SUB(-1, 1, 0.25);
	SSS_BLUR_SUB( 0, 1, 0.5);
	SSS_BLUR_SUB( 1, 1, 0.25);
/*
	SSS_BLUR_SUB( 0,-2, 0.25);
	SSS_BLUR_SUB(-2, 0, 0.25);
	SSS_BLUR_SUB( 2, 0, 0.25);
	SSS_BLUR_SUB( 0, 2, 0.25);
*/

	Color.rgb = lerp(Color0.rgb, Color.rgb / Color.w, sss);
#endif

		float shadow = tex2D(ShadowmapSamp, texCoord).x;
		Color.w = shadow;

	return Color;
}
#endif


////////////////////////////////////////////////////////////////////////////////////////////////
// Blur



////////////////////////////////////////////////////////////////////////////////////////////////
//
//
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
// パラメータ宣言

#include "../ikPolishShader.fxsub"
#include "shadowCommons.fxsub"

#define BORDER_RANGE	2		// 1/4画面の境界


////////////////////////////////////////////////////////////////////////////////////////////////

// 座法変換行列
float4x4 matWVP				: WORLDVIEWPROJECTION;
float4x4 matWV				: WORLDVIEW;
float4x4 matW				: WORLD;

static float4x4 lightMatWVP = mul(mul(matW, lightMatV), lightMatP);


float2 ViewportSize : VIEWPORTPIXELSIZE;


float4   MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;
bool opadd;		// 加算合成フラグ

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
	texture = <ObjectTexture>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
	ADDRESSU  = WRAP;	ADDRESSV  = WRAP;
};

shared texture LightMapRT : OFFSCREENRENDERTARGET;

sampler LightSamp = sampler_state {
	texture = <LightMapRT>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
//	MinFilter = NONE;	MagFilter = NONE;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};


////////////////////////////////////////////////////////////////////////////////////////////////

// テクスチャ座標がどれだけエッジに近いか?
// テクスチャ座標の範囲は[-1,1]
inline float CalcEdgeFalloff(float2 texCoord)
{
	const float m = (SHADOW_TEX_SIZE * 0.5 / WARP_RANGE);
	const float a = (BORDER_RANGE * 1.0 / WARP_RANGE);
	float2 falloff = abs(texCoord) * (-m * 4.0) + (m - a);
	return saturate(min(falloff.x, falloff.y));
}

inline float4 CalcCascadePPos(float2 uv, float2 offset, float index)
{
	// u, v, カスケードのインデックス, 重み を格納。
	return float4(uv + ((0.5 + offset) * 0.5 + (0.5 / SHADOW_TEX_SIZE)), index, CalcEdgeFalloff(uv));
}

#define TEX2D(samp, uv)		tex2Dlod(samp, float4(uv, 0,0))
//#define TEX2D(samp, uv)		tex2D(samp, uv)

//#define CalcLight(casterDepth, receiverDepth, rate)	(casterDepth >= receiverDepth)
//#define CalcLight(casterDepth, receiverDepth, rate)	saturate((casterDepth - receiverDepth) * (LightZMax * 10.0) + 1.0)

#define CalcLight(casterDepth, receiverDepth, rate)	(1.0 - saturate(max(receiverDepth - casterDepth, 0) * rate))


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウOFF）

struct DrawObjectNoShadow_OUTPUT {
	float4 Pos	  : POSITION;	 // 射影変換座標
	float3 Tex	  : TEXCOORD0;	// テクスチャ
};

DrawObjectNoShadow_OUTPUT DrawObjectNoShadow_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0, uniform bool useTexture)
{
	DrawObjectNoShadow_OUTPUT Out = (DrawObjectNoShadow_OUTPUT)0;
	Out.Pos = mul( Pos, matWVP );
	Out.Tex.xy = Tex.xy;
	Out.Tex.z = mul(Pos, matWV).z; // カメラからの距離
	return Out;
}

float4 DrawObjectNoShadow_PS(DrawObjectNoShadow_OUTPUT IN, uniform bool useTexture) : COLOR
{
	clip( !opadd - 0.001f );	// 加算半透明なら無視する
	float alpha = MaterialDiffuse.a;
	alpha *= (abs(MaterialDiffuse.a - 0.98) >= 0.01); // ??
	if ( useTexture ) alpha *= tex2D( ObjTexSampler, IN.Tex.xy ).a;
	clip(alpha - RecieverAlphaThreshold);
	float distanceFromCamera = IN.Tex.z;
	return float4(1, 0.0, distanceFromCamera, alpha);
}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウON）

struct DrawObject_OUTPUT {
	float4 Pos	  : POSITION;
	float4 Tex	  : TEXCOORD0;
	float3 Normal	: TEXCOORD1;

	float4 LightPPos01	: TEXCOORD2;
	float4 LightPPos23	: TEXCOORD3;

	float4 PPos		: TEXCOORD4;
};

DrawObject_OUTPUT DrawObject_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0, uniform bool useTexture)
{
	DrawObject_OUTPUT Out = (DrawObject_OUTPUT)0;

	Out.PPos = Out.Pos = mul( Pos, matWVP );
	Out.Normal = mul(Normal, (float3x3)matW);

	float4 PPos = mul(Pos, lightMatWVP);
	PPos /= PPos.w;

	const float2 scale = float2(0.25, -0.25);
	Out.LightPPos01.xy = (PPos.xy * lightParam[0].xy + lightParam[0].zw);
	Out.LightPPos01.zw = (PPos.xy * lightParam[1].xy + lightParam[1].zw);
	Out.LightPPos23.xy = (PPos.xy * lightParam[2].xy + lightParam[2].zw);
	Out.LightPPos23.zw = (PPos.xy * lightParam[3].xy + lightParam[3].zw);
	Out.LightPPos01 *= scale.xyxy;
	Out.LightPPos23 *= scale.xyxy;

	Out.Tex.xy = Tex.xy;
	Out.Tex.z = mul(Pos, matWV).z;	// カメラからの距離
	Out.Tex.w = PPos.z;				// ライトからの距離

	return Out;
}



float4 DrawObject_PS(DrawObject_OUTPUT IN, uniform bool useTexture) : COLOR
{
	float alpha = MaterialDiffuse.a;
	if ( useTexture ) alpha *= tex2D( ObjTexSampler, IN.Tex.xy ).a;
	clip(alpha - RecieverAlphaThreshold);

	int2 iuv = (IN.PPos.xy / IN.PPos.w + 1) * 0.5 * ViewportSize;
	float jitter = GetJitterOffset(iuv);

	float distanceFromCamera = IN.Tex.z;

	float3 N = normalize(IN.Normal);
	float dotNL = dot(N,-LightDirection);

	#define CALC_PPOS(ppos, u, v, scale) CalcCascadePPos(ppos, float2(u,v), scale*0.5/SHADOW_TEX_SIZE);
	float4 lightPPos0 = CALC_PPOS(IN.LightPPos01.xy, 0, 0, 1.0 );
	float4 lightPPos1 = CALC_PPOS(IN.LightPPos01.zw, 1, 0, 0.75);
	float4 lightPPos2 = CALC_PPOS(IN.LightPPos23.xy, 0, 1, 0.5 );
	float4 lightPPos3 = CALC_PPOS(IN.LightPPos23.zw, 1, 1, 0.25);
		// 最後はPCFのステップサイズ。本来は1/1,1/2,1/4,1/8になる?

	float4 texCoord0 = lightPPos3;
	float4 texCoord1 = 0;
	if (lightPPos2.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos2; }
	if (lightPPos1.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos1; }
	if (lightPPos0.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos0; }
/*
	float casterDepth0 = TEX2D(LightSamp, texCoord0.xy).x;
	float casterDepth1 = TEX2D(LightSamp, texCoord1.xy).x;
	float casterDepth = lerp(lerp(1, casterDepth1, texCoord1.w), casterDepth0, texCoord0.w);
*/
	texCoord0 = (texCoord0.w > jitter * 0.9) ? texCoord0 : texCoord1;
	float casterDepth0 = TEX2D(LightSamp, texCoord0.xy).x;
	float casterDepth = lerp(1, casterDepth0, texCoord0.w);

	float receiverDepth = IN.Tex.w;

	// 深度バイアス：適当
	float bias = IN.Tex.z * (1.0 / LightZMax);
	float depthSlope = min(abs( ddx( receiverDepth ) ) + abs( ddy( receiverDepth ) ), 0.1);
	float lightSlpoe = min(1.0 / (abs(dotNL) + 1.0e-4), 8.0) * (1.0 / LightZMax);
	bias = (bias + depthSlope + lightSlpoe) * BIAS_SCALE;
	receiverDepth -= bias;

	float sdrate = 30000.0 / 4.0 - 0.05;
	float light = CalcLight(casterDepth.x, receiverDepth, sdrate);
	float dist = receiverDepth - casterDepth.x;
	// float blurStep = clamp(dist * (LightZMax / 50.0), 0.125, 1.0);
	float thick = max(dist * LightZMax, 0);

	// PCF
	float light_sub = 0;
//	const float s = texCoord0.z;
	const float s = 0.5 / SHADOW_TEX_SIZE;
	texCoord0.xy += (jitter * 2.0 - 1.0) * s;

	#if SHADOW_QUALITY >= 2
	const float scale = 1.0 / (1+4+4*0.75);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( s, s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2(-s, s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( s,-s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2(-s,-s)).x, receiverDepth, sdrate);
	light_sub *= 0.75;
	#else
	const float scale = 1.0 / (1+4);
	#endif
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( s, 0)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2(-s, 0)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( 0, s)).x, receiverDepth, sdrate);
	light_sub += CalcLight(TEX2D(LightSamp, texCoord0.xy + float2( 0,-s)).x, receiverDepth, sdrate);

	// エリア外だと、PCFの結果が当てにならない
	float lightPCF = (light + light_sub) * scale;
	light = lerp(light, lightPCF, texCoord0.w);

	light = light * light;

	// light = min(light, dotNL);
	// light = min(light, dotNL * 0.5 + 0.5);
	light = min(light, (dotNL > 0.0));
	return float4(light, thick, distanceFromCamera, alpha);
}


#define OBJECT_NO_SHADOW_TEC(name, mmdpass, tex) \
	technique name < string MMDPass = mmdpass; bool UseTexture = tex; \
	> { \
		pass DrawObject { \
			VertexShader = compile vs_3_0 DrawObjectNoShadow_VS(tex); \
			PixelShader  = compile ps_3_0 DrawObjectNoShadow_PS(tex); \
		} \
	}

#define OBJECT_TEC(name, mmdpass, tex) \
	technique name < string MMDPass = mmdpass; bool UseTexture = tex; \
	> { \
		pass DrawObject { \
			VertexShader = compile vs_3_0 DrawObject_VS(tex); \
			PixelShader  = compile ps_3_0 DrawObject_PS(tex); \
		} \
	}

OBJECT_NO_SHADOW_TEC(MainTec2, "object", false)
OBJECT_NO_SHADOW_TEC(MainTec3, "object", true)
//technique MainTec0 < string MMDPass = "object";  > {}

OBJECT_TEC(MainTecBS2, "object_ss", false)
OBJECT_TEC(MainTecBS3, "object_ss", true)


technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}



///////////////////////////////////////////////////////////////////////////////////////////////

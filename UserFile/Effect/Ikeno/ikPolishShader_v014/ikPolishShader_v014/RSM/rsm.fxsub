

////////////////////////////////////////////////////////////////////////////////////////////////
// RSM

#if defined(RSMCount) && RSMCount > 0

// ライト座標系での奥行きを出力
texture RSMLightMapRT : OFFSCREENRENDERTARGET <
	string Description = "OffScreen RenderTarget for ikPolish";
	int Width = RSM_TEX_SIZE;
	int Height = RSM_TEX_SIZE;
	string Format = "A16B16G16R16F";	// 法線+深度
	float4 ClearColor = { 0, 0, 0, 0 };
	float ClearDepth = 1.0;
	int MipLevels = 1;
	string DefaultEffect = 
		"self = hide;"
		"*.pmd = RSM/RSMLightBuffer.fx;"
		"*.pmx = RSM/RSMLightBuffer.fx;"
		"*.x =   RSM/RSMLightBuffer.fx;"
		"* = hide;" ;
>;

sampler RSMLightSamp = sampler_state {
	texture = <RSMLightMapRT>;
	MinFilter = POINT; MagFilter = POINT;	MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = float4(0,0,0,0);
};

shared texture PPPRSMAlbedoMapRT : RENDERCOLORTARGET <
	int Width = RSM_TEX_SIZE;
	int Height = RSM_TEX_SIZE;
	string Format = "A8R8G8B8" ;
	int MipLevels = 1;
>;
sampler RSMAlbedoSamp = sampler_state {
	texture = <PPPRSMAlbedoMapRT>;
	MinFilter = POINT; MagFilter = POINT;	MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = float4(0,0,0,0);
};

texture RSMWorkMap : RENDERCOLORTARGET <
	float2 ViewPortRatio = {WORKSPACE_SCALE, WORKSPACE_SCALE};
	string Format = ReflectionTexFormat;
	int MipLevels = 1;
>;

sampler RSMWorkSamp = sampler_state {
	texture = <RSMWorkMap>;
	MinFilter = POINT; MagFilter = POINT;	MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = float4(0,0,0,0);
};
sampler RSMWorkLinear = sampler_state {
	texture = <RSMWorkMap>;
	MinFilter = LINEAR; MagFilter = LINEAR;	MipFilter = LINEAR;
	AddressU  = CLAMP;	AddressV = CLAMP;
};


//-----------------------------------------------------------------------------
//

float3 TargetPosition : CONTROLOBJECT < string name = "(self)"; >;
#include	"./RSM/rsm_common.fxsub"


// シャドウマップの深度からWPosの再構築＆比較
inline float3 ReconstructWPosFromLight(float2 texCoord, float depth)
{
//	float2 uv = (texCoord * 2 - 1.0) * float2(1,-1) * 0.5;
	float2 uv = texCoord * float2(1,-1) - (float2(1,-1) * 0.5);
	return mul(float4(uv * RSM_ShadowSize, depth, 1), lightInvMatV).xyz;
}



//-----------------------------------------------------------------------------
//
float4 PS_CalcRSM( float4 Tex: TEXCOORD0) : COLOR
{
	float2 texCoord = Tex.zw;

	float3 wpos0;
	float3 n0;
	float depth0;
	GetWND(texCoord, wpos0, n0, depth0);

	int2 iuv = floor(texCoord * ViewportSize * WORKSPACE_SCALE);

	float4 lightPPos = mul(float4(wpos0, 1), lightMatVP);
	texCoord = lightPPos.xy / lightPPos.w * float2(0.5, -0.5) + 0.5;
	//return tex2Dlod(RSMAlbedoSamp, float4(texCoord, 0,0));

	float angleMul = 7.0 / RSMCount * (PI * 2.0);
	float angleAdd = GetJitterOffset(iuv) * (PI * 2.0);
	float radiusMul = RSMRadius * 1.0 / (RSM_ShadowSize * RSMCount);
	float radiusAdd = 1.0 / RSM_TEX_SIZE;
	float scale = RSMRadius * RSMRadius * 2.0 / (RSMCount * RSMCount);

	float4 bounce = 0;

	// [unroll]
	for(int j = 0; j < RSMCount; j++)
	{
		float2 sc;
		sincos(j * angleMul + angleAdd, sc.x, sc.y);
		float2 ppos = sc * (j * radiusMul + radiusAdd) + texCoord;
		float4 lightND0 = tex2Dlod(RSMLightSamp, float4(ppos, 0,0));

		float3 n1 = lightND0.xyz;
		float depth1 = lightND0.w;
		float3 wpos1 = ReconstructWPosFromLight(ppos, depth1);

		float3 v = wpos1 - wpos0;
		float invl2 = 1.0 / max(dot(v, v), 1.0);
		float w0 = max( dot(n0, v) * invl2, 0);
		float w1 = max(-dot(n1, v) * invl2, 0);
			// dot(?,v) * dot(?,v) * invl2 * invl2 で 1.0 / length(v)^2 相当
		float w2 = (j + 0.5);	// sample weight
			// 近くほど探索密度が高いので、結果に占める割合を減らす。
			// 実際は w2 = (j + 0.5) * 2.0 / RSMCount だが、定数はscale に追い出してある。

		float4 col = tex2Dlod(RSMAlbedoSamp, float4(ppos, 0,0));
		bounce += float4(col.rgb, 1) * (w0 * w1 * w2);
	}

	return saturate(bounce * scale);
}

inline float4 GetRSMColor(float2 Tex)
{
	return tex2D(RSMWorkSamp, Tex);
}

#else

inline float4 GetRSMColor(float2 Tex) { return 0; }

#endif



// 追加ライトの共通処理

//float4x4 matW			: WORLD;
float4x4 matVP			: VIEWPROJECTION;
float4x4 matP			: PROJECTION;
float4x4 matInvVP		: VIEWPROJECTIONINVERSE;

#define _DECLARE_PARAM(_t,_var,_item, _ctrl)	\
	_t _var : CONTROLOBJECT < string name = _ctrl; string item = _item;>;

#define DECLARE_PARAM(_t,_var,_item) _DECLARE_PARAM(_t, _var, _item, CTRL_NAME)

// DECLARE_PARAM(float4x4, LightObjectMatrix, "全ての親");
DECLARE_PARAM(float, mLightIntensityP, "ライト強度+");
DECLARE_PARAM(float, mLightIntensityN, "ライト強度-");
DECLARE_PARAM(float, mLightDistance, "ライト距離");
DECLARE_PARAM(float, mLightSharpness, "シャープ度");


static float LightRadius = lerp(LightDistanceMax, LightDistanceMin, sqrt(mLightDistance));
static float LightIntensity = (mLightIntensityP * (MaxLightIntensity - 1) + 1.0) * saturate(1.0 - mLightIntensityN);
static float3 LightColor = LightIntensity * MaterialEmissive;

static float MaxLod = log2(TextureSize);
static float TextureSharpness = lerp(MaxLod - 2, 0, saturate(mLightSharpness));


#if (EnableShadowMap > 0 && ShadowSampleCount > 0) || (FOG_TYPE == 2 && VOLUMETRIC_FOG > 0)
#define	NOISE_TEXTURE_SIZE	(256.0)
texture2D NoiseTex <
	string ResourceName = "../Sources/Assets/bluenoise.png";
	int MipLevels = 1;
>;
sampler NoiseSamp = sampler_state {
	texture = <NoiseTex>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = WRAP;	AddressV  = WRAP;
};

float GetJitterOffset(float2 uv) { return tex2D(NoiseSamp, uv).x; }
float GetNoise(float2 uv) { return GetJitterOffset(uv * ViewportSize / NOISE_TEXTURE_SIZE); }
#else
float GetJitterOffset(float2 uv) { return 0; }
float GetNoise(float2 uv) { return 0; }
#endif

//-----------------------------------------------------------------------------

// 光源用テクスチャ
#if EnableLighTexture > 0
#if USE_SCREEN_BMP > 0
shared texture SavedScreen: RENDERCOLORTARGET;
sampler LightSamp = sampler_state {
	texture = <SavedScreen>;
	SRGBTexture = true;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
	AddressU  = CLAMP; AddressV  = CLAMP;
};
#else
sampler LightSamp = sampler_state {
	texture = <ObjectTexture>;
	SRGBTexture = true;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
	AddressU  = CLAMP; AddressV  = CLAMP;
};
#endif
#endif

shared texture ColorMapRT: OFFSCREENRENDERTARGET;
shared texture PPPMaterialMapRT: RENDERCOLORTARGET;
shared texture PPPNormalMapRT: RENDERCOLORTARGET;
shared texture PPPSpecularMapRT: RENDERCOLORTARGET;

sampler ColorMap = sampler_state {
	texture = <ColorMapRT>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};
sampler MaterialMap = sampler_state {
	texture = <PPPMaterialMapRT>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};
sampler NormalSamp = sampler_state {
	texture = <PPPNormalMapRT>;
	MinFilter = POINT;	MagFilter = POINT;	MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = float4(0,0,0,0);
};


//-----------------------------------------------------------------------------

struct VS_OUTPUT
{
	float4 Pos			: POSITION;
	float4 TexCoord		: TEXCOORD0;
	float4 TexCoef		: TEXCOORD1;
};

struct PS_OUT_MRT
{
	float4 Diffuse		: COLOR0;
	float4 Specular		: COLOR1;
};


//-----------------------------------------------------------------------------

float GetEdgeFallOff(float2 coord, float lod, float textureSize)
{
	float size = saturate(max(exp2(lod), 1) / textureSize);

	float2 uv = coord * 2 - 1;
	float2 minPos = max(-1, uv - size * 0.5); // left top
	float2 maxPos = min( 1, uv + size * 0.5); // right bottom
	float2 texelSize = max(maxPos - minPos, 0);

	float totalArea = size * size;
	float texelArea = texelSize.x * texelSize.y;
	return texelArea / totalArea;
}


// ライト平面とベクトルの交点を求める
float3 LightPlaneIntersect(float3 lightPos, float3 lightDirection, float3 pos, float3 v)
{
	float d = dot(v, lightDirection);
	d = (abs(d) < 1e-6) ? 1e-6 : d;
	return pos + v * (dot(lightPos - pos, lightDirection) / d);
}

float CalcShadowRate(float blocker, float receiver, float bias)
{
	return saturate((blocker - receiver) * 2.0 + bias);
}


//-----------------------------------------------------------------------------
//
//
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------

#define CTRL_NAME	"(self)"

#include "../ikPolishShader.fxsub"

#include "../Sources/constants.fxsub"
#include "../Sources/mmdparameter.fxsub"
#include "../Sources/mmdutil.fxsub"
#include "../Sources/colorutil.fxsub"

#include "./Sources/light.fxsub"
#include "./Sources/fog.fxsub"
#include "./Sources/omni_common.fxsub"

DECLARE_PARAM(float, mLightSize, "ライトサイズ+");
static float LightSize = mLightSize * LightRadiusMax + LightRadiusMin;

#define SHADOW_FX_FILE	"./Sources/omni_shadow.fx"
#define	SHADOW_RT_DESCRIPTION	"shadowmap for sphere light"


//-----------------------------------------------------------------------------

// 光源用テクスチャ
#if EnableLighTexture > 0
texture OctTextureMap: RENDERCOLORTARGET <
	int Width = TextureSize * 2;
	int Height = TextureSize * 2;
	int MipLevels = 0;
	string Format = "A8R8G8B8";
>;
sampler OctLightSamp = sampler_state {
	texture = <OctTextureMap>;
	AddressU = CLAMP; AddressV = CLAMP;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
};
#endif


//-----------------------------------------------------------------------------

#include "../Sources/structs.fxsub"
#include "../Sources/gbuffer.fxsub"
#include "../Sources/lighting.fxsub"
#include "../Sources/octahedron.fxsub"

#include "./Sources/omni_light.fxsub"

//-----------------------------------------------------------------------------
//

float3 GetTextureColor(float2 coord, float lod)
{
#if EnableLighTexture > 0
	return tex2Dlod(OctLightSamp, float4(coord,0,lod)).rgb;
#else
	return 1;
#endif
}


float4 CalcClosestPoint(float3 wpos, float3 v, float size)
{
	float3 lv = LightPosition - wpos;
	float3 v2 = dot(lv, v) * v - lv;
		// v2 = (dot(lv, v) * v + wpos) - LightPosition;
	float l = length(v2);
	float s = size / max(l, size);
	float4 closestPos = float4(LightPosition + s * v2, l / size);

	// 球と交差しているので球表面まで戻す
	if (l <= size)
	{
		closestPos.xyz -= v * sqrt(size * size - l * l);
	}

	return closestPos;
}


//-----------------------------------------------------------------------------
//

#if EnableLighTexture > 0
// テクスチャの再構成: スフィアマップにのみ対応
VS_OUTPUT VS_ConstructTexture( float4 Pos : POSITION, float2 Tex : TEXCOORD0 )
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 
	Out.Pos = Pos;
	Out.TexCoord.xy = Tex.xy + 0.5 / SHADOW_BUFSIZE;
	return Out;
}

float4 PS_ConstructTexture( float2 Tex: TEXCOORD0 ) : COLOR
{
	float3 N = DecodeOctahedron( Tex );
	float theta = atan2(N.x, N.z) / PI;
	float phi = acos(N.y) / PI;
	float4 uv = float4(theta * -0.5 + 0.5, phi, 0,0);
	return tex2Dlod(LightSamp, uv);
}
#endif

//-----------------------------------------------------------------------------
//
VS_OUTPUT VS_SetTexCoord( float4 Pos : POSITION, float4 Tex : TEXCOORD0)
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 

	Out.Pos = Pos;
	Out.TexCoord.xy = Tex.xy + ViewportOffset.xy;
	Out.TexCoord.z = TextureSharpness;
	Out.TexCoord.w = LightRadius + LightSize;
	return Out;
}


PS_OUT_MRT PS_DrawLight( float4 Tex: TEXCOORD0, uniform bool useShadow )
{
	float4 albedo = tex2D(ColorMap, Tex.xy);
	MaterialParam material = GetMaterial(Tex.xy, albedo);
	GeometryInfo geom = GetWND(Tex.xy);
	float3 wpos = geom.wpos;
	float depth = geom.nd.depth;
	float lod = Tex.z;
	float range = Tex.w;

	float3 V = normalize(CameraPosition - wpos);
	float3 N = normalize(geom.nd.normal);
	float3 L = normalize(LightPosition - wpos);

	float shadow = CalcLightFalloff(wpos, LightPosition, range);
	clip(shadow - 1e-4);
	if (useShadow) shadow *= CalcShadow(float4(wpos,1), dot(N, L), Tex.xy);

	//-----------------------------------------------------
	// デフューズ

#if EnableLighTexture > 0
	// テクスチャ使用
	float3x3 matInv = transpose((float3x3)LightObjectMatrix);
	float3 localDir = normalize(mul(-L, matInv));
	float2 uv = EncodeOctahedron(localDir);
	float3 diffuseColor = GetTextureColor(uv, lod);
	diffuseColor += GetTextureColor(uv, lod + 1);
	diffuseColor += GetTextureColor(uv, lod + 2);
	diffuseColor /= 3.0;
#else
	float3 diffuseColor = 1;
#endif

	float3 diffuse = diffuseColor * saturate(dot(N, L));
	diffuse *= LightColor * shadow;

	//-----------------------------------------------------
	// スペキュラ

	float3 R = normalize(reflect(-V, N));
	float4 closestPosR = CalcClosestPoint(wpos, R, LightSize);

#if EnableLighTexture > 0
	float a = material.roughness;
	lod = (1 - (1 - a) * (1 - a)) * lod;

	float3 R2 = lerp(R, L, lod / (MaxLod - 1));
	float4 closestPosR2 = CalcClosestPoint(wpos, R2, LightSize);
	float3 localDir2 = normalize(closestPosR2.xyz - LightPosition);
	float edge = max(dot(localDir2, -R2), 0);

	lod = lerp(MaxLod - 1, lod, edge);
	localDir2 = normalize(mul(localDir2, matInv));
	float3 col1 = GetTextureColor(EncodeOctahedron(localDir2), lod);
	float3 col2 = GetTextureColor(EncodeOctahedron(localDir), MaxLod - 1);
	float3 specColor = lerp(col1, col2, lod / MaxLod);

#else
	float3 specColor = 1;
#endif

	float3 L1 = normalize(closestPosR.xyz - wpos);
	float3 specular = CalcSpecular(L1, N, V, material.roughness, material.f0);
	specular *= specColor;
	specular *= LightColor * shadow;

	PS_OUT_MRT Out;
	Out.Diffuse = float4(diffuse, 1);
	Out.Specular = float4(specular, 1);

	return Out;
}


//-----------------------------------------------------------------------------
//
#if FOG_TYPE == 2 && VOLUMETRIC_FOG > 0

VS_OUTPUT_FOG VS_DrawVolumeLight( float4 Pos : POSITION, float4 Tex : TEXCOORD0)
{
	VS_OUTPUT_FOG Out = (VS_OUTPUT_FOG)0; 

	Out.Pos = Pos;
	Out.TexCoord.xy = Tex.xy + ViewportOffset.xy;
	Out.TexCoord.z = TextureSharpness;
	Out.TexCoord.w = LightRadius + LightSize;

	Out.PhaseCoef.xyz = CalcNormalizedMieCoef();
	Out.PhaseCoef.w = mFogIntensity;

	return Out;
}


float4 PS_DrawVolumeLight( float4 Tex: TEXCOORD0, float4 PhaseCoef: TEXCOORD2) : COLOR
{
	float3 fogTexCoord = CalcFogInterleavedTexCoord(Tex.xy);
	float2 uv = fogTexCoord.xy;
	float zorder = fogTexCoord.z;
	float3 V = GetViewDirection(uv);
	float maxDepth = MAX_FOG_DISTANCE;
	float startDepth = zorder * maxDepth;
	float slotLength = maxDepth / (FOG_SLICE_NUM + 1.0);

	float lod = Tex.z + 1;
	float range = Tex.w;

	// 明らかに離れている場合は即座に終了する
	float3 lv = LightPosition - CameraPosition;
	float nearest = clamp(dot(V, lv), startDepth, startDepth + slotLength);
	float3 PosC = CameraPosition + V * nearest;
	float lightMax = CalcLightFalloff(PosC, LightPosition, range);
	clip(lightMax - 1e-4);

	float3x3 matInv = transpose((float3x3)LightObjectMatrix);

	float3 PosB = CameraPosition + V * startDepth;
	float3 PosE = PosB + V * slotLength;

	float3 sum = 0;
	for(int i = 0; i < MAX_FOG_STEP; i++)
	{
		float t = i * 1.0 / MAX_FOG_STEP;
		float3 wpos = lerp(PosB, PosE, t);
		float3 L = normalize(LightPosition - wpos);

		float light = CalcShadowSimple(float4(wpos,1));
		light *= CalcLightFalloff(wpos, LightPosition, range);
		light *= GetFogPhase(V, L, PhaseCoef.xyz);

		#if EnableLighTexture > 0
		float3 localDir = normalize(mul(-L, matInv));
		float2 uv = EncodeOctahedron(localDir);
		sum += GetTextureColor(uv, lod) * light;
		#else
		sum += light;
		#endif
	}

	sum.rgb *= PhaseCoef.w / MAX_FOG_STEP;
	float3 col = sum.rgb * LightColor;

	return float4(col, 0.0);
}
#endif


//-----------------------------------------------------------------------------
// 

#if EnableShadowMap > 0
#define	SHADOW_SCRIPT	"RenderColorTarget0=ShadowMap; Pass=ConstructShadow;"
#define	SHADOW_PASS	\
		pass ConstructShadow < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			VertexShader = compile vs_3_0 VS_ConstructShadow(); \
			PixelShader  = compile ps_3_0 PS_ConstructShadow(); \
		}
#else
#define	SHADOW_SCRIPT	
#define	SHADOW_PASS		
#endif

#if EnableLighTexture > 0
#define	TEXTURE_SCRIPT	"RenderColorTarget0=OctTextureMap; Pass=ConstructTexture;"
#define	TEXTURE_PASS	\
		pass ConstructTexture < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			VertexShader = compile vs_3_0 VS_ConstructTexture(); \
			PixelShader  = compile ps_3_0 PS_ConstructTexture(); \
		}
#else
#define	TEXTURE_SCRIPT	
#define	TEXTURE_PASS	
#endif


#if EnableShadowMap > 0 || EnableLighTexture > 0
#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass; \
		string Script =  \
			"RenderDepthStencilTarget=DepthBuffer;" \
			SHADOW_SCRIPT \
			TEXTURE_SCRIPT \
			"RenderDepthStencilTarget=;" \
			FOG_SCRIPT \
			"RenderColorTarget1=PPPSpecularMapRT;" \
			"RenderColorTarget0=; Pass=DrawLight;" \
			"RenderColorTarget1=;"; \
	> { \
		SHADOW_PASS \
		TEXTURE_PASS \
		FOG_PASS \
		pass DrawLight < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			SrcBlend = ONE; DestBlend = ONE; \
			VertexShader = compile vs_3_0 VS_SetTexCoord(); \
			PixelShader  = compile ps_3_0 PS_DrawLight(true); \
		} \
	}
#else
#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass; \
		string Script =  \
			FOG_SCRIPT \
			"RenderColorTarget1=PPPSpecularMapRT;" \
			"RenderColorTarget0=; Pass=DrawLight;" \
			"RenderColorTarget1=;"; \
	> { \
		FOG_PASS \
		pass DrawLight < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			SrcBlend = ONE; DestBlend = ONE; \
			VertexShader = compile vs_3_0 VS_SetTexCoord(); \
			PixelShader  = compile ps_3_0 PS_DrawLight(false); \
		} \
	}
#endif


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

//-----------------------------------------------------------------------------


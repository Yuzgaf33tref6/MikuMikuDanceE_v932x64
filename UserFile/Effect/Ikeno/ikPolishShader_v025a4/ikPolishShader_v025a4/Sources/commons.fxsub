
// 共通処理、カテゴリ分けから漏れた汎用処理


//-----------------------------------------------------------------------------
// マクロ

#define TO_STRING(str) #str


//-----------------------------------------------------------------------------
// 構造体

struct VS_OUTPUT {
	float4 Pos			: POSITION;
	float4 Tex			: TEXCOORD0;
};

//-----------------------------------------------------------------------------
// 

// ぼかし処理の重み係数：
float4 BlurWeightArray[] = {
	float4(0.0920246, 0.0902024, 0.0849494, 0.0768654),
	float4(0.0668236, 0.0558158, 0.0447932, 0.0345379)
};
static float BlurWeight[8] = (float[8])BlurWeightArray;


//-----------------------------------------------------------------------------
// 

// 線形で出力する?
bool bLinearMode : CONTROLOBJECT < string name = "ikLinearEnd.x"; >;

float3 ColorCorrectFromInput(float3 col)
{
	return (!bLinearMode) ? Degamma(col) : col;
}
float3 ColorCorrectToOutput(float3 col)
{
	return (!bLinearMode) ? Gamma(col) : col;
}


// ブラーの強さを計算する
float CalcWeightDepth(float depth)
{
	return log2(depth+1);
}

#define CALC_EXP_VALUE(x)	(exp2(min((x), -epsilon)))
//#define CALC_EXP_VALUE(x)	saturate(exp2(x))

float CalcBlurWeight(NormalDepth nd0, NormalDepth nd1, float r2, float depthRate)
{
	float d = CalcWeightDepth(nd1.depth) - depthRate;
//	float d = log2(nd1.depth / nd0.depth);
	float d2 = d * d;
	float nn = saturate(dot(nd0.normal, nd1.normal));
	return CALC_EXP_VALUE(r2 - d2);
}

float3 CalcBlurWeight3(NormalDepth nd0, NormalDepth nd1, float3 r2, float depthRate)
{
	float d = CalcWeightDepth(nd1.depth) - depthRate;
	float d2 = d * d;
	return CALC_EXP_VALUE(r2 - d2.xxx) * saturate(dot(nd0.normal, nd1.normal) * 0.5 + 0.5);
}

bool IsTimeToReset()
{
	return (time < 0.001f);
}


// 画面端に近いか?
float CalcEdgeFalloff(float2 texCoord)
{
	float2 absTex = 1 - abs(texCoord * 2 - 1);
	float x = min(absTex.x, absTex.y);
	return saturate(x * (0.5 / 0.1));
}


//-----------------------------------------------------------------------------
// ジッター

#if 0
float4 JitterOffsets4[4] =
{
	float4(6 / 16.0, 1 / 16.0, 12/ 16.0,  2/ 16.0),
	float4(9 / 16.0, 14/ 16.0, 5 / 16.0, 11/ 16.0),
	float4(0 / 16.0, 7 / 16.0, 13/ 16.0, 4 / 16.0),
	float4(15/ 16.0, 8 / 16.0, 3 / 16.0, 10/ 16.0),
};
float4 JitterOffsetsPattern[4] =
{
	float4(1,0,0,0),
	float4(0,1,0,0),
	float4(0,0,1,0),
	float4(0,0,0,1),
};
#endif

float GetJitterOffset(float2 iuv)
{
#if 0
	int4 mod4 = fmod(floor(iuv.xyxy * float2(1,1/4.0).xxyy), 4);
	float4 work11 = JitterOffsets4[mod4.x];
	float4 work12 = JitterOffsets4[mod4.z];
	float4 work21 = JitterOffsetsPattern[mod4.y];
	float4 work22 = JitterOffsetsPattern[mod4.w];
	return dot(work11, work21) + dot(work21, work22) / 16.0;
#else
	return tex2D(NoiseSamp, iuv).x;
#endif
}


//-----------------------------------------------------------------------------
//

VS_OUTPUT VS_Buffer( float4 Pos : POSITION, float2 Tex : TEXCOORD0 )
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 
	Out.Pos = Pos;
	Out.Tex = Tex.xyxy + float4(ViewportOffset, ViewportOffset2);
	return Out;
}

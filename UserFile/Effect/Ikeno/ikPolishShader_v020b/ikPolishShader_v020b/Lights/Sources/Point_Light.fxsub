//-----------------------------------------------------------------------------
//
//
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------

#define CTRL_NAME	"(self)"

#if !defined(EnableLighTexture)
#define	EnableLighTexture	0
#define	TextureSize			256
#endif

#include "../ikPolishShader.fxsub"
#include "../Sources/constants.fxsub"
#include "./Sources/light.fxsub"

static float LightSize = 0.1;

#define SHADOW_FX_FILE	"./Sources/omni_shadow.fx"
#define	SHADOW_RT_DESCRIPTION	"shadowmap for point light"

//-----------------------------------------------------------------------------

#include "../Sources/structs.fxsub"
#include "../Sources/colorutil.fxsub"
#include "../Sources/gbuffer.fxsub"
#include "../Sources/lighting.fxsub"
#include "../Sources/octahedron.fxsub"

#include "./Sources/omni_common.fxsub"
#include "./Sources/omni_light.fxsub"

//-----------------------------------------------------------------------------
//
VS_OUTPUT VS_SetTexCoord( float4 Pos : POSITION, float4 Tex : TEXCOORD0)
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 

	Out.Pos = Pos;
	Out.TexCoord = Tex.xy + ViewportOffset.xy;
	return Out;
}


PS_OUT_MRT PS_DrawLight( float2 Tex: TEXCOORD0, uniform bool useShadow )
{
	float4 albedo = tex2D(ColorMap, Tex.xy);
	MaterialParam material = GetMaterial(Tex.xy, albedo);
	GeometryInfo geom = GetWND(Tex.xy);
	float3 wpos = geom.wpos;
	float depth = geom.nd.depth;

	float3 V = normalize(CameraPosition - wpos);
	float3 N = normalize(geom.nd.normal);
	float3 lv = LightPosition - wpos;
	float3 L = normalize(lv);

	float shadow = 1;
	if (useShadow) shadow = CalcShadow(float4(wpos,1), dot(N, L), Tex);

	shadow *= CalcLightFalloff(wpos, LightPosition, LightRadius + LightSize);

	//-----------------------------------------------------
	// デフューズ
	//@@@ 両面対応?
	float3 diffuse = saturate(dot(N, L));
	diffuse *= LightColor * MaterialEmissive * shadow;

	//-----------------------------------------------------
	// スペキュラ
	float3 specular = CalcSpecular(L, N, V, material.roughness, material.f0);
	specular *= LightColor * MaterialEmissive * shadow;

	PS_OUT_MRT Out;
	Out.Diffuse = float4(diffuse, 1);
	Out.Specular = float4(specular, 1);

	return Out;
}


//-----------------------------------------------------------------------------
// 

#if EnableShadowMap > 0
#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass; \
		string Script =  \
			"RenderDepthStencilTarget=DepthBuffer;" \
			"RenderColorTarget0=ShadowMap; Pass=ConstructShadow;" \
			"RenderDepthStencilTarget=;" \
			"RenderColorTarget1=PPPSpecularMapRT;" \
			"RenderColorTarget0=; Pass=DrawLight;" \
			"RenderColorTarget1=;"; \
	> { \
		pass ConstructShadow < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			VertexShader = compile vs_3_0 VS_ConstructShadow(); \
			PixelShader  = compile ps_3_0 PS_ConstructShadow(); \
		} \
		pass DrawLight < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			SrcBlend = ONE; DestBlend = ONE; \
			VertexShader = compile vs_3_0 VS_SetTexCoord(); \
			PixelShader  = compile ps_3_0 PS_DrawLight(true); \
		} \
	}
#else
#define OBJECT_TEC(name, mmdpass) \
	technique name < string MMDPass = mmdpass; \
		string Script =  \
			"RenderColorTarget1=PPPSpecularMapRT;" \
			"Pass=DrawLight;" \
			"RenderColorTarget1=;"; \
	> { \
		pass DrawLight < string Script= "Draw=Buffer;"; > { \
			ZEnable = false;	ZWriteEnable = false; \
			SrcBlend = ONE; DestBlend = ONE; \
			VertexShader = compile vs_3_0 VS_SetTexCoord(); \
			PixelShader  = compile ps_3_0 PS_DrawLight(false); \
		} \
	}
#endif


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

//-----------------------------------------------------------------------------


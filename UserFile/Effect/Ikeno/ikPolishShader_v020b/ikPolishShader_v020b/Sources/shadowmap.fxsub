// シャドウマップ用の処理


#define NEAR_DISTANCE	5.0		// 近くにある物の影を無視する距離

////////////////////////////////////////////////////////////////////////////////////////////////

#include "Shadows/shadow_common.fxsub"

#define BORDER_RANGE	2		// 1/4画面の境界

//#define SCREENSPACE_FX_OBJECT  "Shadows/Shadow.fxsub"
#define LIGHTSPACE_FX_OBJECT  "Shadows/LightDepth.fx"
#define LIGHTSPACE_FX_OBJECT_RGBM  "Shadows/LightDepth_rgbm.fx"


static float SoftShadowScale = mExistPolish ? mSoftShadow : DefaultShadowScale;

// SoftShadow
// NOTE: PCFの半径はシャドウキャスターとの距離に応じて変えるべき?
float PCFRadius(float dist)
{
	return SoftShadowScale * (1.0/512.0 - 1.0/SHADOW_TEX_SIZE) + (1.0/SHADOW_TEX_SIZE);
}
//float PCFRadius(float dist) { return clamp(dist * (LightZMax / 50.0), 1.0/SHADOW_TEX_SIZE, 1.0/256.0); }
float ShadowBlurOffsetScale() { return 0.5 + (1.75-0.5) * SoftShadowScale; }


////////////////////////////////////////////////////////////////////////////////////////////////

// ライト座標系での奥行きを出力
texture LightDepthRT : OFFSCREENRENDERTARGET <
	string Description = "Lightspace Depth for ikPolishShader";
	int Width = SHADOW_TEX_SIZE;
	int Height = SHADOW_TEX_SIZE;
	string Format = "R32F";
	float4 ClearColor = { 1, 0, 0, 0 };
	float ClearDepth = 1.0;
	int MipLevels = 1;
	string DefaultEffect = 
		HIDE_EFFECT
		"rgbm_*.x = " LIGHTSPACE_FX_OBJECT_RGBM ";"	// スカイドーム
		"*.pmd = " LIGHTSPACE_FX_OBJECT ";"
		"*.pmx = " LIGHTSPACE_FX_OBJECT ";"
		"*.x =   " LIGHTSPACE_FX_OBJECT ";"
		"* = hide;" ;
>;
sampler LightSamp = sampler_state {
	texture = <LightDepthRT>;
	MinFilter = LINEAR;	MagFilter = LINEAR;	MipFilter = LINEAR;
//	MinFilter = NONE;	MagFilter = NONE;	MipFilter = NONE;
	AddressU  = CLAMP;	AddressV = CLAMP;
};

static float4x4 matLightVPs = mul(matLightVs, matLightPs);
static float4x4 lightParam = CreateLightProjParameters();


// テクスチャ座標がどれだけエッジに近いか?
// テクスチャ座標の範囲は[-1,1]
float CalcCSMEdgeFalloff(float2 texCoord)
{
	const float m = (SHADOW_TEX_SIZE * 0.5 / WARP_RANGE);
	const float a = (BORDER_RANGE * 1.0 / WARP_RANGE);
	float2 falloff = abs(texCoord) * (-m * 4.0) + (m - a);
	return saturate(min(falloff.x, falloff.y));
}

float4 CalcCascadePPos(float2 uv, float2 offset, float index)
{
	// u, v, カスケードのインデックス, 重み を格納。
	return float4(uv + ((0.5 + offset) * 0.5 + (0.5 / SHADOW_TEX_SIZE)), index, CalcCSMEdgeFalloff(uv));
}

float2 CalcLight(float casterDepth, float receiverDepth, float rate)
{
	float dist = max(receiverDepth - casterDepth, 0);
	return float2(1 - saturate(dist * rate), dist);
}

#define TEX2D(samp, uv)		tex2Dlod(samp, float4(uv, 0,0))
//#define TEX2D(samp, uv)		tex2D(samp, uv)

//-----------------------------------------------------------------------------
//

struct VS_SHADOWMAP_OUTPUT {
	float4 Pos		: POSITION;		// 射影変換座標
	float4 Tex		: TEXCOORD0;	// テクスチャ

	float4 LightParam0	: TEXCOORD1;
	float4 LightParam1	: TEXCOORD2;
	float4 LightParam2	: TEXCOORD3;
	float4 LightParam3	: TEXCOORD4;

	float4 MatLVP0	: TEXCOORD5;
	float4 MatLVP1	: TEXCOORD6;
	float4 MatLVP2	: TEXCOORD7;
	float4 MatLVP3	: NORMAL;	 // TEXCOORD[0-7] までなので...
};


VS_SHADOWMAP_OUTPUT  VS_Shadowmap( float4 Pos : POSITION, float2 Tex : TEXCOORD0 )
{
	VS_SHADOWMAP_OUTPUT Out = (VS_SHADOWMAP_OUTPUT)0; 

	Out.Pos = Pos;
	Out.Tex.xy = Tex.xy + ViewportOffset;
	Out.Tex.zw = Out.Tex.xy / NOISE_TEXTURE_SIZE; // for jitter

	const float2 scale = float2(0.25, -0.25);
	Out.LightParam0 = float4(lightParam[0].xy, lightParam[1].xy) * scale.xyxy;
	Out.LightParam1 = float4(lightParam[0].zw, lightParam[1].zw) * scale.xyxy;
	Out.LightParam2 = float4(lightParam[2].xy, lightParam[3].xy) * scale.xyxy;
	Out.LightParam3 = float4(lightParam[2].zw, lightParam[3].zw) * scale.xyxy;

	Out.MatLVP0 = matLightVPs[0];
	Out.MatLVP1 = matLightVPs[1];
	Out.MatLVP2 = matLightVPs[2];
	Out.MatLVP3 = matLightVPs[3];

	// Out.BlurSize.x = PCFRadius(0);

	return Out;
}

float4 PS_Shadowmap(VS_SHADOWMAP_OUTPUT IN) : COLOR
{
	float2 Tex = IN.Tex.xy;
	float2 texCoord = Tex;

	GeometryInfo geom = GetWND(texCoord);
	float4 Pos = float4(geom.wpos, 1);
	float jitter = GetJitterOffset(IN.Tex.zw);

	float4x4 matLightVPs = {
		IN.MatLVP0, IN.MatLVP1,
		IN.MatLVP2,IN.MatLVP3
	};
	float4 PPos = mul(Pos, matLightVPs);
	PPos /= PPos.w;

	float distanceFromCamera = mul(Pos, matV).z;	// カメラからの距離
	float receiverDepth = PPos.z;					// ライトからの距離

	float dotNL = dot(geom.nd.normal, -LightDirection);

	float4 LightPPos01 = (PPos.xyxy * IN.LightParam0 + IN.LightParam1);
	float4 LightPPos23 = (PPos.xyxy * IN.LightParam2 + IN.LightParam3);

	#define CALC_PPOS(ppos, u, v, scale) CalcCascadePPos(ppos, float2(u,v), scale);
	float4 lightPPos0 = CALC_PPOS(LightPPos01.xy, 0, 0, 1.0 );
	float4 lightPPos1 = CALC_PPOS(LightPPos01.zw, 1, 0, 0.5 );
	float4 lightPPos2 = CALC_PPOS(LightPPos23.xy, 0, 1, 0.25);
	float4 lightPPos3 = CALC_PPOS(LightPPos23.zw, 1, 1, 0.125);
		// 最後はPCFのステップサイズ。本来は1/1,1/2,1/4,1/8になる?

	float4 texCoord0 = lightPPos3;
	float4 texCoord1 = 0;
	if (lightPPos2.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos2; }
	if (lightPPos1.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos1; }
	if (lightPPos0.w > 0.0) { texCoord1 = texCoord0; texCoord0 = lightPPos0; }

	// texCoord0 = (texCoord0.w > jitter * 0.9) ? texCoord0 : texCoord1;
		// 境界部分でのつなぎ目をごまかす。逆効果
	float casterDepth0 = TEX2D(LightSamp, texCoord0.xy).x;
	float casterDepth = casterDepth0; // lerp(1, casterDepth0, texCoord0.w);

	// 深度バイアス：適当
	float bias = distanceFromCamera * (1.0 / LightZMax);
	float depthSlope = min(abs( ddx( receiverDepth ) ) + abs( ddy( receiverDepth ) ), 0.1);
	float lightSlpoe = min(1.0 / (abs(dotNL) + 1.0e-4), 8.0) * (1.0 / LightZMax);
	bias = (bias + depthSlope + lightSlpoe) * BIAS_SCALE;
	receiverDepth -= bias;

	const float sdrate = 30000.0 / 4.0 - 0.05;
	float2 light_center = CalcLight(casterDepth.x, receiverDepth, sdrate);

	// PCF
	#define CALC_LIGHT(u,v,w)	\
		CalcLight(TEX2D(LightSamp, texCoord0.xy + float2(u, v)).x, receiverDepth - w, sdrate);

	float s = PCFRadius(light_center.y); // IN.BlurSize.x; // 
	texCoord0.xy += (jitter - 0.5) * s;
	float dpethbias = s * SHADOW_TEX_SIZE * bias;

	float2 pcf0 = CALC_LIGHT( s, 0, dpethbias);
	float2 pcf1 = CALC_LIGHT(-s, 0, dpethbias);
	float2 pcf2 = CALC_LIGHT( 0, s, dpethbias);
	float2 pcf3 = CALC_LIGHT( 0,-s, dpethbias);
	float2 light_acc = (pcf0 + pcf1 + pcf2 + pcf3);
	#if SHADOW_QUALITY >= 2
	#define SQRT2	1.4142
	float2 pcf4 = CALC_LIGHT( s, s, dpethbias * SQRT2);
	float2 pcf5 = CALC_LIGHT(-s, s, dpethbias * SQRT2);
	float2 pcf6 = CALC_LIGHT( s,-s, dpethbias * SQRT2);
	float2 pcf7 = CALC_LIGHT(-s,-s, dpethbias * SQRT2);
	light_acc += (pcf4 + pcf5 + pcf6 + pcf7) * 0.70;
	const float PCFScale = 1.0 / (1+4+4*0.70);
	#else
	const float PCFScale = 1.0 / (1+4);
	#endif
	light_acc = (light_center + light_acc) * PCFScale;
	// light_acc = lerp(light_center, light_acc, texCoord0.w);

	float light = light_acc.x * light_acc.x;
	float thickness = max(light_acc.y * LightZMax, 0.01);

	// 近いシャドウキャスターからの影を無視する
	float isFaceShadow = (GetMaterial(Tex).attribute == MT_FACE);
	float att = exp2(-thickness * (4.0 * LOG2_E / NEAR_DISTANCE) - 1e-4);
	light = light + (1.0 - light) * lerp(0, att, isFaceShadow);
//	light = min(light, (dotNL > 0.0));

	return float4(light, thickness, distanceFromCamera, 1);
}


//-----------------------------------------------------------------------------
//
VS_OUTPUT VS_BlurShadow( float4 Pos : POSITION, float2 Tex : TEXCOORD0, uniform bool bBlurX)
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 
	Out.Pos = Pos;
	Out.Tex.xy = Tex.xy + ViewportOffset;

	float2 offset = (bBlurX) ? float2(SampStep.x, 0) : float2(0, SampStep.y);
	offset *= ShadowBlurOffsetScale();
	Out.Tex.zw = offset;
	return Out;
}

/*
// 各ピクセルの重みを計算
float CalcShadowBlurWeight(float d0, float d1, float depthRate)
{
	float dd = (d0 - d1) * depthRate;
	return exp2(-dd*dd);
}
*/

// シャドウマップをボカしてノイズを減少させる
float4 PS_BlurShadow( float4 Tex : TEXCOORD0, uniform sampler2D smp) : COLOR
{
	float2 texCoord = Tex.xy;
	float2 offset = Tex.zw;

	float3 center = tex2D(smp, texCoord).xyz;
	float centerDepth = center.z;
	float depthRate = 100.0 / max(centerDepth, 1.0);
	float depth1 = 100.0;

	float3 sum = float3(center.xy, 1) * BlurWeight[0];

	[unroll] for(int i = 1; i < 8; i++)
	{
		float4 uv = offset.xyxy * float4(i,i, -i,-i) + texCoord.xyxy;

		float3 shadowDepthP = tex2D(smp, uv.xy).xyz;
		float3 shadowDepthN = tex2D(smp, uv.zw).xyz;
		float2 dd = float2(shadowDepthP.z, shadowDepthN.z) * depthRate - depth1;
		float2 weight2 = exp2(-dd*dd) * BlurWeight[i];
		sum += float3(shadowDepthP.xy, 1) * weight2.x;
		sum += float3(shadowDepthN.xy, 1) * weight2.y;
	}

	// NOTE: 最終的にG16R16Fに格納されるので深度は捨てられる
	return float4(sum.xy / sum.z, centerDepth, 1);
}


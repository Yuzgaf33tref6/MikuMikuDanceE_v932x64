
// 共通処理、カテゴリ分けから漏れた汎用処理


//-----------------------------------------------------------------------------
// マクロ

#define TO_STRING(str) #str


//-----------------------------------------------------------------------------
// 構造体

struct VS_OUTPUT {
	float4 Pos			: POSITION;
	float4 Tex			: TEXCOORD0;
};


//-----------------------------------------------------------------------------
// 

// 線形で出力する?
bool bLinearMode : CONTROLOBJECT < string name = "ikLinearEnd.x"; >;

inline float3 ColorCorrectFromInput(float3 col)
{
	return (!bLinearMode) ? Degamma(col) : col;
}
inline float3 ColorCorrectToOutput(float3 col)
{
	return (!bLinearMode) ? Gamma(col) : col;
}


// 法線と深度からワールド座標を再構築する
static float4x4 matTex2Proj = {
		 2, 0, 0, 0,
		 0,-2, 0, 0,
		-1, 1, matP._33, 1,
		 0, 0, matP._43, 0
	};
static float4x4 matTex2World = mul(matTex2Proj, matInvVP);

inline float3 ReconstructWPos(float2 Tex, float depth)
{
	// Tex.xy = (floor(Tex.xy * ViewportSize) + 0.5) / ViewportSize;
	float4 wpos = mul(float4(float3(Tex.xy, 1) * depth, 1), matTex2World);
	return wpos.xyz;
}

inline NormalDepth GetNormalDepthRaw(float2 Tex)
{
	return (NormalDepth)tex2D( NormalSamp, Tex);
}
inline NormalDepth GetNormalDepthRawLod(float2 Tex)
{
	return (NormalDepth)tex2Dlod( NormalSamp, float4(Tex,0,0));
}

inline GeometryInfo GetWND(float2 Tex)
{
	NormalDepth ND = GetNormalDepthRaw(Tex);
	GeometryInfo tmp;
	tmp.nd = ND;
	tmp.wpos = ReconstructWPos(Tex, ND.depth);
	return tmp;
}

inline GeometryInfo GetWNDLod(float2 Tex)
{
	NormalDepth ND = GetNormalDepthRawLod(Tex);
	GeometryInfo tmp;
	tmp.nd = ND;
	tmp.wpos = ReconstructWPos(Tex, ND.depth);
	return tmp;
}

// 座標だけ取得する
inline float3 GetWPos(float2 Tex)
{
	return ReconstructWPos(Tex, GetNormalDepthRaw(Tex).depth);
}

// ブラーの強さを計算する
inline float CalcBlurWeight(NormalDepth nd0, NormalDepth nd1, float r2, float depthRate)
{
	float d = (nd0.depth - nd1.depth) * depthRate;
	float d2 = d * d;
	return exp(r2 - d2) * saturate(dot(nd0.normal, nd1.normal) * 0.5 + 0.5);
}

inline float3 CalcBlurWeight3(NormalDepth nd0, NormalDepth nd1, float3 r2, float depthRate)
{
	float d = (nd0.depth - nd1.depth) * depthRate;
	float d2 = d * d;
	return exp(r2 - d2.xxx) * saturate(dot(nd0.normal, nd1.normal) * 0.5 + 0.5);
}

// sss用の吸収度を取得する(ad hoc)
inline float3 CalcAbsorptionColor(float2 texCoord)
{
	float3 rgb = tex2D(AlbedoSamp, texCoord).rgb;

	float g = rgb2gray(rgb);
	rgb = rgb * rgb; // pow(rgb, 2.0);
	rgb = (rgb * g / max(rgb2gray(rgb), 1e-4));

	return saturate(1.0 - rgb) * 100 + 0.1;
}

inline bool IsTimeToReset()
{
	return (time < 0.001f);
}


//-----------------------------------------------------------------------------
// ジッター
static float JitterOffsets[16] = {
	 6/16.0, 1/16.0,12/16.0,11/16.0,
	 9/16.0,14/16.0, 5/16.0, 2/16.0,
	 0/16.0, 7/16.0,10/16.0,13/16.0,
	15/16.0, 8/16.0, 3/16.0, 4/16.0,
};

inline float GetJitterOffset(int2 iuv)
{
	int index = (iuv.x % 4) * 4 + (iuv.y % 4);
#if 0
	return JitterOffsets[index];
#else
	int index2 = ((iuv.x/4) % 4) * 4 + ((iuv.y/4) % 4);
	return (JitterOffsets[index] + JitterOffsets[index2] * (1/16.0));
#endif
}


// マテリアル値の取得
inline MaterialParam GetMaterial(float2 uv)
{
	return (MaterialParam)tex2D( MaterialMap, uv);
}

//-----------------------------------------------------------------------------
//

VS_OUTPUT VS_Buffer( float4 Pos : POSITION, float2 Tex : TEXCOORD0 )
{
	VS_OUTPUT Out = (VS_OUTPUT)0; 
	Out.Pos = Pos;
	Out.Tex = Tex.xyxy + float4(ViewportOffset, ViewportOffset2);
	return Out;
}

float4 PS_Upscale( float4 Tex: TEXCOORD0, uniform sampler smp) : COLOR
{
	NormalDepth ND = GetNormalDepthRaw(Tex.xy);
	float2 texCoord = (floor(Tex.xy * WorkSize) + 0.5) * (1.0 / WorkSize);
	float depthRate = 100.0 / max(ND.depth, 1.0);

	float4 result = 0;
	float weight = 0;
	float2 uv0;
	float w;

	#define INTEGRATE_RESULT(u,v, dist)	\
		uv0 = float2(u,v) * (1.0 / WorkSize) + texCoord;	\
		w = CalcBlurWeight(ND, GetNormalDepthRaw(uv0), dist, depthRate);	\
		result += tex2D(smp, uv0) * w;	\
		weight += w;

	INTEGRATE_RESULT( 0, 0, 0);
	float d = (1.41 * 1.41) * -0.5 / (8.0*8.0);

	INTEGRATE_RESULT(-1,-1, d);
	INTEGRATE_RESULT( 1,-1, d);
	INTEGRATE_RESULT(-1, 1, d);
	INTEGRATE_RESULT( 1, 1, d);

	d = (1.0 * 1.0) * -0.5 / (8.0*8.0);
	INTEGRATE_RESULT(-1, 0, d);
	INTEGRATE_RESULT( 1, 0, d);
	INTEGRATE_RESULT( 0,-1, d);
	INTEGRATE_RESULT( 0, 1, d);

	return result / max(weight, 1e-4);
}


// 常に一定の値にする
// #define	CONSTANT_DETAIL_VALUE	0.5


// パラメータ宣言
float4   MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;

// 座法変換行列
float4x4 matW	: WORLD;
float4x4 matWV	: WORLDVIEW;
float4x4 matVP	: VIEWPROJECTION;
float4x4 matWVP	: WORLDVIEWPROJECTION;
float4x4 matP	: PROJECTION;

float2 ViewportSize : VIEWPORTPIXELSIZE;

static float ZScale = matP._33 * max(DepthAmplitude, 0.1) * 0.1 / max(matP._22, 1e-6);
float3   CameraPosition    : POSITION  < string Object = "Camera"; >;

sampler MMDSamp0 : register(s0);
sampler MMDSamp1 : register(s1);
sampler MMDSamp2 : register(s2);

bool	use_texture;		// テクスチャ使用

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
	texture = <ObjectTexture>;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウOFF）

struct VS_OUTPUT
{
	float4 Pos		: POSITION;
	float2 Tex		: TEXCOORD0;
	float4 VPos		: TEXCOORD1;
	float Coef		: TEXCOORD2;
/*
	float3 Normal	: TEXCOORD2;
	float3 Eye		: TEXCOORD3;
*/
};

// 頂点シェーダ
VS_OUTPUT Basic_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;

	float3 wpos = mul( Pos, matW ).xyz;
/*
	Out.Eye = normalize(CameraPosition - wpos);
	Out.Normal = normalize( mul( Normal, (float3x3)matW ) );
	float edge = 1.0 - abs(dot(Out.Normal, Out.Eye));

	float s = frac(sin((wpos.x * 2.31 + wpos.y * 53.21 + wpos.z * 124.123) * 0.0127863) * 17143.321);

//	Out.Pos = mul( float4(wpos + Out.Normal * edge * s * 0.5, 1), matVP );
*/

	Out.Pos = mul( Pos, matWVP );
	Out.Tex = Tex;
	Out.VPos = mul( Pos, matWV );
	Out.Coef.x = -ZScale;

	return Out;
}

// ピクセルシェーダ
float4 Basic_PS( VS_OUTPUT IN ) : COLOR
{
	#if IGNORE_ALPHA > 0
	// アルファを無視する
	#else
	float alpha = MaterialDiffuse.a;
	if (use_texture)
	{
		alpha *= tex2D( ObjTexSampler, IN.Tex ).a;
	}
	clip(alpha - 0.1);
	#endif

	#if defined(CONSTANT_DETAIL_VALUE)
	// 常に定数にする
	float depth = CONSTANT_DETAIL_VALUE;
	#else
	float depth = saturate(exp2(IN.VPos.z * IN.Coef.x) + DeltailOffset);
	#endif

	return float4(depth, EFFECT_AMPLITUDE_VALUE, 0, 1);
}


// オブジェクト描画用テクニック
technique MainTec < string MMDPass = "object"; > {
	pass DrawObject
	{
		AlphaBlendEnable = FALSE;	AlphaTestEnable = FALSE;
		VertexShader = compile vs_3_0 Basic_VS();
		PixelShader  = compile ps_3_0 Basic_PS();
	}
}

// オブジェクト描画用テクニック
technique MainTecBS  < string MMDPass = "object_ss"; > {
	pass DrawObject {
		AlphaBlendEnable = FALSE;	AlphaTestEnable = FALSE;
		VertexShader = compile vs_3_0 Basic_VS();
		PixelShader  = compile ps_3_0 Basic_PS();
	}
}

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}

///////////////////////////////////////////////////////////////////////////////////////////////

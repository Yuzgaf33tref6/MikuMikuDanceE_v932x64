////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////

#define X_SCALE		0.5

///////////////////////////////////////////////////////////////////////////////////////////////

// 座標変換行列
float4x4 WorldMatrix              : WORLD;
float4x4 ViewMatrix               : VIEW;
float4x4 ProjMatrix               : PROJECTION;
//float4x4 ViewProjMatrix           : VIEWPROJECTION;

float4x4 CalcViewProjMatrix(float4x4 v, float4x4 p)
{
	// p._11_22 *= GIFrameScale;
	p._11 *= X_SCALE;
	return mul(v, p);
}
static float4x4 ViewProjMatrix = CalcViewProjMatrix(ViewMatrix, ProjMatrix);


float3 LightDirection : DIRECTION < string Object = "Light"; >;
float3 CameraPosition : POSITION  < string Object = "Camera"; >;

// マテリアル色
float4 MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;
float3 MaterialAmbient   : AMBIENT  < string Object = "Geometry"; >;
float3 MaterialEmissive  : EMISSIVE < string Object = "Geometry"; >;
float3 MaterialSpecular  : SPECULAR < string Object = "Geometry"; >;
float3 MaterialToon      : TOONCOLOR;
// ライト色
float3 LightDiffuse   : DIFFUSE   < string Object = "Light"; >;
float3 LightAmbient   : AMBIENT   < string Object = "Light"; >;
float3 LightSpecular  : SPECULAR  < string Object = "Light"; >;
static float4 DiffuseColor  = MaterialDiffuse  * float4(LightDiffuse, 1.0f);
static float3 AmbientColor  = MaterialAmbient  * LightAmbient + MaterialEmissive;

// テクスチャ材質モーフ値
float4 TextureAddValue  : ADDINGTEXTURE;
float4 TextureMulValue  : MULTIPLYINGTEXTURE;
float4 SphereAddValue   : ADDINGSPHERETEXTURE;
float4 SphereMulValue   : MULTIPLYINGSPHERETEXTURE;

bool use_texture;
bool use_spheremap;
bool use_subtexture;
bool use_toon;
/*
bool parthf;   // パースペクティブフラグ
bool transp;   // 半透明フラグ
bool spadd;    // スフィアマップ加算合成フラグ
#define SKII1  1500
#define SKII2  8000
#define Toon   3
*/

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

#if defined(ENABLE_AL)
#ifndef TEXTURE_SELECTLIGHT
// スフィアマップのテクスチャ
texture ObjectSphereMap: MATERIALSPHEREMAP;
sampler ObjSphareSampler = sampler_state {
    texture = <ObjectSphereMap>;
    MINFILTER = POINT;
    MAGFILTER = POINT;
    MIPFILTER = NONE;
    AddressU  = CLAMP;
    AddressV = CLAMP;
};
sampler ObjSphareSampler2 = sampler_state {
    texture = <ObjectSphereMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = NONE;
    AddressU  = CLAMP;
    AddressV = CLAMP;
};
#endif
#endif


////////////////////////////////////////////////////////////////////////////////////////////////

#define SPECULAR_BASE 100
#define SYNC false

#define PI 3.14159

#if defined(ENABLE_AL)
    float4 EgColor; 
    float4 SpcColor;
    static float SpecularPower = SpcColor.a;
    static float materialAlpha = EgColor.a;

float LightUp : CONTROLOBJECT < string name = "(self)"; string item = "LightUp"; >;
float LightUpE : CONTROLOBJECT < string name = "(self)"; string item = "LightUpE"; >;
float LightOff : CONTROLOBJECT < string name = "(self)"; string item = "LightOff"; >;
float Blink : CONTROLOBJECT < string name = "(self)"; string item = "LightBlink"; >;
float BlinkSq : CONTROLOBJECT < string name = "(self)"; string item = "LightBS"; >;
float BlinkDuty : CONTROLOBJECT < string name = "(self)"; string item = "LightDuty"; >;
float BlinkMin : CONTROLOBJECT < string name = "(self)"; string item = "LightMin"; >;
float LClockUp : CONTROLOBJECT < string name = "(self)"; string item = "LClockUp"; >;
float LClockDown : CONTROLOBJECT < string name = "(self)"; string item = "LClockDown"; >;

//時間
float ftime : TIME <bool SyncInEditMode = SYNC;>;

static float duty = (BlinkDuty <= 0) ? 0.5 : BlinkDuty;
static float timerate = ((Blink > 0) ? ((1 - cos(saturate(frac(ftime / (Blink * 10)) / (duty * 2)) * 2 * PI)) * 0.5) : 1.0)
                      * ((BlinkSq > 0) ? (frac(ftime / (BlinkSq * 10)) < duty) : 1.0);
static float timerate1 = timerate * (1 - BlinkMin) + BlinkMin;

static float ClockShift = (1 + LClockDown * 5) / (1 + LClockUp * 5);

static bool IsEmittion = (SPECULAR_BASE < SpecularPower)/* && (SpecularPower <= (SPECULAR_BASE + 100))*/ && (length(MaterialSpecular) < 0.01);
static float EmittionPower0 = IsEmittion ? ((SpecularPower - SPECULAR_BASE) / 7.0) : 1;
static float EmittionPower1 = EmittionPower0 * (LightUp * 2 + 1.0) * pow(400, LightUpE) * (1.0 - LightOff);

///////////////////////////////////////////////////////////////////////////////////////////////

float texlight(float3 rgb){
    float val = saturate((length(rgb) - LightThreshold) * 3);
    
    val *= 0.2;
    
    return val;
}

///////////////////////////////////////////////////////////////////////////////////////////////

float3 HSV_to_RGB(float3 hsv){
    float H = frac(hsv.x);
    float S = hsv.y;
    float V = hsv.z;
    
    float3 Color = 0;
    
    float Hp3 = H * 6.0;
    float h = floor(Hp3);
    float P = V * (1 - S);
    float Q = V * (1 - S * (Hp3 - h));
    float T = V * (1 - S * (1 - (Hp3 - h)));
    
    Color.rgb += float3(V, T, P) * max(0, 1 - abs(h - 0));
    Color.rgb += float3(Q, V, P) * max(0, 1 - abs(h - 1));
    Color.rgb += float3(P, V, T) * max(0, 1 - abs(h - 2));
    Color.rgb += float3(P, Q, V) * max(0, 1 - abs(h - 3));
    Color.rgb += float3(T, P, V) * max(0, 1 - abs(h - 4));
    Color.rgb += float3(V, P, Q) * max(0, 1 - abs(h - 5));
    
    return Color;
}


bool DecisionSystemCode(float4 SystemCode){
    bool val = (0.199 < SystemCode.r) && (SystemCode.r < 0.201)
            && (0.699 < SystemCode.g) && (SystemCode.g < 0.701);
    return val;
}


float4 getFlags(float flagcode){
    float4 val = frac(flagcode * float4(0.1, 0.01, 0.001, 0.0001));
    val = floor(val * 10 + 0.001);
    return val;
}


float2 DecisionSequenceCode(float4 color){
    bool val = (color.r > 0.99) && (abs(color.g - 0.5) < 0.02)
            && ((color.b < 0.01) || (color.g > 0.99));
    
    return float2(val, (color.b < 0.01));
}
#endif


////////////////////////////////////////////////////////////////////////////////////////////////

    struct MMM_SKINNING_INPUT{
        float4 Pos : POSITION;
        float2 Tex : TEXCOORD0;
        float4 AddUV1 : TEXCOORD1;
        float4 AddUV2 : TEXCOORD2;
        float4 AddUV3 : TEXCOORD3;
        float4 Normal : NORMAL;
        
    };

	inline void GetPositionNormal(MMM_SKINNING_INPUT IN, out float4 p, out float3 n)
	{
		p = IN.Pos;
		n = IN.Normal;
	}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画

struct VS_OUTPUT {
    float4 Pos       : POSITION;    // 射影変換座標
    float4 Tex       : TEXCOORD0;   // テクスチャ
    float3 Normal    : TEXCOORD1;   // 法線
    float4 WPos      : TEXCOORD2;

    float4 Color     : COLOR0;      // ディフューズ色
    float4 ColorAL   : COLOR1;      // AL用の色
};


VS_OUTPUT Basic_VS(MMM_SKINNING_INPUT IN)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;

	float4 pos;
	float3 Normal;
	GetPositionNormal(IN, pos, Normal);

#if defined(ENABLE_AL)
    float4 SystemCode = IN.AddUV1;
    float4 ColorCode = IN.AddUV2;
    float4 AppendCode = IN.AddUV3;
    
    bool IsALCode = DecisionSystemCode(SystemCode);
    float4 flags = getFlags(SystemCode.w);
#endif

    // ワールド座標変換
    pos = mul( pos, WorldMatrix );
    Out.WPos = pos; // ワールド座標

    // カメラ視点のビュー射影変換
    Out.Pos = mul( pos, ViewProjMatrix );

    Out.Normal = normalize( mul( Normal, (float3x3)WorldMatrix ) );

#if defined(ENABLE_AL)
    // AL対応
    #ifndef TEXTURE_SELECTLIGHT
    Out.ColorAL = MaterialDiffuse;
    Out.ColorAL.a = materialAlpha;
    Out.ColorAL.rgb += MaterialEmissive / 2;
    Out.ColorAL.rgb *= 0.5;
    Out.ColorAL.rgb = IsEmittion ? Out.ColorAL.rgb : float3(0,0,0);
    
    // 頂点発光 ////////////////////////
    
    float3 UVColor = ColorCode.rgb;
    UVColor = lerp(UVColor, HSV_to_RGB(UVColor), flags.y);
    UVColor *= ColorCode.a;
    
    Out.ColorAL.rgb += IsALCode ? UVColor : float3(0,0,0);
    
    float Tv = SystemCode.z * ClockShift;
    float Ph = AppendCode.y * ClockShift;
    float timerate2 = (Tv > 0)
		? ((1 - cos(saturate(frac((ftime + Ph) / Tv) / (duty * 2)) * 2 * PI)) * 0.5)
		: ((Tv < 0) ? (frac((ftime + Ph) / (-Tv / PI * 180)) < duty) : 1.0);
    Out.ColorAL.rgb *= max(timerate2 * (1 - BlinkMin) + BlinkMin, !IsALCode);
    Out.ColorAL.rgb *= max(timerate1, SystemCode.z != 0);
    #endif
#endif

    ////////////////////////

    Out.Tex.xy = IN.Tex; //テクスチャUV
	#if defined(ENABLE_AL)
    Out.Tex.z = IsALCode * AppendCode.x;
    Out.Tex.w = IsALCode * flags.x;
	#endif

   // ディフューズ色＋アンビエント色 計算
    Out.Color.rgb = AmbientColor;
    if ( !use_toon ) {
        Out.Color.rgb += max(0, dot( Out.Normal, -LightDirection )) * DiffuseColor.rgb;
    }
    Out.Color.a = DiffuseColor.a;
    Out.Color = saturate( Out.Color );

    #if POPUP_LIGHT
        Out.Pos.z -= 0.01 * saturate(length(Out.Color.rgb));
    #endif

    return Out;
}


// ピクセルシェーダ
float4 Basic_PS(VS_OUTPUT IN, uniform bool useShadow) : COLOR0
{
    float4 ColorAL = IN.ColorAL;
	float4 albed = 1;

    // 発光シーケンス ////////////////////////
    
#if defined(ENABLE_AL)
    #ifndef TEXTURE_SELECTLIGHT
    if(use_spheremap){
        //float4 spcolor1 = tex2Dlod(ObjSphareSampler, float4(1,0,0,0));
        float4 spcolor2 = tex2Dlod(ObjSphareSampler, float4(1,1,0,0));
        float4 spcolor3 = tex2Dlod(ObjSphareSampler, float4(0,1,0,0));
        
        float Ts = spcolor3.r * (255 * 60) + spcolor3.g * 255 + spcolor3.b * (255 / 100.0);
        Ts *= ClockShift;
        
        float t1 = frac((ftime/* + Ph * IsALCode*/) / Ts);
        float4 spcolor4 = tex2Dlod(ObjSphareSampler, float4(t1 * 0.25,0,0,0));
        float4 spcolor5 = tex2Dlod(ObjSphareSampler2, float4(t1 * 0.25,0,0,0));
        
        float2 sel = DecisionSequenceCode(spcolor2);
        
        ColorAL.rgb *= lerp(float3(1,1,1), lerp(spcolor5.rgb, spcolor4.rgb, sel.y), sel.x);
    }
    #endif
#endif

    if(use_texture){
        // テクスチャ適用
        float4 TexColor = tex2D(ObjTexSampler,IN.Tex.xy);
        // テクスチャ材質モーフ数
        TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a).rgb;
        albed *= TexColor;

#if defined(ENABLE_AL)
        float4 texcolor = TexColor;
        texcolor.rgb = saturate(texcolor.rgb - IN.Tex.z);

        #ifdef TEXTURE_SELECTLIGHT
            ColorAL = texcolor;
            ColorAL.rgb *= texlight(ColorAL.rgb);
        #else
            float4 Color2, Color3;
            
            Color2 = ColorAL * texcolor;
            Color3 = ColorAL * texcolor;
            Color3.rgb *= texlight(texcolor.rgb);
            
            ColorAL = (IN.Tex.w < 0.1) ? Color2 : ((IN.Tex.w < 1.1) ? ColorAL : Color3);
        #endif
#endif
    }

    float4 Color = albed * IN.Color * float4(LightSpecular, 1);
	Color.rgb = Color.rgb * LightScale;

	#if defined(ENABLE_AL)
	ColorAL.rgb *= (use_toon ? EmittionPower1 : EmittionPower0);
	Color.rgb += ColorAL.rgb * AL_Power;
	#endif

	return Color;
}



#define OBJECT_TEC(name, mmdpass, shadow) \
	technique name < string MMDPass = mmdpass; bool UseSelfShadow = shadow; \
	> { \
		pass DrawObject { \
			VertexShader = compile vs_3_0 Basic_VS(); \
			PixelShader  = compile ps_3_0 Basic_PS(shadow); \
		} \
	}


OBJECT_TEC(MainTec0, "object", false)
OBJECT_TEC(MainTecBS1, "object_ss", true)


technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTec < string MMDPass = "shadow"; > {}
technique ZplotTec < string MMDPass = "zplot"; > {}


///////////////////////////////////////////////////////////////////////////////////////////////

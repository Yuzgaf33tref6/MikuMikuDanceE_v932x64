////////////////////////////////////////////////////////////////////////////////////////////////
//
//  SoftShadowObject_MMM.fxsub  オフスクリーンへの非セルフシャドウ影描画(任意平面への写像可)
//  ( MikuMikuMoving対応版, SoftShadow.fx から呼び出されます．オフスクリーン描画用)
//  作成: 針金P
//
////////////////////////////////////////////////////////////////////////////////////////////////

// ワールド変換行列限定で、逆行列を計算する。
// - 行列が、等倍スケーリング、回転、平行移動しか含まないことを前提条件とする。
float4x4 InverseWorldMatrix(float4x4 mat) {
    float scaling = length(mat._11_12_13);
    float scaling_inv = 1.0 / scaling;

    float3x3 mat3x3_inv = transpose((float3x3)mat) * scaling_inv;
    return float4x4( mat3x3_inv[0], 0, 
                     mat3x3_inv[1], 0, 
                     mat3x3_inv[2], 0, 
                     -mul(mat._41_42_43,mat3x3_inv), 1 );
}

// 座標変換パラメータ
float4x4 WorldMatrix  : WORLD;
float4x4 MirrorWorldMatrix: CONTROLOBJECT < string Name = "(OffscreenOwner)"; >; // 地面アクセのワールド変換行列
static float4x4 InvMirrorWorldMatrix = InverseWorldMatrix(MirrorWorldMatrix);    // 地面アクセのワールド変換逆行列
static float3 PlanarPos = MirrorWorldMatrix._41_42_43;                           // 投影する平面上の任意の座標
static float3 PlanarNormal = mul( float3(0.0, 1.0, 0.0), (float3x3)MirrorWorldMatrix);  // 投影する平面の法線ベクトル
static float scaling = length(MirrorWorldMatrix._11_12_13)*0.1f;

//ライト関連
bool   LightEnables[MMM_LightCount]    : LIGHTENABLES;      // 有効フラグ
float3 LightDirection[MMM_LightCount]  : LIGHTDIRECTIONS;   // 方向

int Count = MMM_LightCount;
int Index;


///////////////////////////////////////////////////////////////////////////////////////////////
// 影（非セルフシャドウ）描画

struct VS_OUTPUT {
    float4 Pos   : POSITION;    // 射影変換座標
    float4 WPos  : TEXCOORD1;   // オブジェクトのワールド変換座標
    float4 SPos  : TEXCOORD2;   // 地面影のワールド変換座標
};

// 頂点シェーダ
VS_OUTPUT Shadow_VS(MMM_SKINNING_INPUT IN)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;

    //================================================================================
    //MikuMikuMoving独自のスキニング関数(MMM_SkinnedPosition)。座標を取得する。
    //================================================================================
    float4 Pos = MMM_SkinnedPosition(IN.Pos, IN.BlendWeight, IN.BlendIndices, IN.SdefC, IN.SdefR0, IN.SdefR1);

    // ワールド座標変換
    Pos = mul( Pos, WorldMatrix );
    Out.WPos = Pos;

    // 光源の仮位置(平行光源なので)
    float3 LightPos = Pos.xyz + (LightEnables[Index] ? LightDirection[Index] : float3(0,1,0));

    // 任意平面に投影
    float a = dot(PlanarNormal, PlanarPos - LightPos);
    float b = dot(PlanarNormal, Pos.xyz - PlanarPos);
    float c = dot(PlanarNormal, Pos.xyz - LightPos);
    Pos = float4(Pos.xyz * a + LightPos * b, c);
    Out.SPos = Pos;

    // 地面位置へ戻す(ビュー座標変換もどき)
    Pos = mul( Pos, InvMirrorWorldMatrix );

    // 射影座標変換もどき
    Pos.y = Pos.z;
    Pos.z = 0.0f;
    Pos.w *= 50.0f*scaling; // 地面アクセが-50〜50なので
    Out.Pos = Pos;

    return Out;
}

// ピクセルシェーダ
float4 Shadow_PS(VS_OUTPUT IN) : COLOR
{
    // 照明オフの時は描画しない
    clip( float(LightEnables[Index]) - 0.1f );

    float3 wpos = IN.WPos.xyz / IN.WPos.w;

    // 描画面の裏側になる部位は非表示
    clip( dot(wpos-PlanarPos, PlanarNormal) );

    float3 spos = IN.SPos.xyz / IN.SPos.w;
    float len = length(wpos - spos); // 遮蔽距離
    float len10 = saturate( floor(len/10.0f) * 0.1f );
    float len1 = saturate( fmod(len,10.0f) * 0.1f );

    return float4(1.0f, len10, len1, 1.0f);
}

///////////////////////////////////////////////////////////////////////////////////////
// テクニック

technique ShadowTec1 < string MMDPass = "object"; bool UseSelfShadow = false;
    string Script = "LoopByCount=Count;"
                        "LoopGetIndex=Index;"
                        "Pass=DrawShadow;"
                    "LoopEnd=;";
> {
    pass DrawShadow {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_2_0 Shadow_VS();
        PixelShader  = compile ps_2_0 Shadow_PS();
    }
}

technique ShadowTec3 < string MMDPass = "object"; bool UseSelfShadow = true;
    string Script = "LoopByCount=Count;"
                        "LoopGetIndex=Index;"
                        "Pass=DrawShadow;"
                    "LoopEnd=;";
> {
    pass DrawShadow {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_2_0 Shadow_VS();
        PixelShader  = compile ps_2_0 Shadow_PS();
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////

// MMM標準影は非表示にする
technique MainTec < string MMDPass = "shadow"; > { }
technique ShadowTec0 < string MMDPass = "edge"; > { }


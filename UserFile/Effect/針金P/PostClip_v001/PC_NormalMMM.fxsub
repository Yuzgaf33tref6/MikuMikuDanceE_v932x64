////////////////////////////////////////////////////////////////////////////////////////////////
//
//  PC_NormalMMM.fxsub  法線マップ作成(MikuMikuMoving版)
//  ( PostClip_Normal.fx から呼び出されます．オフスクリーン描画用)
//  作成: 針金P
//
////////////////////////////////////////////////////////////////////////////////////////////////
// パラメータ宣言

// 透過値に対する深度読み取り閾値
float AlphaClipThreshold = 0.5;

// 座標変換行列
float4x4 WorldViewProjMatrix : WORLDVIEWPROJECTION;
float4x4 WorldViewMatrix     : WORLDVIEW;
float4x4 WorldMatrix         : WORLD;
float4x4 ProjMatrix          : PROJECTION;

//カメラ位置
float3 CameraPosition  : POSITION < string Object = "Camera"; >;

// マテリアル色
float4 MaterialDiffuse : DIFFUSE  < string Object = "Geometry"; >;
float4 EdgeColor       : EDGECOLOR;
float  EdgeWidth       : EDGEWIDTH;

bool opadd; // 加算合成フラグ

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
};


////////////////////////////////////////////////////////////////////////////////////////////////
// 法線描画

struct VS_OUTPUT {
    float4 Pos    : POSITION;
    float3 Normal : TEXCOORD0;
    float2 Tex    : TEXCOORD1;
};

//==============================================
// 頂点シェーダ
//==============================================
VS_OUTPUT VS_Object(MMM_SKINNING_INPUT IN, uniform bool isObj)
{
    VS_OUTPUT Out = (VS_OUTPUT)0; 

    //================================================================================
    //MikuMikuMoving独自のスキニング関数(MMM_SkinnedPosition)。座標を取得する。
    //================================================================================
    MMM_SKINNING_OUTPUT SkinOut = MMM_SkinnedPositionNormal(IN.Pos, IN.Normal, IN.BlendWeight, IN.BlendIndices, IN.SdefC, IN.SdefR0, IN.SdefR1);

    float4 Pos = SkinOut.Position;

    // カメラ視点のワールドビュー射影変換
    if (MMM_IsDinamicProjection)
    {
        //if( !isObj ) {
        if( isObj ) {    // MMDPass="edge" が何故か呼び出されないのでobject側で描画
            float dist = length(CameraPosition - Pos.xyz);
            Pos += float4(SkinOut.Normal, 0) * IN.EdgeWeight * EdgeWidth * distance(Pos.xyz, CameraPosition) * MMM_GetDynamicFovEdgeRate(dist);
        }
        float4x4 wvpmat = mul(WorldViewMatrix, MMM_DynamicFov(ProjMatrix, length(CameraPosition - Pos.xyz)));
        Out.Pos = mul( Pos, wvpmat );
    }
    else
    {
        //if( !isObj ) {
        if( isObj ) {    // MMDPass="edge" が何故か呼び出されないのでobject側で描画
            Pos += float4(SkinOut.Normal, 0) * IN.EdgeWeight * EdgeWidth * distance(Pos.xyz, CameraPosition);
        }
        Out.Pos = mul( Pos, WorldViewProjMatrix );
    }

    // 法線のワールド変換
    Out.Normal = normalize( mul( SkinOut.Normal, (float3x3)WorldMatrix ) );

    // テクスチャ座標
    Out.Tex = IN.Tex;

    return Out;
}


//==============================================
// ピクセルシェーダ
//==============================================
float4 PS_Object(VS_OUTPUT IN, uniform bool isObj, uniform bool useTexture) : COLOR0
{
    float alpha;
    if( isObj ) {
        alpha = MaterialDiffuse.a * !opadd;
        if ( useTexture ) {
            // テクスチャ透過値適用
            alpha *= tex2D( ObjTexSampler, IN.Tex ).a * !opadd;
        }
    }else{
        alpha = EdgeColor.a * !opadd;
    }
    // α値が閾値以下の箇所は描画しない
    clip(alpha - AlphaClipThreshold);

    // 法線(-1〜+1を0〜1に正規化)
    float3 Normal = (IN.Normal + 1.0f) / 2.0f;

    return float4(Normal, 1.0f);
}


///////////////////////////////////////////////////////////////////////////////////////
// テクニック

// エッジ描画 // オフスクリーンでは何故か呼び出されない
technique EdgeNormalTec < string MMDPass = "edge"; >
{
    pass DrawEdge {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_3_0 VS_Object(false);
        PixelShader  = compile ps_3_0 PS_Object(false, false);
    }
}

// オブジェクト描画(セルフシャドウなし)
technique NormalTec0 < string MMDPass = "object"; bool UseTexture = false; bool UseSelfShadow = false; >
{
    pass DrawObject {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_3_0 VS_Object(true);
        PixelShader  = compile ps_3_0 PS_Object(true, false);
    }
}

technique NormalTec1 < string MMDPass = "object"; bool UseTexture = true; bool UseSelfShadow = false; >
{
    pass DrawObject {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_3_0 VS_Object(true);
        PixelShader  = compile ps_3_0 PS_Object(true, true);
    }
}

// オブジェクト描画(セルフシャドウあり)
technique NormalTecSS0 < string MMDPass = "object"; bool UseTexture = false; bool UseSelfShadow = true; >
{
    pass DrawObject {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_3_0 VS_Object(true);
        PixelShader  = compile ps_3_0 PS_Object(true, false);
    }
}

technique NormalTecSS1 < string MMDPass = "object"; bool UseTexture = true; bool UseSelfShadow = true; >
{
    pass DrawObject {
        AlphaBlendEnable = FALSE;
        VertexShader = compile vs_3_0 VS_Object(true);
        PixelShader  = compile ps_3_0 PS_Object(true, true);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////

//地面影は描画しない
technique ShadowTec < string MMDPass = "shadow"; > { }
// エッジは描画しない
technique EdgeDepthTec < string MMDPass = "edge"; > { }


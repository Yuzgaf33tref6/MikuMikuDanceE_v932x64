////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Silhouette_Mask_MMM.fxsub マスク画像作成，適用以外のモデルをを黒に
//  ( MikuMikuMoving対応版, Silhouette.fx から呼び出されます．オフスクリーン描画用)
//  作成: 針金P( MoggP氏のSampleBase.fxm改変 )
//
////////////////////////////////////////////////////////////////////////////////////////////////

// 座標変換行列
float4x4 ViewProjMatrix  : VIEWPROJECTION;
float4x4 WorldMatrix     : WORLD;
float4x4 ViewMatrix      : VIEW;
float4x4 ProjMatrix      : PROJECTION;

//カメラ位置
float3 CameraPosition  : POSITION  < string Object = "Camera"; >;

// マテリアル色
float4 MaterialDiffuse : DIFFUSE  < string Object = "Geometry"; >;
float4 EdgeColor       : EDGECOLOR;
float  EdgeWidth       : EDGEWIDTH;

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};


////////////////////////////////////////////////////////////////////////////////////////////////
// 輪郭描画

// 頂点シェーダ
float4 VS_EdgeMask(MMM_SKINNING_INPUT IN) : POSITION
{
    //================================================================================
    //MikuMikuMoving独自のスキニング関数(MMM_SkinnedPosition)。座標を取得する。
    //================================================================================
    MMM_SKINNING_OUTPUT SkinOut = MMM_SkinnedPositionNormal(IN.Pos, IN.Normal, IN.BlendWeight, IN.BlendIndices, IN.SdefC, IN.SdefR0, IN.SdefR1);

    // ワールド座標
    float4 Pos = mul(SkinOut.Position, WorldMatrix);

    // 法線方向
    float3 Normal = mul(SkinOut.Normal, (float3x3)WorldMatrix);

    // 頂点座標
    if (MMM_IsDinamicProjection)
    {
        float dist = length(CameraPosition - Pos.xyz);
        float4x4 vpmat = mul(ViewMatrix, MMM_DynamicFov(ProjMatrix, dist));

        Pos += float4(Normal, 0) * IN.EdgeWeight * EdgeWidth * distance(Pos.xyz, CameraPosition) * MMM_GetDynamicFovEdgeRate(dist);
        return mul( Pos, vpmat );
    }
    else
    {
        Pos += float4(Normal, 0) * IN.EdgeWeight * EdgeWidth * distance(Pos.xyz, CameraPosition);
        return mul( Pos, ViewProjMatrix );
    }
}

// ピクセルシェーダ
float4 PS_EdgeMask() : COLOR
{
    float alpha = EdgeColor.a;
    return float4(alpha, alpha, alpha, 0.01); // 反転して積算合成するので
}


//エッジ描画
technique EdgeTec < string MMDPass = "edge"; > {
    pass DrawMask {
        AlphaBlendEnable = TRUE;
        SrcBlend = ZERO;
        DestBlend = INVSRCCOLOR;
        VertexShader = compile vs_2_0 VS_EdgeMask();
        PixelShader  = compile ps_2_0 PS_EdgeMask();
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画

struct VS_OUTPUT
{
    float4 Pos : POSITION;    // 射影変換座標
    float2 Tex : TEXCOORD0;   // テクスチャ
};

// 頂点シェーダ
VS_OUTPUT VS_ObjectMask(MMM_SKINNING_INPUT IN)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;

    //================================================================================
    //MikuMikuMoving独自のスキニング関数(MMM_SkinnedPosition)。座標を取得する。
    //================================================================================
    float4 Pos = MMM_SkinnedPosition(IN.Pos, IN.BlendWeight, IN.BlendIndices, IN.SdefC, IN.SdefR0, IN.SdefR1);

    // ワールド座標
    Pos = mul(Pos, WorldMatrix);

    // 頂点座標
    if (MMM_IsDinamicProjection)
    {
        float dist = length(CameraPosition - Pos.xyz);
        float4x4 vpmat = mul(ViewMatrix, MMM_DynamicFov(ProjMatrix, dist));
        Out.Pos = mul( Pos, vpmat );
    }
    else
    {
        Out.Pos = mul( Pos, ViewProjMatrix );
    }

    Out.Tex = IN.Tex;

   return Out;
}

//ピクセルシェーダ(透過も考慮)
float4 PS_ObjectMask(float2 Tex : TEXCOORD0, uniform bool useTexture) : COLOR
{
    float alpha = MaterialDiffuse.a;

    if ( useTexture ) {
        // テクスチャ透過値適用
        alpha *= tex2D( ObjTexSampler, Tex ).a;
    }

    return float4(alpha, alpha, alpha, 0.01); // 反転して積算合成するので
}


///////////////////////////////////////////////////////////////////////////////////////
// テクニック

//セルフシャドウなし
technique Mask0 < string MMDPass = "object"; bool UseTexture = false; bool UseSelfShadow = false; > {
    pass DrawMask {
        AlphaBlendEnable = TRUE;
        SrcBlend = ZERO;
        DestBlend = INVSRCCOLOR;
        VertexShader = compile vs_2_0 VS_ObjectMask();
        PixelShader  = compile ps_2_0 PS_ObjectMask(false);
    }
}

technique Mask1 < string MMDPass = "object"; bool UseTexture = true; bool UseSelfShadow = false; > {
    pass DrawMask {
        AlphaBlendEnable = TRUE;
        SrcBlend = ZERO;
        DestBlend = INVSRCCOLOR;
        VertexShader = compile vs_2_0 VS_ObjectMask();
        PixelShader  = compile ps_2_0 PS_ObjectMask(true);
    }
}

//セルフシャドウあり
technique MaskSS0 < string MMDPass = "object"; bool UseTexture = false; bool UseSelfShadow = true; > {
    pass DrawMask {
        AlphaBlendEnable = TRUE;
        SrcBlend = ZERO;
        DestBlend = INVSRCCOLOR;
        VertexShader = compile vs_2_0 VS_ObjectMask();
        PixelShader  = compile ps_2_0 PS_ObjectMask(false);
    }
}

technique MaskSS1 < string MMDPass = "object"; bool UseTexture = true; bool UseSelfShadow = true; > {
    pass DrawMask {
        AlphaBlendEnable = TRUE;
        SrcBlend = ZERO;
        DestBlend = INVSRCCOLOR;
        VertexShader = compile vs_2_0 VS_ObjectMask();
        PixelShader  = compile ps_2_0 PS_ObjectMask(true);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////

//地面影は描画しない
technique ShadowTec < string MMDPass = "shadow"; > { }


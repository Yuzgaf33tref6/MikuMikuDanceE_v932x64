////////////////////////////////////////////////////////////////////////////////////////////////
// パラメータ宣言

//デフォルトの表示範囲
float MapAreaSize = 500;
float MapAreaDepth = 1500;

//デフォルトの表示範囲
#define MAP_TYPE 0

//カメラ視野内強調表示の色
float4 InCameraColor = float4(0.3, 0.8, 0, 0.6);

//TYPE0以外での描画に使われる色です
float4 MapColor1 = float4(0, 0.8, 0.2, 1);
float4 MapColor2 = float4(0.8, 0.2, 0, 1);

////////////////////////////////////////////////////////////////////////////////////////////////


// 座法変換行列
float4x4 WorldViewProjMatrix      : WORLDVIEWPROJECTION;
float4x4 WorldMatrix              : WORLD;
float4x4 ViewMatrix               : VIEW;
float4x4 LightWorldViewProjMatrix : WORLDVIEWPROJECTION < string Object = "Light"; >;

float3   LightDirection    : DIRECTION < string Object = "Light"; >;
float3   CameraPosition    : POSITION  < string Object = "Camera"; >;
float3   CameraDirection   : DIRECTION < string Object = "Camera"; >;

// マテリアル色
float4   MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;
float3   MaterialAmbient   : AMBIENT  < string Object = "Geometry"; >;
float3   MaterialEmmisive  : EMISSIVE < string Object = "Geometry"; >;
float3   MaterialSpecular  : SPECULAR < string Object = "Geometry"; >;
float    SpecularPower     : SPECULARPOWER < string Object = "Geometry"; >;
float3   MaterialToon      : TOONCOLOR;
float4   EdgeColor         : EDGECOLOR;
// ライト色
float3   LightDiffuse      : DIFFUSE   < string Object = "Light"; >;
float3   LightAmbient      : AMBIENT   < string Object = "Light"; >;
float3   LightSpecular     : SPECULAR  < string Object = "Light"; >;
static float4 DiffuseColor  = MaterialDiffuse  * float4(LightDiffuse, 1.0f);
static float3 AmbientColor  = saturate(MaterialAmbient  * LightAmbient + MaterialEmmisive);
static float3 SpecularColor = MaterialSpecular * LightSpecular;

bool     parthf;   // パースペクティブフラグ
bool     transp;   // 半透明フラグ
bool	 spadd;    // スフィアマップ加算合成フラグ
#define SKII1    1500
#define SKII2    8000
#define Toon     3




bool MapCenterEnable : CONTROLOBJECT < string name = "MapCenter.x"; >;
float3 MapCenterPos : CONTROLOBJECT < string name = "MapCenter.x"; >;
float4x4 MapCenterMat : CONTROLOBJECT < string name = "MapCenter.x"; >;


static float2 MapDir1 = normalize((mul(float3(0,0,-1), MapCenterMat).xyz).xz);

static float2 MapDir = lerp(normalize(CameraDirection.xz), MapDir1, MapCenterEnable);
static float3 MapCenter = lerp(CameraPosition, MapCenterPos, MapCenterEnable);


bool AreaSizeEnable : CONTROLOBJECT < string name = "MapAreaSize.x"; >;
float AreaSizeScale : CONTROLOBJECT < string name = "MapAreaSize.x"; >;
float AreaSizeAlpha : CONTROLOBJECT < string name = "MapAreaSize.x"; string item = "Tr"; >;

static float MapAreaSizeScaled = MapAreaSize * (AreaSizeEnable ? AreaSizeScale : 10) / 10;
static float MapAreaDepthScaled = MapAreaDepth * (AreaSizeEnable ? AreaSizeScale : 10) / 10;


// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
};

// スフィアマップのテクスチャ
texture ObjectSphereMap: MATERIALSPHEREMAP;
sampler ObjSphareSampler = sampler_state {
    texture = <ObjectSphereMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
};

// MMD本来のsamplerを上書きしないための記述です。削除不可。
sampler MMDSamp0 : register(s0);
sampler MMDSamp1 : register(s1);
sampler MMDSamp2 : register(s2);



////////////////////////////////////////////////////////////////////////////////////////////////
//MMM対応

#ifdef MIKUMIKUMOVING
    
    #define GETPOS MMM_SkinnedPosition(IN.Pos, IN.BlendWeight, IN.BlendIndices, IN.SdefC, IN.SdefR0, IN.SdefR1)
    
    int voffset : VERTEXINDEXOFFSET;
    
#else
    
    struct MMM_SKINNING_INPUT{
        float4 Pos : POSITION;
        float2 Tex : TEXCOORD0;
        float3 Normal : NORMAL;
        float4 AddUV1 : TEXCOORD1;
        float4 AddUV2 : TEXCOORD2;
        float4 AddUV3 : TEXCOORD3;
        int Index     : _INDEX;
    };
    
    #define GETPOS (IN.Pos)
    
    const int voffset = 0;
    
#endif

////////////////////////////////////////////////////////////////////////////////////////////////
// 輪郭描画

// 輪郭描画用テクニック
technique EdgeTec < string MMDPass = "edge"; > {
    
}


///////////////////////////////////////////////////////////////////////////////////////////////
// 影（非セルフシャドウ）描画

// 影描画用テクニック
technique ShadowTec < string MMDPass = "shadow"; > {
    
}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウOFF）

struct VS_OUTPUT {
    float4 Pos        : POSITION;    // マップ射影変換座標
    float4 ScreenPos  : TEXCOORD0;   // 標準射影変換座標
    float2 Tex        : TEXCOORD1;   // テクスチャ
    float3 Normal     : TEXCOORD2;   // 法線
    float3 Eye        : TEXCOORD3;   // カメラとの相対位置
    float2 SpTex      : TEXCOORD4;	 // スフィアマップテクスチャ座標
    float4 Color      : COLOR0;      // ディフューズ色
};

// 頂点シェーダ
VS_OUTPUT Basic_VS(MMM_SKINNING_INPUT IN, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;
    
    float4 basepos = GETPOS;
    
    float4 pos = basepos;
    float4 pos2;
    
    pos = mul( pos, WorldMatrix );
    
    pos.xyz = pos.xyz - MapCenter;
    
    float2 dir1 = MapDir;
    float2 dir2 = float2(dir1.y, -dir1.x);
    
    pos2.x = dot(pos.xz, dir2) / MapAreaSizeScaled * 2;
    pos2.y = dot(pos.xz, dir1) / MapAreaSizeScaled * 2;
    
    pos2.z = -pos.y / MapAreaDepthScaled + 0.5;
    pos2.w = 1;
    
    Out.Pos = pos2;
    
    // カメラ視点のワールドビュー射影変換
    Out.ScreenPos = mul( basepos, WorldViewProjMatrix );
    
    
    // カメラとの相対位置
    Out.Eye = CameraPosition - mul( basepos, WorldMatrix );
    // 頂点法線
    Out.Normal = normalize( mul( IN.Normal, (float3x3)WorldMatrix ) );
    
    #if MAP_TYPE==1
        float rate = saturate(((pos2.z - 0.5) * 2 + 0.5));
        Out.Color = lerp(MapColor1, MapColor2, rate);
        //Out.Color.rgb *= rate;
        
    #elif MAP_TYPE==2
        Out.Color = MapColor1;
        
    #else
        
        float3 spec = MaterialSpecular;
        
        // ディフューズ色＋アンビエント色 計算
        Out.Color.rgb = AmbientColor;
        if ( !useToon ) {
            Out.Color.rgb += DiffuseColor.rgb / 2;
            spec *= 10;
        }
        
        bool IsMapSpecialObject = (MaterialDiffuse.a < 0.01) && (spec.r > 0.99)
                                      && (spec.g < 0.01) && (SpecularPower < 1); 
        
        Out.Color.a = IsMapSpecialObject ? (spec.b) : DiffuseColor.a;
        Out.Color = saturate( Out.Color );
        
    #endif
    
    // テクスチャ座標
    Out.Tex = IN.Tex;
    
    if ( useSphereMap ) {
        // スフィアマップテクスチャ座標
        float2 NormalWV = mul( Out.Normal, (float3x3)ViewMatrix );
        Out.SpTex.x = NormalWV.x * 0.5f + 0.5f;
        Out.SpTex.y = NormalWV.y * -0.5f + 0.5f;
    }
    
    return Out;
}

// ピクセルシェーダ
float4 Basic_PS(VS_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap, uniform bool useToon) : COLOR0
{
    
    float4 Color = IN.Color;
    
    #if MAP_TYPE==0
        if ( useTexture ) {
            // テクスチャ適用
            Color *= tex2D( ObjTexSampler, IN.Tex );
        }
        if ( useSphereMap ) {
            // スフィアマップ適用
            if(spadd) Color.rgb += tex2D(ObjSphareSampler,IN.SpTex).rgb;
            else      Color.rgb *= tex2D(ObjSphareSampler,IN.SpTex).rgb;
        }
        
        float scx = IN.ScreenPos.x / IN.ScreenPos.w;
        float scy = IN.ScreenPos.y / IN.ScreenPos.w;
        float InScreen = (-1 <= scx && scx <= 1 && -1 <= scy && scy <= 1 && IN.ScreenPos.z > 0) * (1 - (AreaSizeEnable ? AreaSizeAlpha : 1));
        
        Color.rgb = lerp(Color.rgb , InCameraColor.rgb, InScreen * InCameraColor.a);
        
    #endif
    
    return Color;
}




///////////////////////////////////////////////////////////////////////////////////////////////


stateblock DrawObjectState = stateblock_state
{
    AlphaBlendEnable = true;
    AlphaTestEnable = true;
    
    #if  MAP_TYPE==1
        DestBlend = InvSrcAlpha; SrcBlend = SrcAlpha; //加算合成のキャンセル
        
    #endif
    
    #if MAP_TYPE==2
        
        DestBlend = InvSrcAlpha; SrcBlend = SrcAlpha; //加算合成のキャンセル
        FillMode = WIREFRAME;
        
    #endif
    
};



// オブジェクト描画用テクニック（アクセサリ用）
// 不要なものは削除可
technique MainTec0 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, false, false);
        PixelShader  = compile ps_2_0 Basic_PS(false, false, false);
    }
}

technique MainTec1 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, false, false);
        PixelShader  = compile ps_2_0 Basic_PS(true, false, false);
    }
}

technique MainTec2 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, true, false);
        PixelShader  = compile ps_2_0 Basic_PS(false, true, false);
    }
}

technique MainTec3 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, true, false);
        PixelShader  = compile ps_2_0 Basic_PS(true, true, false);
    }
}

// オブジェクト描画用テクニック（PMDモデル用）
technique MainTec4 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, false, true);
        PixelShader  = compile ps_2_0 Basic_PS(false, false, true);
    }
}

technique MainTec5 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, false, true);
        PixelShader  = compile ps_2_0 Basic_PS(true, false, true);
    }
}

technique MainTec6 < string MMDPass = "object"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, true, true);
        PixelShader  = compile ps_2_0 Basic_PS(false, true, true);
    }
}

technique MainTec7 < string MMDPass = "object"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, true, true);
        PixelShader  = compile ps_2_0 Basic_PS(true, true, true);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
// セルフシャドウ用Z値プロット

// Z値プロット用テクニック
technique ZplotTec < string MMDPass = "zplot"; > {
    
}


///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウON）



// オブジェクト描画用テクニック（アクセサリ用）
technique MainTecBS0  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, false, false);
        PixelShader  = compile ps_2_0 Basic_PS(false, false, false);
    }
}

technique MainTecBS1  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, false, false);
        PixelShader  = compile ps_2_0 Basic_PS(true, false, false);
    }
}

technique MainTecBS2  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, true, false);
        PixelShader  = compile ps_2_0 Basic_PS(false, true, false);
    }
}

technique MainTecBS3  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = false; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, true, false);
        PixelShader  = compile ps_2_0 Basic_PS(true, true, false);
    }
}

// オブジェクト描画用テクニック（PMDモデル用）
technique MainTecBS4  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, false, true);
        PixelShader  = compile ps_2_0 Basic_PS(false, false, true);
    }
}

technique MainTecBS5  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = false; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, false, true);
        PixelShader  = compile ps_2_0 Basic_PS(true, false, true);
    }
}

technique MainTecBS6  < string MMDPass = "object_ss"; bool UseTexture = false; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(false, true, true);
        PixelShader  = compile ps_2_0 Basic_PS(false, true, true);
    }
}

technique MainTecBS7  < string MMDPass = "object_ss"; bool UseTexture = true; bool UseSphereMap = true; bool UseToon = true; > {
    pass DrawObject {
        StateBlock = (DrawObjectState);
        VertexShader = compile vs_2_0 Basic_VS(true, true, true);
        PixelShader  = compile ps_2_0 Basic_PS(true, true, true);
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
